<?php
/**
 * Generated by Haxe 4.3.7
 */

namespace haxe\io;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Exception;
use \php\_Boot\HxString;
use \haxe\exceptions\NotImplementedException;

/**
 * An Input is an abstract reader. See other classes in the `haxe.io` package
 * for several possible implementations.
 * All functions which read data throw `Eof` when the end of the stream
 * is reached.
 */
class Input {
	/**
	 * Read and return one byte.
	 * 
	 * @return int
	 */
	public function readByte () {
		#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:53: characters 10-15
		throw new NotImplementedException(null, null, new HxAnon([
			"fileName" => "haxe/io/Input.hx",
			"lineNumber" => 53,
			"className" => "haxe.io.Input",
			"methodName" => "readByte",
		]));
	}

	/**
	 * Read a line of text separated by CR and/or LF bytes.
	 * The CR/LF characters are not included in the resulting string.
	 * 
	 * @return string
	 */
	public function readLine () {
		#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:177: characters 3-31
		$buf = new BytesBuffer();
		#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:178: characters 3-16
		$last = null;
		#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:179: characters 3-9
		$s = null;
		#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:180: lines 180-190
		try {
			#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:181: lines 181-182
			while (true) {
				#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:181: characters 11-30
				$last = $this->readByte();
				#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:181: lines 181-182
				if (!($last !== 10)) {
					break;
				}
				#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:182: characters 5-22
				$buf->b = ($buf->b . \chr($last));
			}
			#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:183: characters 4-33
			$s = $buf->getBytes()->toString();
			#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:184: lines 184-185
			if (HxString::charCodeAt($s, mb_strlen($s) - 1) === 13) {
				#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:185: characters 5-24
				$s = \mb_substr($s, 0, -1);
			}
		} catch(\Throwable $_g) {
			#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:186: characters 12-13
			$_g1 = Exception::caught($_g)->unwrap();
			#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:180: lines 180-190
			if (($_g1 instanceof Eof)) {
				#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:186: characters 12-13
				$e = $_g1;
				#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:187: characters 4-33
				$s = $buf->getBytes()->toString();
				#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:188: lines 188-189
				if (mb_strlen($s) === 0) {
					#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:189: characters 37-42
					throw Exception::thrown($e);
				}
			} else {
				#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:180: lines 180-190
				throw $_g;
			}
		}
		#C:\HaxeToolkit\haxe\std/haxe/io/Input.hx:191: characters 3-11
		return $s;
	}
}

Boot::registerClass(Input::class, 'haxe.io.Input');
