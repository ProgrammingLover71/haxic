<?php
/**
 * Generated by Haxe 4.3.7
 */

use \sys\io\FileInput;
use \php\Boot;
use \haxe\io\Output;
use \sys\io\FileOutput;
use \haxe\io\Input;

/**
 * This class provides access to various base functions of system platforms.
 * Look in the `sys` package for more system APIs.
 */
class Sys {
	/**
	 * Returns all the arguments that were passed in the command line.
	 * This does not include the interpreter or the name of the program file.
	 * (java)(eval) On Windows, non-ASCII Unicode arguments will not work correctly.
	 * (cs) Non-ASCII Unicode arguments will not work correctly.
	 * 
	 * @return string[]|\Array_hx
	 */
	public static function args () {
		#C:\HaxeToolkit\haxe\std/php/_std/Sys.hx:78: lines 78-82
		if (array_key_exists("argv", $_SERVER)) {
			#C:\HaxeToolkit\haxe\std/php/_std/Sys.hx:79: characters 4-89
			return \Array_hx::wrap(array_slice($_SERVER["argv"], 1));
		} else {
			#C:\HaxeToolkit\haxe\std/php/_std/Sys.hx:81: characters 4-13
			return new \Array_hx();
		}
	}

	/**
	 * Returns the standard input of the process, from which user input can be read.
	 * Usually it will block until the user sends a full input line.
	 * See `getChar` for an alternative.
	 * 
	 * @return Input
	 */
	public static function stdin () {
		#C:\HaxeToolkit\haxe\std/php/_std/Sys.hx:176: characters 3-84
		$p = (defined("STDIN") ? STDIN : fopen("php://stdin", "r"));
		#C:\HaxeToolkit\haxe\std/php/_std/Sys.hx:177: characters 3-42
		return new FileInput($p);
	}

	/**
	 * Returns the standard output of the process, to which program output can be written.
	 * 
	 * @return Output
	 */
	public static function stdout () {
		#C:\HaxeToolkit\haxe\std/php/_std/Sys.hx:181: characters 3-87
		$p = (defined("STDOUT") ? STDOUT : fopen("php://stdout", "w"));
		#C:\HaxeToolkit\haxe\std/php/_std/Sys.hx:182: characters 3-43
		return new FileOutput($p);
	}
}

Boot::registerClass(Sys::class, 'Sys');
