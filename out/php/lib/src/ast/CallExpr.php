<?php
/**
 * Generated by Haxe 4.3.7
 */

namespace src\ast;

use \php\Boot;

class CallExpr extends Expr {
	/**
	 * @var Expr[]|\Array_hx
	 */
	public $arguments;
	/**
	 * @var Expr
	 */
	public $callee;

	/**
	 * @param Expr $callee
	 * @param Expr[]|\Array_hx $arguments
	 * @param int $line
	 * @param int $column
	 * 
	 * @return void
	 */
	public function __construct ($callee, $arguments, $line, $column) {
		#src/ast/CallExpr.hx:8: characters 9-28
		parent::__construct($line, $column);
		#src/ast/CallExpr.hx:9: characters 9-29
		$this->callee = $callee;
		#src/ast/CallExpr.hx:10: characters 9-35
		$this->arguments = $arguments;
	}

	/**
	 * @return string
	 */
	public function toString () {
		#src/ast/CallExpr.hx:14: characters 16-63
		$tmp = "Call(callee=" . ($this->callee->toString()??'null') . ", args=[";
		#src/ast/CallExpr.hx:14: characters 66-116
		$result = [];
		$data = $this->arguments->arr;
		$_g_current = 0;
		$_g_length = \count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			$result[] = $item->toString();
		}
		#src/ast/CallExpr.hx:14: characters 9-134
		return ($tmp??'null') . (\Array_hx::wrap($result)->join(", ")??'null') . "])";
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(CallExpr::class, 'src.ast.CallExpr');
