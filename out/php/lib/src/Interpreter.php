<?php
/**
 * Generated by Haxe 4.3.7
 */

namespace src;

use \src\ast\ForeachStmt;
use \src\ast\StringExpr;
use \src\ast\NumberExpr;
use \src\ast\VariableExpr;
use \php\Boot;
use \haxe\Exception;
use \src\ast\BinaryExpr;
use \src\ast\LetStmt;
use \src\ast\IfStmt;
use \src\ast\NullExpr;
use \src\ast\PrintStmt;
use \src\ast\FunctionStmt;
use \src\ast\CallExpr;
use \src\ast\IndexExpr;
use \src\ast\UnaryExpr;
use \src\ast\InputStmt;
use \src\ast\ArrayExpr;
use \src\ast\ReturnStmt;
use \src\ast\Expr;
use \src\ast\Stmt;
use \src\ast\Parameter;
use \src\ast\BlockStmt;
use \src\ast\WhileStmt;
use \src\ast\ExprStmt;

class Interpreter extends ASTWalker {
	/**
	 * @var Environment
	 */
	public $environment;

	/**
	 * @return void
	 */
	public function __construct () {
		#src/Interpreter.hx:154: characters 9-40
		$this->environment = new Environment();
		#src/Interpreter.hx:155: characters 9-42
		$this->environment->define("pi", \Math::$PI);
		#src/Interpreter.hx:156: characters 9-45
		$this->environment->define("e", \exp(1));
		#src/Interpreter.hx:157: characters 9-58
		$this->environment->define("inf", \Math::$POSITIVE_INFINITY);
		#src/Interpreter.hx:158: characters 9-44
		$this->environment->define("nan", \Math::$NaN);
		#src/Interpreter.hx:160: lines 160-162
		$this->environment->define("clock", new NativeFunction("clock", new \Array_hx(), function ($env) {
			#src/Interpreter.hx:161: characters 13-30
			return \microtime(true);
		}));
		#src/Interpreter.hx:163: lines 163-172
		$this->environment->define("length", new NativeFunction("length", \Array_hx::wrap([new Parameter("item", null, 0, 0)]), function ($env) {
			#src/Interpreter.hx:164: characters 13-48
			$item = $env->get("item");
			#src/Interpreter.hx:165: lines 165-171
			if (is_string($item)) {
				#src/Interpreter.hx:166: characters 17-46
				return mb_strlen($item);
			} else if (($item instanceof \Array_hx)) {
				#src/Interpreter.hx:168: characters 17-54
				return $item->length;
			} else {
				#src/Interpreter.hx:170: characters 17-22
				throw Exception::thrown("length() argument must be a string or array");
			}
		}));
	}

	/**
	 * @param Stmt[]|\Array_hx $ast
	 * 
	 * @return void
	 */
	public function visit ($ast) {
		#src/Interpreter.hx:176: lines 176-178
		$_g = 0;
		while ($_g < $ast->length) {
			#src/Interpreter.hx:176: characters 14-18
			$stmt = ($ast->arr[$_g] ?? null);
			#src/Interpreter.hx:176: lines 176-178
			++$_g;
			#src/Interpreter.hx:177: characters 13-46
			if ($stmt !== null) {
				#src/Interpreter.hx:177: characters 31-46
				$this->visitStmt($stmt);
			}
		}
	}

	/**
	 * @param ArrayExpr $expr
	 * 
	 * @return mixed[]|\Array_hx
	 */
	public function visitArrayExpr ($expr) {
		#src/Interpreter.hx:420: characters 9-42
		$elements = new \Array_hx();
		#src/Interpreter.hx:421: lines 421-423
		$_g = 0;
		$_g1 = $expr->elements;
		while ($_g < $_g1->length) {
			#src/Interpreter.hx:421: characters 14-16
			$el = ($_g1->arr[$_g] ?? null);
			#src/Interpreter.hx:421: lines 421-423
			++$_g;
			#src/Interpreter.hx:422: characters 13-41
			$x = $this->visitExpr($el);
			$elements->arr[$elements->length++] = $x;
		}
		#src/Interpreter.hx:424: characters 9-24
		return $elements;
	}

	/**
	 * @param BinaryExpr $expr
	 * 
	 * @return mixed
	 */
	public function visitBinaryExpr ($expr) {
		#src/Interpreter.hx:339: characters 9-49
		$left = $this->visitExpr($expr->left);
		#src/Interpreter.hx:340: characters 9-51
		$right = $this->visitExpr($expr->right);
		#src/Interpreter.hx:341: characters 17-31
		$__hx__switch = ($expr->oper->type->index);
		if ($__hx__switch === 4) {
			#src/Interpreter.hx:344: lines 344-350
			if (($left instanceof \Array_hx) && ($right instanceof \Array_hx)) {
				#src/Interpreter.hx:345: characters 21-84
				return $left->concat($right);
			} else if (is_string($left) || is_string($right)) {
				#src/Interpreter.hx:347: characters 21-64
				return \Std::string($left) . \Std::string($right);
			} else {
				#src/Interpreter.hx:349: characters 21-40
				return Boot::addOrConcat($left, $right);
			}
		} else if ($__hx__switch === 5) {
			#src/Interpreter.hx:352: characters 17-36
			return $left - $right;
		} else if ($__hx__switch === 6) {
			#src/Interpreter.hx:354: characters 17-36
			return $left * $right;
		} else if ($__hx__switch === 7) {
			#src/Interpreter.hx:356: characters 17-36
			return $left / $right;
		} else if ($__hx__switch === 15) {
			#src/Interpreter.hx:366: characters 17-37
			return Boot::equal($left, $right);
		} else if ($__hx__switch === 16) {
			#src/Interpreter.hx:368: characters 17-37
			return !Boot::equal($left, $right);
		} else if ($__hx__switch === 17) {
			#src/Interpreter.hx:358: characters 17-36
			return $left > $right;
		} else if ($__hx__switch === 18) {
			#src/Interpreter.hx:360: characters 17-37
			return $left >= $right;
		} else if ($__hx__switch === 19) {
			#src/Interpreter.hx:362: characters 17-36
			return $left < $right;
		} else if ($__hx__switch === 20) {
			#src/Interpreter.hx:364: characters 17-37
			return $left <= $right;
		} else if ($__hx__switch === 21) {
			#src/Interpreter.hx:370: characters 17-29
			return !$left;
		} else {
			#src/Interpreter.hx:372: characters 17-22
			throw Exception::thrown("Unknown operator " . ((($expr->oper->value === null ? "null" : \Std::string($expr->oper->value)))??'null') . " at line " . ($expr->oper->line??'null') . ", column " . ($expr->oper->column??'null'));
		}
	}

	/**
	 * @param BlockStmt $stmt
	 * 
	 * @return void
	 */
	public function visitBlockStmt ($stmt) {
		#src/Interpreter.hx:246: lines 246-248
		$_g = 0;
		$_g1 = $stmt->statements;
		while ($_g < $_g1->length) {
			#src/Interpreter.hx:246: characters 14-15
			$s = ($_g1->arr[$_g] ?? null);
			#src/Interpreter.hx:246: lines 246-248
			++$_g;
			#src/Interpreter.hx:247: characters 13-25
			$this->visitStmt($s);
		}
	}

	/**
	 * @param CallExpr $expr
	 * 
	 * @return mixed
	 */
	public function visitCallExpr ($expr) {
		#src/Interpreter.hx:394: characters 9-53
		$callee = $this->visitExpr($expr->callee);
		#src/Interpreter.hx:395: characters 9-38
		$args = new \Array_hx();
		#src/Interpreter.hx:396: lines 396-398
		$_g = 0;
		$_g1 = $expr->arguments;
		while ($_g < $_g1->length) {
			#src/Interpreter.hx:396: characters 14-17
			$arg = ($_g1->arr[$_g] ?? null);
			#src/Interpreter.hx:396: lines 396-398
			++$_g;
			#src/Interpreter.hx:397: characters 13-38
			$x = $this->visitExpr($arg);
			$args->arr[$args->length++] = $x;
		}
		#src/Interpreter.hx:399: lines 399-410
		if (($callee instanceof Function_hx)) {
			#src/Interpreter.hx:400: lines 400-404
			try {
				#src/Interpreter.hx:401: characters 17-53
				$callee->call($args, $this);
			} catch(Return_hx $e) {
				#src/Interpreter.hx:403: characters 17-31
				return $e->value;
			}
			#src/Interpreter.hx:405: characters 13-24
			return null;
		} else if (($callee instanceof NativeFunction)) {
			#src/Interpreter.hx:407: characters 13-62
			return $callee->call($args, $this);
		} else {
			#src/Interpreter.hx:409: characters 13-18
			throw Exception::thrown("Attempted to call a non-function at line " . ($expr->line??'null') . ", column " . ($expr->column??'null'));
		}
	}

	/**
	 * @param Expr $expr
	 * 
	 * @return mixed
	 */
	public function visitExpr ($expr) {
		#src/Interpreter.hx:301: lines 301-321
		if (($expr instanceof BinaryExpr)) {
			#src/Interpreter.hx:302: characters 13-46
			return $this->visitBinaryExpr($expr);
		} else if (($expr instanceof NumberExpr)) {
			#src/Interpreter.hx:304: characters 13-46
			return $this->visitNumberExpr($expr);
		} else if (($expr instanceof VariableExpr)) {
			#src/Interpreter.hx:306: characters 13-48
			return $this->visitVariableExpr($expr);
		} else if (($expr instanceof UnaryExpr)) {
			#src/Interpreter.hx:308: characters 13-45
			return $this->visitUnaryExpr($expr);
		} else if (($expr instanceof StringExpr)) {
			#src/Interpreter.hx:310: characters 13-46
			return $this->visitStringExpr($expr);
		} else if (($expr instanceof CallExpr)) {
			#src/Interpreter.hx:312: characters 13-44
			return $this->visitCallExpr($expr);
		} else if (($expr instanceof NullExpr)) {
			#src/Interpreter.hx:314: characters 13-44
			return $this->visitNullExpr($expr);
		} else if (($expr instanceof ArrayExpr)) {
			#src/Interpreter.hx:316: characters 13-45
			return $this->visitArrayExpr($expr);
		} else if (($expr instanceof IndexExpr)) {
			#src/Interpreter.hx:318: characters 13-45
			return $this->visitIndexExpr($expr);
		} else {
			#src/Interpreter.hx:320: characters 13-18
			throw Exception::thrown("Unknown expression type: " . \Std::string($expr));
		}
	}

	/**
	 * @param ExprStmt $stmt
	 * 
	 * @return void
	 */
	public function visitExprStmt ($stmt) {
		#src/Interpreter.hx:253: characters 9-29
		$this->visitExpr($stmt->expr);
	}

	/**
	 * @param ForeachStmt $stmt
	 * 
	 * @return void
	 */
	public function visitForeachStmt ($stmt) {
		#src/Interpreter.hx:227: characters 9-55
		$iterable = $this->visitExpr($stmt->target);
		#src/Interpreter.hx:228: characters 9-42
		$varName = $stmt->variable->name;
		#src/Interpreter.hx:229: lines 229-241
		if (($iterable instanceof \Array_hx)) {
			#src/Interpreter.hx:230: lines 230-233
			$_g = 0;
			$_g1 = $iterable;
			while ($_g < $_g1->length) {
				#src/Interpreter.hx:230: characters 18-22
				$item = ($_g1->arr[$_g] ?? null);
				#src/Interpreter.hx:230: lines 230-233
				++$_g;
				#src/Interpreter.hx:231: characters 17-50
				$this->environment->define($varName, $item);
				#src/Interpreter.hx:232: characters 17-37
				$this->visitStmt($stmt->body);
			}
		} else if (is_string($iterable)) {
			#src/Interpreter.hx:235: characters 23-27
			$_g = 0;
			#src/Interpreter.hx:235: characters 27-55
			$_g1 = mb_strlen($iterable);
			#src/Interpreter.hx:235: lines 235-238
			while ($_g < $_g1) {
				#src/Interpreter.hx:235: characters 23-55
				$i = $_g++;
				#src/Interpreter.hx:236: characters 17-75
				$this->environment->define($varName, ($i < 0 ? "" : \mb_substr($iterable, $i, 1)));
				#src/Interpreter.hx:237: characters 17-37
				$this->visitStmt($stmt->body);
			}
		} else {
			#src/Interpreter.hx:240: characters 13-18
			throw Exception::thrown("Foreach target must be an array or string at line " . ($stmt->line??'null') . ", column " . ($stmt->column??'null'));
		}
	}

	/**
	 * @param FunctionStmt $stmt
	 * 
	 * @return void
	 */
	public function visitFunctionStmt ($stmt) {
		#src/Interpreter.hx:267: characters 9-75
		$functionObj = new Function_hx($stmt->name, $stmt->params, $stmt->body);
		#src/Interpreter.hx:268: characters 9-51
		$this->environment->define($stmt->name, $functionObj);
	}

	/**
	 * @param IfStmt $stmt
	 * 
	 * @return void
	 */
	public function visitIfStmt ($stmt) {
		#src/Interpreter.hx:209: characters 9-59
		$condition = $this->visitExpr($stmt->condition);
		#src/Interpreter.hx:210: lines 210-214
		if ($condition) {
			#src/Interpreter.hx:211: characters 13-44
			$this->visitBlockStmt($stmt->thenBranch);
		} else if ($stmt->elseBranch !== null) {
			#src/Interpreter.hx:213: characters 13-44
			$this->visitBlockStmt($stmt->elseBranch);
		}
	}

	/**
	 * @param IndexExpr $expr
	 * 
	 * @return mixed
	 */
	public function visitIndexExpr ($expr) {
		#src/Interpreter.hx:429: characters 9-53
		$target = $this->visitExpr($expr->target);
		#src/Interpreter.hx:430: characters 9-51
		$index = $this->visitExpr($expr->index);
		#src/Interpreter.hx:431: lines 431-445
		if (($target instanceof \Array_hx)) {
			#src/Interpreter.hx:432: lines 432-437
			if (Boot::isOfType($index, Boot::getClass('Int'))) {
				#src/Interpreter.hx:433: characters 17-53
				$arr = $target;
				#src/Interpreter.hx:434: characters 17-41
				$idx = $index;
				#src/Interpreter.hx:435: characters 17-56
				if (($idx < 0) || ($idx >= $arr->length)) {
					#src/Interpreter.hx:435: characters 51-56
					throw Exception::thrown("Array index out of bounds at line " . ($expr->line??'null') . ", column " . ($expr->column??'null'));
				}
				#src/Interpreter.hx:436: characters 17-32
				return ($arr->arr[$idx] ?? null);
			} else {
				#src/Interpreter.hx:437: characters 20-25
				throw Exception::thrown("Array index must be an integer at line " . ($expr->line??'null') . ", column " . ($expr->column??'null'));
			}
		} else if (is_string($target)) {
			#src/Interpreter.hx:439: lines 439-444
			if (Boot::isOfType($index, Boot::getClass('Int'))) {
				#src/Interpreter.hx:440: characters 17-45
				$str = $target;
				#src/Interpreter.hx:441: characters 17-41
				$idx = $index;
				#src/Interpreter.hx:442: characters 17-56
				if (($idx < 0) || ($idx >= mb_strlen($str))) {
					#src/Interpreter.hx:442: characters 51-56
					throw Exception::thrown("String index out of bounds at line " . ($expr->line??'null') . ", column " . ($expr->column??'null'));
				}
				#src/Interpreter.hx:443: characters 24-39
				if ($idx < 0) {
					return "";
				} else {
					return \mb_substr($str, $idx, 1);
				}
			} else {
				#src/Interpreter.hx:444: characters 20-25
				throw Exception::thrown("String index must be an integer at line " . ($expr->line??'null') . ", column " . ($expr->column??'null'));
			}
		} else {
			#src/Interpreter.hx:445: characters 16-21
			throw Exception::thrown("Attempted to index a non-array/string at line " . ($expr->line??'null') . ", column " . ($expr->column??'null'));
		}
	}

	/**
	 * @param InputStmt $stmt
	 * 
	 * @return void
	 */
	public function visitInputStmt ($stmt) {
		#src/Interpreter.hx:190: characters 9-51
		$input = \Sys::stdin()->readLine();
		#src/Interpreter.hx:191: characters 9-47
		$num = \Std::parseFloat($input);
		#src/Interpreter.hx:192: characters 9-69
		$final_val = (Boot::equal($num, \Math::$NaN) ? $input : $num);
		#src/Interpreter.hx:193: characters 9-56
		$this->environment->define($stmt->target->name, $final_val);
	}

	/**
	 * @param LetStmt $stmt
	 * 
	 * @return void
	 */
	public function visitLetStmt ($stmt) {
		#src/Interpreter.hx:198: characters 9-34
		$value = null;
		#src/Interpreter.hx:199: lines 199-201
		if ($stmt->value !== null) {
			#src/Interpreter.hx:200: characters 13-42
			$value = $this->visitExpr($stmt->value);
		}
		#src/Interpreter.hx:202: lines 202-204
		$_g = 0;
		$_g1 = $stmt->bindings;
		while ($_g < $_g1->length) {
			#src/Interpreter.hx:202: characters 14-15
			$v = ($_g1->arr[$_g] ?? null);
			#src/Interpreter.hx:202: lines 202-204
			++$_g;
			#src/Interpreter.hx:203: characters 13-46
			$this->environment->define($v->name, $value);
		}
	}

	/**
	 * @param NullExpr $expr
	 * 
	 * @return mixed
	 */
	public function visitNullExpr ($expr) {
		#src/Interpreter.hx:415: characters 9-20
		return null;
	}

	/**
	 * @param NumberExpr $expr
	 * 
	 * @return float
	 */
	public function visitNumberExpr ($expr) {
		#src/Interpreter.hx:378: characters 9-26
		return $expr->value;
	}

	/**
	 * @param PrintStmt $stmt
	 * 
	 * @return void
	 */
	public function visitPrintStmt ($stmt) {
		#src/Interpreter.hx:183: characters 9-50
		$value = $this->visitExpr($stmt->expr);
		#src/Interpreter.hx:185: characters 9-27
		Utils::print($value);
	}

	/**
	 * @param ReturnStmt $stmt
	 * 
	 * @return void
	 */
	public function visitReturnStmt ($stmt) {
		#src/Interpreter.hx:258: characters 9-34
		$value = null;
		#src/Interpreter.hx:259: lines 259-261
		if ($stmt->value !== null) {
			#src/Interpreter.hx:260: characters 13-42
			$value = $this->visitExpr($stmt->value);
		}
		#src/Interpreter.hx:262: characters 9-14
		throw new Return_hx($value);
	}

	/**
	 * @param Stmt $stmt
	 * 
	 * @return void
	 */
	public function visitStmt ($stmt) {
		#src/Interpreter.hx:273: lines 273-295
		if (($stmt instanceof PrintStmt)) {
			#src/Interpreter.hx:274: characters 13-38
			$this->visitPrintStmt($stmt);
		} else if (($stmt instanceof InputStmt)) {
			#src/Interpreter.hx:276: characters 13-38
			$this->visitInputStmt($stmt);
		} else if (($stmt instanceof LetStmt)) {
			#src/Interpreter.hx:278: characters 13-36
			$this->visitLetStmt($stmt);
		} else if (($stmt instanceof IfStmt)) {
			#src/Interpreter.hx:280: characters 13-35
			$this->visitIfStmt($stmt);
		} else if (($stmt instanceof BlockStmt)) {
			#src/Interpreter.hx:282: characters 13-38
			$this->visitBlockStmt($stmt);
		} else if (($stmt instanceof ExprStmt)) {
			#src/Interpreter.hx:284: characters 13-37
			$this->visitExprStmt($stmt);
		} else if (($stmt instanceof WhileStmt)) {
			#src/Interpreter.hx:286: characters 13-38
			$this->visitWhileStmt($stmt);
		} else if (($stmt instanceof ForeachStmt)) {
			#src/Interpreter.hx:288: characters 13-40
			$this->visitForeachStmt($stmt);
		} else if (($stmt instanceof ReturnStmt)) {
			#src/Interpreter.hx:290: characters 13-39
			$this->visitReturnStmt($stmt);
		} else if (($stmt instanceof FunctionStmt)) {
			#src/Interpreter.hx:292: characters 13-41
			$this->visitFunctionStmt($stmt);
		} else {
			#src/Interpreter.hx:294: characters 13-18
			throw Exception::thrown("Unknown statement type: " . \Std::string($stmt));
		}
	}

	/**
	 * @param StringExpr $expr
	 * 
	 * @return string
	 */
	public function visitStringExpr ($expr) {
		#src/Interpreter.hx:389: characters 9-26
		return $expr->value;
	}

	/**
	 * @param UnaryExpr $expr
	 * 
	 * @return mixed
	 */
	public function visitUnaryExpr ($expr) {
		#src/Interpreter.hx:326: characters 9-51
		$right = $this->visitExpr($expr->right);
		#src/Interpreter.hx:327: characters 17-31
		$__hx__switch = ($expr->oper->type->index);
		if ($__hx__switch === 5) {
			#src/Interpreter.hx:329: characters 17-30
			return -$right;
		} else if ($__hx__switch === 21) {
			#src/Interpreter.hx:331: characters 17-30
			return !$right;
		} else {
			#src/Interpreter.hx:333: characters 17-22
			throw Exception::thrown("Unknown unary operator " . ((($expr->oper->value === null ? "null" : \Std::string($expr->oper->value)))??'null') . " at line " . ($expr->oper->line??'null') . ", column " . ($expr->oper->column??'null'));
		}
	}

	/**
	 * @param VariableExpr $expr
	 * 
	 * @return mixed
	 */
	public function visitVariableExpr ($expr) {
		#src/Interpreter.hx:383: characters 9-77
		if ($this->environment->exists($expr->name)) {
			#src/Interpreter.hx:383: characters 44-77
			return $this->environment->get($expr->name);
		}
		#src/Interpreter.hx:384: characters 9-14
		throw Exception::thrown("Undefined variable '" . ($expr->name??'null') . "' at line " . ($expr->line??'null') . ", column " . ($expr->column??'null'));
	}

	/**
	 * @param WhileStmt $stmt
	 * 
	 * @return void
	 */
	public function visitWhileStmt ($stmt) {
		#src/Interpreter.hx:219: characters 9-59
		$condition = $this->visitExpr($stmt->condition);
		#src/Interpreter.hx:220: lines 220-223
		while ($condition) {
			#src/Interpreter.hx:221: characters 13-38
			$this->visitBlockStmt($stmt->body);
			#src/Interpreter.hx:222: characters 13-50
			$condition = $this->visitExpr($stmt->condition);
		}
	}
}

Boot::registerClass(Interpreter::class, 'src.Interpreter');
