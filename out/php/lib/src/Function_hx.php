<?php
/**
 * Generated by Haxe 4.3.7
 */

namespace src;

use \php\Boot;
use \haxe\Exception;
use \src\ast\Stmt;
use \src\ast\Parameter;

class Function_hx {
	/**
	 * @var Stmt
	 */
	public $body;
	/**
	 * @var string
	 */
	public $name;
	/**
	 * @var Parameter[]|\Array_hx
	 */
	public $params;

	/**
	 * @param string $name
	 * @param Parameter[]|\Array_hx $params
	 * @param Stmt $body
	 * 
	 * @return void
	 */
	public function __construct ($name, $params, $body) {
		#src/Interpreter.hx:13: characters 9-25
		$this->name = $name;
		#src/Interpreter.hx:14: characters 9-29
		$this->params = $params;
		#src/Interpreter.hx:15: characters 9-25
		$this->body = $body;
	}

	/**
	 * @param mixed[]|\Array_hx $args
	 * @param Interpreter $interp
	 * 
	 * @return void
	 */
	public function call ($args, $interp) {
		#src/Interpreter.hx:24: characters 9-46
		$previousEnv = $interp->environment;
		#src/Interpreter.hx:25: characters 9-58
		$interp->environment = new Environment($previousEnv);
		#src/Interpreter.hx:26: characters 19-23
		$_g = 0;
		#src/Interpreter.hx:26: characters 23-36
		$_g1 = $this->params->length;
		#src/Interpreter.hx:26: lines 26-39
		while ($_g < $_g1) {
			#src/Interpreter.hx:26: characters 19-36
			$i = $_g++;
			#src/Interpreter.hx:27: characters 13-35
			$param = ($this->params->arr[$i] ?? null);
			#src/Interpreter.hx:28: characters 13-38
			$value = null;
			#src/Interpreter.hx:30: lines 30-36
			if ($i < $args->length) {
				#src/Interpreter.hx:31: characters 17-32
				$value = ($args->arr[$i] ?? null);
			} else if ($param->defaultValue !== null) {
				#src/Interpreter.hx:33: characters 17-61
				$value = $interp->visitExpr($param->defaultValue);
			} else {
				#src/Interpreter.hx:35: characters 17-22
				throw Exception::thrown("Missing argument for parameter '" . ($param->name??'null') . "'");
			}
			#src/Interpreter.hx:38: characters 13-57
			$interp->environment->define($param->name, $value);
		}
		#src/Interpreter.hx:41: characters 9-31
		$interp->visitStmt($this->body);
		#src/Interpreter.hx:43: characters 9-41
		$interp->environment = $previousEnv;
	}

	/**
	 * @return string
	 */
	public function toString () {
		#src/Interpreter.hx:19: characters 9-63
		return "<Function " . ($this->name??'null') . ":" . ($this->params->length??'null') . ">";
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(Function_hx::class, 'src.Function');
