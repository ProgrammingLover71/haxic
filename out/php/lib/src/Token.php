<?php
/**
 * Generated by Haxe 4.3.7
 */

namespace src;

use \php\Boot;

class Token {
	/**
	 * @var int
	 */
	public $column;
	/**
	 * @var int
	 */
	public $line;
	/**
	 * @var TokenType
	 */
	public $type;
	/**
	 * @var mixed
	 */
	public $value;

	/**
	 * @param TokenType $type
	 * @param mixed $value
	 * @param int $line
	 * @param int $column
	 * 
	 * @return void
	 */
	public function __construct ($type, $value, $line, $column) {
		#src/Token.hx:11: characters 9-25
		$this->type = $type;
		#src/Token.hx:12: characters 9-27
		$this->value = $value;
		#src/Token.hx:13: characters 9-25
		$this->line = $line;
		#src/Token.hx:14: characters 9-29
		$this->column = $column;
	}

	/**
	 * @return string
	 */
	public function toString () {
		#src/Token.hx:18: characters 9-180
		return "Token(type:" . \Std::string($this->type) . ", value:'" . ((($this->value === null ? "null" : \Std::string($this->value)))??'null') . "'(" . (\Type::getClassName(\Type::getClass($this->value))??'null') . "), line:" . ($this->line??'null') . ", column:" . ($this->column??'null') . ")";
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(Token::class, 'src.Token');
