<?php
/**
 * Generated by Haxe 4.3.7
 */

namespace src;

use \src\ast\StringExpr;
use \src\ast\NumberExpr;
use \src\ast\VariableExpr;
use \php\Boot;
use \src\ast\BinaryExpr;
use \src\ast\LetStmt;
use \src\ast\IfStmt;
use \src\ast\PrintStmt;
use \src\ast\UnaryExpr;
use \src\ast\InputStmt;
use \src\ast\Stmt;
use \src\ast\BlockStmt;
use \src\ast\ExprStmt;

abstract class ASTWalker {
	/**
	 * @param BinaryExpr $expr
	 * 
	 * @return mixed
	 */
	abstract public function visitBinaryExpr ($expr) ;

	/**
	 * @param BlockStmt $stmt
	 * 
	 * @return void
	 */
	abstract public function visitBlockStmt ($stmt) ;

	/**
	 * @param ExprStmt $stmt
	 * 
	 * @return void
	 */
	abstract public function visitExprStmt ($stmt) ;

	/**
	 * @param IfStmt $stmt
	 * 
	 * @return void
	 */
	abstract public function visitIfStmt ($stmt) ;

	/**
	 * @param InputStmt $stmt
	 * 
	 * @return void
	 */
	abstract public function visitInputStmt ($stmt) ;

	/**
	 * @param LetStmt $stmt
	 * 
	 * @return void
	 */
	abstract public function visitLetStmt ($stmt) ;

	/**
	 * @param NumberExpr $expr
	 * 
	 * @return mixed
	 */
	abstract public function visitNumberExpr ($expr) ;

	/**
	 * @param PrintStmt $stmt
	 * 
	 * @return void
	 */
	abstract public function visitPrintStmt ($stmt) ;

	/**
	 * @param Stmt $stmt
	 * 
	 * @return void
	 */
	abstract public function visitStmt ($stmt) ;

	/**
	 * @param StringExpr $expr
	 * 
	 * @return mixed
	 */
	abstract public function visitStringExpr ($expr) ;

	/**
	 * @param UnaryExpr $expr
	 * 
	 * @return mixed
	 */
	abstract public function visitUnaryExpr ($expr) ;

	/**
	 * @param VariableExpr $expr
	 * 
	 * @return mixed
	 */
	abstract public function visitVariableExpr ($expr) ;
}

Boot::registerClass(ASTWalker::class, 'src.ASTWalker');
