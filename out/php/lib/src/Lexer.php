<?php
/**
 * Generated by Haxe 4.3.7
 */

namespace src;

use \php\Boot;
use \haxe\Exception;
use \php\_Boot\HxString;

class Lexer {
	/**
	 * @var int
	 */
	public $column;
	/**
	 * @var string
	 */
	public $current;
	/**
	 * @var int
	 */
	public $line;
	/**
	 * @var int
	 */
	public $position;
	/**
	 * @var string
	 */
	public $source;

	/**
	 * @param string $source
	 * 
	 * @return void
	 */
	public function __construct ($source) {
		#src/Lexer.hx:5: characters 24-25
		$this->position = 0;
		#src/Lexer.hx:11: characters 9-29
		$this->source = $source;
		#src/Lexer.hx:12: characters 9-27
		$this->position = -1;
		#src/Lexer.hx:13: characters 9-26
		$this->current = "";
		#src/Lexer.hx:14: characters 9-22
		$this->line = 1;
		#src/Lexer.hx:15: characters 9-24
		$this->column = 0;
		#src/Lexer.hx:16: characters 9-18
		$this->advance();
	}

	/**
	 * @return void
	 */
	public function advance () {
		#src/Lexer.hx:20: characters 9-19
		$this->position++;
		#src/Lexer.hx:21: characters 9-17
		$this->column++;
		#src/Lexer.hx:22: lines 22-30
		if ($this->position < mb_strlen($this->source)) {
			#src/Lexer.hx:23: characters 23-46
			$index = $this->position;
			#src/Lexer.hx:23: characters 13-46
			$this->current = ($index < 0 ? "" : \mb_substr($this->source, $index, 1));
			#src/Lexer.hx:24: lines 24-27
			if ($this->current === "\x0A") {
				#src/Lexer.hx:25: characters 17-23
				$this->line++;
				#src/Lexer.hx:26: characters 17-27
				$this->column = 0;
			}
		} else {
			#src/Lexer.hx:29: characters 13-25
			$this->current = "";
		}
	}

	/**
	 * @return bool
	 */
	public function isEof () {
		#src/Lexer.hx:42: characters 9-41
		return $this->position >= mb_strlen($this->source);
	}

	/**
	 * @param string $identifier
	 * 
	 * @return bool
	 */
	public function isKeyword ($identifier) {
		#src/Lexer.hx:163: characters 9-164
		$keywords = \Array_hx::wrap([
			"print",
			"input",
			"let",
			"if",
			"then",
			"else",
			"while",
			"do",
			"end",
			"true",
			"false",
			"inc",
			"dec",
			"func",
			"return",
			"null",
			"for",
			"in",
		]);
		#src/Lexer.hx:164: characters 9-64
		return $keywords->indexOf(\mb_strtolower($identifier)) !== -1;
	}

	/**
	 * @return string
	 */
	public function peek () {
		#src/Lexer.hx:34: lines 34-38
		if ($this->position < mb_strlen($this->source)) {
			#src/Lexer.hx:35: characters 20-43
			$index = $this->position;
			if ($index < 0) {
				return "";
			} else {
				return \mb_substr($this->source, $index, 1);
			}
		} else {
			#src/Lexer.hx:37: characters 13-22
			return "";
		}
	}

	/**
	 * @return void
	 */
	public function skipWhitespace () {
		#src/Lexer.hx:46: lines 46-48
		while (!$this->isEof() && (($this->current === " ") || ($this->current === "\x09") || ($this->current === "\x0A") || ($this->current === "\x0D"))) {
			#src/Lexer.hx:47: characters 13-22
			$this->advance();
		}
	}

	/**
	 * @return Token[]|\Array_hx
	 */
	public function tokenize () {
		#src/Lexer.hx:52: characters 9-38
		$tokens = new \Array_hx();
		#src/Lexer.hx:55: lines 55-158
		while (!$this->isEof()) {
			#src/Lexer.hx:56: characters 13-29
			$this->skipWhitespace();
			#src/Lexer.hx:57: characters 13-31
			if ($this->isEof()) {
				#src/Lexer.hx:57: characters 26-31
				break;
			}
			#src/Lexer.hx:59: characters 21-28
			$__hx__switch = ($this->current);
			if ($__hx__switch === "!") {
				#src/Lexer.hx:114: lines 114-121
				if ($this->peek() === "=") {
					#src/Lexer.hx:115: characters 25-84
					$x = new Token(TokenType::NOTEQ(), "!=", $this->line, $this->column);
					$tokens->arr[$tokens->length++] = $x;
					#src/Lexer.hx:116: characters 25-34
					$this->advance();
					#src/Lexer.hx:117: characters 25-34
					$this->advance();
				} else {
					#src/Lexer.hx:119: characters 25-86
					$x1 = new Token(TokenType::BANG(), $this->current, $this->line, $this->column);
					$tokens->arr[$tokens->length++] = $x1;
					#src/Lexer.hx:120: characters 25-34
					$this->advance();
				}
			} else if ($__hx__switch === "\"") {
				#src/Lexer.hx:127: characters 21-46
				$start = $this->position + 1;
				#src/Lexer.hx:128: characters 21-30
				$this->advance();
				#src/Lexer.hx:129: lines 129-131
				while (!$this->isEof() && ($this->current !== "\"")) {
					#src/Lexer.hx:130: characters 25-34
					$this->advance();
				}
				#src/Lexer.hx:132: characters 21-39
				if ($this->isEof()) {
					#src/Lexer.hx:132: characters 34-39
					throw Exception::thrown("Unterminated string literal at line " . ($this->line??'null') . ", column " . ($this->column??'null'));
				}
				#src/Lexer.hx:133: characters 21-70
				$strValue = HxString::substring($this->source, $start, $this->position);
				#src/Lexer.hx:134: characters 21-110
				$x2 = new Token(TokenType::STRING(), $strValue, $this->line, $this->column - ($this->position - $start + 1));
				$tokens->arr[$tokens->length++] = $x2;
				#src/Lexer.hx:135: characters 21-30
				$this->advance();
			} else if ($__hx__switch === "(") {
				#src/Lexer.hx:73: characters 21-84
				$x3 = new Token(TokenType::LPAREN(), $this->current, $this->line, $this->column);
				$tokens->arr[$tokens->length++] = $x3;
				#src/Lexer.hx:74: characters 21-30
				$this->advance();
			} else if ($__hx__switch === ")") {
				#src/Lexer.hx:76: characters 21-84
				$x4 = new Token(TokenType::RPAREN(), $this->current, $this->line, $this->column);
				$tokens->arr[$tokens->length++] = $x4;
				#src/Lexer.hx:77: characters 21-30
				$this->advance();
			} else if ($__hx__switch === "*") {
				#src/Lexer.hx:67: characters 21-82
				$x5 = new Token(TokenType::STAR(), $this->current, $this->line, $this->column);
				$tokens->arr[$tokens->length++] = $x5;
				#src/Lexer.hx:68: characters 21-30
				$this->advance();
			} else if ($__hx__switch === "+") {
				#src/Lexer.hx:61: characters 21-82
				$x6 = new Token(TokenType::PLUS(), $this->current, $this->line, $this->column);
				$tokens->arr[$tokens->length++] = $x6;
				#src/Lexer.hx:62: characters 21-30
				$this->advance();
			} else if ($__hx__switch === ",") {
				#src/Lexer.hx:123: characters 21-83
				$x7 = new Token(TokenType::COMMA(), $this->current, $this->line, $this->column);
				$tokens->arr[$tokens->length++] = $x7;
				#src/Lexer.hx:124: characters 21-30
				$this->advance();
			} else if ($__hx__switch === "-") {
				#src/Lexer.hx:64: characters 21-83
				$x8 = new Token(TokenType::MINUS(), $this->current, $this->line, $this->column);
				$tokens->arr[$tokens->length++] = $x8;
				#src/Lexer.hx:65: characters 21-30
				$this->advance();
			} else if ($__hx__switch === "/") {
				#src/Lexer.hx:70: characters 21-83
				$x9 = new Token(TokenType::SLASH(), $this->current, $this->line, $this->column);
				$tokens->arr[$tokens->length++] = $x9;
				#src/Lexer.hx:71: characters 21-30
				$this->advance();
			} else if ($__hx__switch === ";") {
				#src/Lexer.hx:85: characters 21-87
				$x10 = new Token(TokenType::SEMICOLON(), $this->current, $this->line, $this->column);
				$tokens->arr[$tokens->length++] = $x10;
				#src/Lexer.hx:86: characters 21-30
				$this->advance();
			} else if ($__hx__switch === "<") {
				#src/Lexer.hx:105: lines 105-112
				if ($this->peek() === "=") {
					#src/Lexer.hx:106: characters 25-83
					$x11 = new Token(TokenType::LTEQ(), "<=", $this->line, $this->column);
					$tokens->arr[$tokens->length++] = $x11;
					#src/Lexer.hx:107: characters 25-34
					$this->advance();
					#src/Lexer.hx:108: characters 25-34
					$this->advance();
				} else {
					#src/Lexer.hx:110: characters 25-84
					$x12 = new Token(TokenType::LT(), $this->current, $this->line, $this->column);
					$tokens->arr[$tokens->length++] = $x12;
					#src/Lexer.hx:111: characters 25-34
					$this->advance();
				}
			} else if ($__hx__switch === "=") {
				#src/Lexer.hx:88: characters 21-30
				$this->advance();
				#src/Lexer.hx:89: lines 89-94
				if ($this->peek() === "=") {
					#src/Lexer.hx:90: characters 25-83
					$x13 = new Token(TokenType::EQEQ(), "==", $this->line, $this->column);
					$tokens->arr[$tokens->length++] = $x13;
					#src/Lexer.hx:91: characters 25-34
					$this->advance();
				} else {
					#src/Lexer.hx:93: characters 25-88
					$x14 = new Token(TokenType::EQUALS(), $this->current, $this->line, $this->column);
					$tokens->arr[$tokens->length++] = $x14;
				}
			} else if ($__hx__switch === ">") {
				#src/Lexer.hx:96: lines 96-103
				if ($this->peek() === "=") {
					#src/Lexer.hx:97: characters 25-83
					$x15 = new Token(TokenType::GTEQ(), ">=", $this->line, $this->column);
					$tokens->arr[$tokens->length++] = $x15;
					#src/Lexer.hx:98: characters 25-34
					$this->advance();
					#src/Lexer.hx:99: characters 25-34
					$this->advance();
				} else {
					#src/Lexer.hx:101: characters 25-84
					$x16 = new Token(TokenType::GT(), $this->current, $this->line, $this->column);
					$tokens->arr[$tokens->length++] = $x16;
					#src/Lexer.hx:102: characters 25-34
					$this->advance();
				}
			} else if ($__hx__switch === "[") {
				#src/Lexer.hx:79: characters 21-84
				$x17 = new Token(TokenType::LBRACK(), $this->current, $this->line, $this->column);
				$tokens->arr[$tokens->length++] = $x17;
				#src/Lexer.hx:80: characters 21-30
				$this->advance();
			} else if ($__hx__switch === "]") {
				#src/Lexer.hx:82: characters 21-84
				$x18 = new Token(TokenType::RBRACK(), $this->current, $this->line, $this->column);
				$tokens->arr[$tokens->length++] = $x18;
				#src/Lexer.hx:83: characters 21-30
				$this->advance();
			} else {
				#src/Lexer.hx:138: lines 138-156
				if ((new \EReg("[a-zA-Z_\$\$]", ""))->match($this->current)) {
					#src/Lexer.hx:139: characters 25-46
					$start1 = $this->position;
					#src/Lexer.hx:140: lines 140-142
					while (!$this->isEof() && (new \EReg("[a-zA-Z0-9_\$\$]", ""))->match($this->current)) {
						#src/Lexer.hx:141: characters 29-38
						$this->advance();
					}
					#src/Lexer.hx:143: characters 25-76
					$identifier = HxString::substring($this->source, $start1, $this->position);
					#src/Lexer.hx:144: characters 25-107
					$type = ($this->isKeyword($identifier) ? TokenType::KEYWORD() : TokenType::IDENTIFIER());
					#src/Lexer.hx:145: characters 25-79
					$x19 = new Token($type, $identifier, $this->line, $this->column);
					$tokens->arr[$tokens->length++] = $x19;
				} else if ((new \EReg("[0-9]", ""))->match($this->current)) {
					#src/Lexer.hx:147: characters 25-46
					$start2 = $this->position;
					#src/Lexer.hx:148: lines 148-150
					while (!$this->isEof() && (new \EReg("[0-9]", ""))->match($this->current)) {
						#src/Lexer.hx:149: characters 29-38
						$this->advance();
					}
					#src/Lexer.hx:151: characters 25-75
					$numberStr = HxString::substring($this->source, $start2, $this->position);
					#src/Lexer.hx:152: characters 25-111
					$x20 = new Token(TokenType::NUMBER(), $numberStr, $this->line, $this->column - ($this->position - $start2));
					$tokens->arr[$tokens->length++] = $x20;
				} else {
					#src/Lexer.hx:155: characters 25-30
					throw Exception::thrown("Unknown character: " . ($this->current??'null') . " at line " . ($this->line??'null') . ", column " . ($this->column??'null'));
				}
			}
		}
		#src/Lexer.hx:159: characters 9-22
		return $tokens;
	}
}

Boot::registerClass(Lexer::class, 'src.Lexer');
