<?php
/**
 * Generated by Haxe 4.3.7
 */

namespace src;

use \php\Boot;
use \haxe\Exception;
use \haxe\ds\StringMap;

class Environment {
	/**
	 * @var Environment
	 */
	public $enclosing;
	/**
	 * @var StringMap
	 */
	public $values;

	/**
	 * @param Environment $enclosing
	 * 
	 * @return void
	 */
	public function __construct ($enclosing = null) {
		#src/Interpreter.hx:96: characters 9-27
		$this->values = new StringMap();
		#src/Interpreter.hx:97: characters 9-35
		$this->enclosing = $enclosing;
	}

	/**
	 * @param string $name
	 * @param mixed $value
	 * 
	 * @return void
	 */
	public function assign ($name, $value) {
		#src/Interpreter.hx:115: lines 115-118
		if (\array_key_exists($name, $this->values->data)) {
			#src/Interpreter.hx:116: characters 13-36
			$this->values->data[$name] = $value;
			#src/Interpreter.hx:117: characters 13-19
			return;
		}
		#src/Interpreter.hx:119: lines 119-122
		if ($this->enclosing !== null) {
			#src/Interpreter.hx:120: characters 13-42
			$this->enclosing->assign($name, $value);
			#src/Interpreter.hx:121: characters 13-19
			return;
		}
		#src/Interpreter.hx:123: characters 9-14
		throw Exception::thrown("Undefined variable '" . ($name??'null') . "'");
	}

	/**
	 * @param string $name
	 * @param mixed $value
	 * 
	 * @return void
	 */
	public function define ($name, $value) {
		#src/Interpreter.hx:101: characters 9-32
		$this->values->data[$name] = $value;
	}

	/**
	 * @param string $name
	 * 
	 * @return bool
	 */
	public function exists ($name) {
		#src/Interpreter.hx:127: lines 127-129
		if (\array_key_exists($name, $this->values->data)) {
			#src/Interpreter.hx:128: characters 13-24
			return true;
		}
		#src/Interpreter.hx:130: lines 130-132
		if ($this->enclosing !== null) {
			#src/Interpreter.hx:131: characters 13-42
			return $this->enclosing->exists($name);
		}
		#src/Interpreter.hx:133: characters 9-21
		return false;
	}

	/**
	 * @param string $name
	 * 
	 * @return mixed
	 */
	public function get ($name) {
		#src/Interpreter.hx:105: lines 105-107
		if (\array_key_exists($name, $this->values->data)) {
			#src/Interpreter.hx:106: characters 20-36
			return ($this->values->data[$name] ?? null);
		}
		#src/Interpreter.hx:108: lines 108-110
		if ($this->enclosing !== null) {
			#src/Interpreter.hx:109: characters 13-39
			return $this->enclosing->get($name);
		}
		#src/Interpreter.hx:111: characters 9-14
		throw Exception::thrown("Undefined variable '" . ($name??'null') . "'");
	}
}

Boot::registerClass(Environment::class, 'src.Environment');
