<?php
/**
 * Generated by Haxe 4.3.7
 */

namespace src;

use \php\Boot;
use \php\_Boot\HxEnum;

class TokenType extends HxEnum {
	/**
	 * @return TokenType
	 */
	static public function BANG () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('BANG', 21, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function COMMA () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('COMMA', 14, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function EQEQ () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('EQEQ', 15, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function EQUALS () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('EQUALS', 13, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function GT () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('GT', 17, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function GTEQ () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('GTEQ', 18, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function IDENTIFIER () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('IDENTIFIER', 0, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function KEYWORD () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('KEYWORD', 1, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function LBRACK () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('LBRACK', 10, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function LPAREN () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('LPAREN', 8, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function LT () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('LT', 19, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function LTEQ () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('LTEQ', 20, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function MINUS () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('MINUS', 5, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function NOTEQ () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('NOTEQ', 16, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function NUMBER () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('NUMBER', 2, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function PLUS () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('PLUS', 4, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function RBRACK () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('RBRACK', 11, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function RPAREN () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('RPAREN', 9, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function SEMICOLON () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('SEMICOLON', 12, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function SLASH () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('SLASH', 7, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function STAR () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('STAR', 6, []);
		return $inst;
	}

	/**
	 * @return TokenType
	 */
	static public function STRING () {
		static $inst = null;
		if (!$inst) $inst = new TokenType('STRING', 3, []);
		return $inst;
	}

	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			21 => 'BANG',
			14 => 'COMMA',
			15 => 'EQEQ',
			13 => 'EQUALS',
			17 => 'GT',
			18 => 'GTEQ',
			0 => 'IDENTIFIER',
			1 => 'KEYWORD',
			10 => 'LBRACK',
			8 => 'LPAREN',
			19 => 'LT',
			20 => 'LTEQ',
			5 => 'MINUS',
			16 => 'NOTEQ',
			2 => 'NUMBER',
			4 => 'PLUS',
			11 => 'RBRACK',
			9 => 'RPAREN',
			12 => 'SEMICOLON',
			7 => 'SLASH',
			6 => 'STAR',
			3 => 'STRING',
		];
	}

	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'BANG' => 0,
			'COMMA' => 0,
			'EQEQ' => 0,
			'EQUALS' => 0,
			'GT' => 0,
			'GTEQ' => 0,
			'IDENTIFIER' => 0,
			'KEYWORD' => 0,
			'LBRACK' => 0,
			'LPAREN' => 0,
			'LT' => 0,
			'LTEQ' => 0,
			'MINUS' => 0,
			'NOTEQ' => 0,
			'NUMBER' => 0,
			'PLUS' => 0,
			'RBRACK' => 0,
			'RPAREN' => 0,
			'SEMICOLON' => 0,
			'SLASH' => 0,
			'STAR' => 0,
			'STRING' => 0,
		];
	}
}

Boot::registerClass(TokenType::class, 'src.TokenType');
