<?php
/**
 * Generated by Haxe 4.3.7
 */

namespace sys\io;

use \php\Boot;
use \haxe\Exception;
use \haxe\io\Eof;
use \haxe\io\Error;
use \haxe\io\Input;

/**
 * Use `sys.io.File.read` to create a `FileInput`.
 */
class FileInput extends Input {
	/**
	 * @var mixed
	 */
	public $__f;

	/**
	 * @param mixed $f
	 * 
	 * @return void
	 */
	public function __construct ($f) {
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/FileInput.hx:37: characters 3-10
		$this->__f = $f;
	}

	/**
	 * @return int
	 */
	public function readByte () {
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/FileInput.hx:41: characters 3-25
		$r = \fread($this->__f, 1);
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/FileInput.hx:42: lines 42-43
		if (\feof($this->__f)) {
			#C:\HaxeToolkit\haxe\std/php/_std/sys/io/FileInput.hx:43: characters 4-9
			throw Exception::thrown(new Eof());
		}
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/FileInput.hx:44: lines 44-45
		if ($r === false) {
			#C:\HaxeToolkit\haxe\std/php/_std/sys/io/FileInput.hx:45: characters 4-9
			throw Exception::thrown(Error::Custom("An error occurred"));
		}
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/FileInput.hx:46: characters 3-16
		return \ord($r);
	}

	/**
	 * @return string
	 */
	public function readLine () {
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/FileInput.hx:95: characters 3-22
		$r = \fgets($this->__f);
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/FileInput.hx:96: lines 96-97
		if (false === $r) {
			#C:\HaxeToolkit\haxe\std/php/_std/sys/io/FileInput.hx:97: characters 4-9
			throw Exception::thrown(new Eof());
		}
		#C:\HaxeToolkit\haxe\std/php/_std/sys/io/FileInput.hx:98: characters 3-26
		return \rtrim($r, "\x0D\x0A");
	}
}

Boot::registerClass(FileInput::class, 'sys.io.FileInput');
