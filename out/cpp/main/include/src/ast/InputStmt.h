// Generated by Haxe 4.3.7
#ifndef INCLUDED_src_ast_InputStmt
#define INCLUDED_src_ast_InputStmt

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_src_ast_Stmt
#include <src/ast/Stmt.h>
#endif
HX_DECLARE_CLASS2(src,ast,Expr)
HX_DECLARE_CLASS2(src,ast,InputStmt)
HX_DECLARE_CLASS2(src,ast,Node)
HX_DECLARE_CLASS2(src,ast,Stmt)
HX_DECLARE_CLASS2(src,ast,VariableExpr)

namespace src{
namespace ast{


class HXCPP_CLASS_ATTRIBUTES InputStmt_obj : public  ::src::ast::Stmt_obj
{
	public:
		typedef  ::src::ast::Stmt_obj super;
		typedef InputStmt_obj OBJ_;
		InputStmt_obj();

	public:
		enum { _hx_ClassId = 0x7a4d6890 };

		void __construct( ::src::ast::VariableExpr target,int line,int column);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="src.ast.InputStmt")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"src.ast.InputStmt"); }
		static ::hx::ObjectPtr< InputStmt_obj > __new( ::src::ast::VariableExpr target,int line,int column);
		static ::hx::ObjectPtr< InputStmt_obj > __alloc(::hx::Ctx *_hx_ctx, ::src::ast::VariableExpr target,int line,int column);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~InputStmt_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("InputStmt",52,8b,59,b5); }

		 ::src::ast::VariableExpr target;
		virtual ::String toString();

};

} // end namespace src
} // end namespace ast

#endif /* INCLUDED_src_ast_InputStmt */ 
