// Generated by Haxe 4.3.7
#ifndef INCLUDED_src_Token
#define INCLUDED_src_Token

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(src,Token)
HX_DECLARE_CLASS1(src,TokenType)

namespace src{


class HXCPP_CLASS_ATTRIBUTES Token_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Token_obj OBJ_;
		Token_obj();

	public:
		enum { _hx_ClassId = 0x0a53aed9 };

		void __construct( ::src::TokenType type, ::Dynamic value,int line,int column);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="src.Token")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"src.Token"); }
		static ::hx::ObjectPtr< Token_obj > __new( ::src::TokenType type, ::Dynamic value,int line,int column);
		static ::hx::ObjectPtr< Token_obj > __alloc(::hx::Ctx *_hx_ctx, ::src::TokenType type, ::Dynamic value,int line,int column);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Token_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Token",d9,f2,58,a7); }

		 ::src::TokenType type;
		 ::Dynamic value;
		int line;
		int column;
		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace src

#endif /* INCLUDED_src_Token */ 
