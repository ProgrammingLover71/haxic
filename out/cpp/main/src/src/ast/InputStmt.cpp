// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_InputStmt
#include <src/ast/InputStmt.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif
#ifndef INCLUDED_src_ast_Stmt
#include <src/ast/Stmt.h>
#endif
#ifndef INCLUDED_src_ast_VariableExpr
#include <src/ast/VariableExpr.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_766f3013cd467ded_8_new,"src.ast.InputStmt","new",0x9f14c30e,"src.ast.InputStmt.new","src/ast/InputStmt.hx",8,0x50e127a4)
HX_LOCAL_STACK_FRAME(_hx_pos_766f3013cd467ded_14_toString,"src.ast.InputStmt","toString",0x1119673e,"src.ast.InputStmt.toString","src/ast/InputStmt.hx",14,0x50e127a4)
namespace src{
namespace ast{

void InputStmt_obj::__construct( ::src::ast::VariableExpr target,int line,int column){
            	HX_STACKFRAME(&_hx_pos_766f3013cd467ded_8_new)
HXLINE(   9)		super::__construct(line,column);
HXLINE(  10)		this->target = target;
            	}

Dynamic InputStmt_obj::__CreateEmpty() { return new InputStmt_obj; }

void *InputStmt_obj::_hx_vtable = 0;

Dynamic InputStmt_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< InputStmt_obj > _hx_result = new InputStmt_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool InputStmt_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24f66a08) {
		if (inClassId<=(int)0x010a45ea) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x010a45ea;
		} else {
			return inClassId==(int)0x24f66a08;
		}
	} else {
		return inClassId==(int)0x7a4d6890;
	}
}

::String InputStmt_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_766f3013cd467ded_14_toString)
HXDLIN(  14)		return ((HX_("Input(",fe,38,82,d0) + this->target->toString()) + HX_(")",29,00,00,00));
            	}



::hx::ObjectPtr< InputStmt_obj > InputStmt_obj::__new( ::src::ast::VariableExpr target,int line,int column) {
	::hx::ObjectPtr< InputStmt_obj > __this = new InputStmt_obj();
	__this->__construct(target,line,column);
	return __this;
}

::hx::ObjectPtr< InputStmt_obj > InputStmt_obj::__alloc(::hx::Ctx *_hx_ctx, ::src::ast::VariableExpr target,int line,int column) {
	InputStmt_obj *__this = (InputStmt_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(InputStmt_obj), true, "src.ast.InputStmt"));
	*(void **)__this = InputStmt_obj::_hx_vtable;
	__this->__construct(target,line,column);
	return __this;
}

InputStmt_obj::InputStmt_obj()
{
}

void InputStmt_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InputStmt);
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_END_CLASS();
}

void InputStmt_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(target,"target");
}

::hx::Val InputStmt_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return ::hx::Val( target ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val InputStmt_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast<  ::src::ast::VariableExpr >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InputStmt_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("target",51,f3,ec,86));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo InputStmt_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::src::ast::VariableExpr */ ,(int)offsetof(InputStmt_obj,target),HX_("target",51,f3,ec,86)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *InputStmt_obj_sStaticStorageInfo = 0;
#endif

static ::String InputStmt_obj_sMemberFields[] = {
	HX_("target",51,f3,ec,86),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class InputStmt_obj::__mClass;

void InputStmt_obj::__register()
{
	InputStmt_obj _hx_dummy;
	InputStmt_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.InputStmt",1c,e4,de,bd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(InputStmt_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< InputStmt_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InputStmt_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InputStmt_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
