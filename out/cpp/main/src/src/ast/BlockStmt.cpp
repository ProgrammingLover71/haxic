// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_BlockStmt
#include <src/ast/BlockStmt.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif
#ifndef INCLUDED_src_ast_Stmt
#include <src/ast/Stmt.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d459eb103954c652_6_new,"src.ast.BlockStmt","new",0xc2baef51,"src.ast.BlockStmt.new","src/ast/BlockStmt.hx",6,0xeade74c1)
HX_LOCAL_STACK_FRAME(_hx_pos_d459eb103954c652_12_toString,"src.ast.BlockStmt","toString",0x717ce81b,"src.ast.BlockStmt.toString","src/ast/BlockStmt.hx",12,0xeade74c1)
namespace src{
namespace ast{

void BlockStmt_obj::__construct(::Array< ::Dynamic> statements,int line,int column){
            	HX_STACKFRAME(&_hx_pos_d459eb103954c652_6_new)
HXLINE(   7)		super::__construct(line,column);
HXLINE(   8)		this->statements = statements;
            	}

Dynamic BlockStmt_obj::__CreateEmpty() { return new BlockStmt_obj; }

void *BlockStmt_obj::_hx_vtable = 0;

Dynamic BlockStmt_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BlockStmt_obj > _hx_result = new BlockStmt_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool BlockStmt_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0a1c6a37) {
		if (inClassId<=(int)0x010a45ea) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x010a45ea;
		} else {
			return inClassId==(int)0x0a1c6a37;
		}
	} else {
		return inClassId==(int)0x24f66a08;
	}
}

::String BlockStmt_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_d459eb103954c652_12_toString)
HXDLIN(  12)		return ((HX_("Block(",5b,a2,7e,dc) + this->statements->join(HX_(", ",74,26,00,00))) + HX_(")",29,00,00,00));
            	}



BlockStmt_obj::BlockStmt_obj()
{
}

void BlockStmt_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BlockStmt);
	HX_MARK_MEMBER_NAME(statements,"statements");
	HX_MARK_END_CLASS();
}

void BlockStmt_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(statements,"statements");
}

::hx::Val BlockStmt_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"statements") ) { return ::hx::Val( statements ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BlockStmt_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"statements") ) { statements=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BlockStmt_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("statements",64,91,7d,e2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BlockStmt_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(BlockStmt_obj,statements),HX_("statements",64,91,7d,e2)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BlockStmt_obj_sStaticStorageInfo = 0;
#endif

static ::String BlockStmt_obj_sMemberFields[] = {
	HX_("statements",64,91,7d,e2),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class BlockStmt_obj::__mClass;

void BlockStmt_obj::__register()
{
	BlockStmt_obj _hx_dummy;
	BlockStmt_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.BlockStmt",df,f2,42,fc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BlockStmt_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BlockStmt_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BlockStmt_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BlockStmt_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
