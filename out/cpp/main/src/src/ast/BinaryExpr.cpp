// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_src_Token
#include <src/Token.h>
#endif
#ifndef INCLUDED_src_ast_BinaryExpr
#include <src/ast/BinaryExpr.h>
#endif
#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ff36208744ca09f2_8_new,"src.ast.BinaryExpr","new",0xcaabdcde,"src.ast.BinaryExpr.new","src/ast/BinaryExpr.hx",8,0xb5d52a90)
HX_LOCAL_STACK_FRAME(_hx_pos_ff36208744ca09f2_16_toString,"src.ast.BinaryExpr","toString",0x9862bb6e,"src.ast.BinaryExpr.toString","src/ast/BinaryExpr.hx",16,0xb5d52a90)
namespace src{
namespace ast{

void BinaryExpr_obj::__construct( ::src::ast::Expr left, ::src::Token oper, ::src::ast::Expr right,int line,int column){
            	HX_STACKFRAME(&_hx_pos_ff36208744ca09f2_8_new)
HXLINE(   9)		super::__construct(line,column);
HXLINE(  10)		this->left = left;
HXLINE(  11)		this->oper = oper;
HXLINE(  12)		this->right = right;
            	}

Dynamic BinaryExpr_obj::__CreateEmpty() { return new BinaryExpr_obj; }

void *BinaryExpr_obj::_hx_vtable = 0;

Dynamic BinaryExpr_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BinaryExpr_obj > _hx_result = new BinaryExpr_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool BinaryExpr_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24f66a08) {
		if (inClassId<=(int)0x1f0a5d3b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1f0a5d3b;
		} else {
			return inClassId==(int)0x24f66a08;
		}
	} else {
		return inClassId==(int)0x583fcb94;
	}
}

::String BinaryExpr_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_ff36208744ca09f2_16_toString)
HXDLIN(  16)		::String _hx_tmp = ((HX_("(",28,00,00,00) + this->left->toString()) + HX_(" ",20,00,00,00));
HXDLIN(  16)		::String _hx_tmp1;
HXDLIN(  16)		if (::hx::IsNull( this->oper->value )) {
HXDLIN(  16)			_hx_tmp1 = HX_("null",87,9e,0e,49);
            		}
            		else {
HXDLIN(  16)			_hx_tmp1 = ::Std_obj::string(this->oper->value);
            		}
HXDLIN(  16)		return ((((_hx_tmp + _hx_tmp1) + HX_(" ",20,00,00,00)) + this->right->toString()) + HX_(")",29,00,00,00));
            	}



::hx::ObjectPtr< BinaryExpr_obj > BinaryExpr_obj::__new( ::src::ast::Expr left, ::src::Token oper, ::src::ast::Expr right,int line,int column) {
	::hx::ObjectPtr< BinaryExpr_obj > __this = new BinaryExpr_obj();
	__this->__construct(left,oper,right,line,column);
	return __this;
}

::hx::ObjectPtr< BinaryExpr_obj > BinaryExpr_obj::__alloc(::hx::Ctx *_hx_ctx, ::src::ast::Expr left, ::src::Token oper, ::src::ast::Expr right,int line,int column) {
	BinaryExpr_obj *__this = (BinaryExpr_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BinaryExpr_obj), true, "src.ast.BinaryExpr"));
	*(void **)__this = BinaryExpr_obj::_hx_vtable;
	__this->__construct(left,oper,right,line,column);
	return __this;
}

BinaryExpr_obj::BinaryExpr_obj()
{
}

void BinaryExpr_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BinaryExpr);
	HX_MARK_MEMBER_NAME(left,"left");
	HX_MARK_MEMBER_NAME(oper,"oper");
	HX_MARK_MEMBER_NAME(right,"right");
	HX_MARK_END_CLASS();
}

void BinaryExpr_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(left,"left");
	HX_VISIT_MEMBER_NAME(oper,"oper");
	HX_VISIT_MEMBER_NAME(right,"right");
}

::hx::Val BinaryExpr_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left ); }
		if (HX_FIELD_EQ(inName,"oper") ) { return ::hx::Val( oper ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return ::hx::Val( right ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BinaryExpr_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast<  ::src::ast::Expr >(); return inValue; }
		if (HX_FIELD_EQ(inName,"oper") ) { oper=inValue.Cast<  ::src::Token >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { right=inValue.Cast<  ::src::ast::Expr >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BinaryExpr_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("oper",ce,03,b4,49));
	outFields->push(HX_("right",dc,0b,64,e9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BinaryExpr_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::src::ast::Expr */ ,(int)offsetof(BinaryExpr_obj,left),HX_("left",07,08,b0,47)},
	{::hx::fsObject /*  ::src::Token */ ,(int)offsetof(BinaryExpr_obj,oper),HX_("oper",ce,03,b4,49)},
	{::hx::fsObject /*  ::src::ast::Expr */ ,(int)offsetof(BinaryExpr_obj,right),HX_("right",dc,0b,64,e9)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BinaryExpr_obj_sStaticStorageInfo = 0;
#endif

static ::String BinaryExpr_obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("oper",ce,03,b4,49),
	HX_("right",dc,0b,64,e9),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class BinaryExpr_obj::__mClass;

void BinaryExpr_obj::__register()
{
	BinaryExpr_obj _hx_dummy;
	BinaryExpr_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.BinaryExpr",ec,d5,d0,47);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BinaryExpr_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BinaryExpr_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BinaryExpr_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BinaryExpr_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
