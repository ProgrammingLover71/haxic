// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_src_Token
#include <src/Token.h>
#endif
#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif
#ifndef INCLUDED_src_ast_UnaryExpr
#include <src/ast/UnaryExpr.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1ecd881745600ec7_7_new,"src.ast.UnaryExpr","new",0xc6c28b20,"src.ast.UnaryExpr.new","src/ast/UnaryExpr.hx",7,0xd2c787d2)
HX_LOCAL_STACK_FRAME(_hx_pos_1ecd881745600ec7_14_toString,"src.ast.UnaryExpr","toString",0x88e31dec,"src.ast.UnaryExpr.toString","src/ast/UnaryExpr.hx",14,0xd2c787d2)
namespace src{
namespace ast{

void UnaryExpr_obj::__construct( ::src::Token oper, ::src::ast::Expr right,int line,int column){
            	HX_STACKFRAME(&_hx_pos_1ecd881745600ec7_7_new)
HXLINE(   8)		super::__construct(line,column);
HXLINE(   9)		this->oper = oper;
HXLINE(  10)		this->right = right;
            	}

Dynamic UnaryExpr_obj::__CreateEmpty() { return new UnaryExpr_obj; }

void *UnaryExpr_obj::_hx_vtable = 0;

Dynamic UnaryExpr_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< UnaryExpr_obj > _hx_result = new UnaryExpr_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool UnaryExpr_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24f66a08) {
		if (inClassId<=(int)0x1f0a5d3b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1f0a5d3b;
		} else {
			return inClassId==(int)0x24f66a08;
		}
	} else {
		return inClassId==(int)0x41224cbe;
	}
}

::String UnaryExpr_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_1ecd881745600ec7_14_toString)
HXDLIN(  14)		::String _hx_tmp;
HXDLIN(  14)		if (::hx::IsNull( this->oper->value )) {
HXDLIN(  14)			_hx_tmp = HX_("null",87,9e,0e,49);
            		}
            		else {
HXDLIN(  14)			_hx_tmp = ::Std_obj::string(this->oper->value);
            		}
HXDLIN(  14)		return ((((HX_("Unary(",b9,17,de,92) + _hx_tmp) + HX_(", ",74,26,00,00)) + this->right->toString()) + HX_(")",29,00,00,00));
            	}



::hx::ObjectPtr< UnaryExpr_obj > UnaryExpr_obj::__new( ::src::Token oper, ::src::ast::Expr right,int line,int column) {
	::hx::ObjectPtr< UnaryExpr_obj > __this = new UnaryExpr_obj();
	__this->__construct(oper,right,line,column);
	return __this;
}

::hx::ObjectPtr< UnaryExpr_obj > UnaryExpr_obj::__alloc(::hx::Ctx *_hx_ctx, ::src::Token oper, ::src::ast::Expr right,int line,int column) {
	UnaryExpr_obj *__this = (UnaryExpr_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(UnaryExpr_obj), true, "src.ast.UnaryExpr"));
	*(void **)__this = UnaryExpr_obj::_hx_vtable;
	__this->__construct(oper,right,line,column);
	return __this;
}

UnaryExpr_obj::UnaryExpr_obj()
{
}

void UnaryExpr_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(UnaryExpr);
	HX_MARK_MEMBER_NAME(oper,"oper");
	HX_MARK_MEMBER_NAME(right,"right");
	HX_MARK_END_CLASS();
}

void UnaryExpr_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(oper,"oper");
	HX_VISIT_MEMBER_NAME(right,"right");
}

::hx::Val UnaryExpr_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"oper") ) { return ::hx::Val( oper ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return ::hx::Val( right ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val UnaryExpr_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"oper") ) { oper=inValue.Cast<  ::src::Token >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { right=inValue.Cast<  ::src::ast::Expr >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void UnaryExpr_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("oper",ce,03,b4,49));
	outFields->push(HX_("right",dc,0b,64,e9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo UnaryExpr_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::src::Token */ ,(int)offsetof(UnaryExpr_obj,oper),HX_("oper",ce,03,b4,49)},
	{::hx::fsObject /*  ::src::ast::Expr */ ,(int)offsetof(UnaryExpr_obj,right),HX_("right",dc,0b,64,e9)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *UnaryExpr_obj_sStaticStorageInfo = 0;
#endif

static ::String UnaryExpr_obj_sMemberFields[] = {
	HX_("oper",ce,03,b4,49),
	HX_("right",dc,0b,64,e9),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class UnaryExpr_obj::__mClass;

void UnaryExpr_obj::__register()
{
	UnaryExpr_obj _hx_dummy;
	UnaryExpr_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.UnaryExpr",2e,bb,1e,d6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(UnaryExpr_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< UnaryExpr_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UnaryExpr_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UnaryExpr_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
