// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_ExprStmt
#include <src/ast/ExprStmt.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif
#ifndef INCLUDED_src_ast_Stmt
#include <src/ast/Stmt.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_21597e337dc380ba_6_new,"src.ast.ExprStmt","new",0x1b08d725,"src.ast.ExprStmt.new","src/ast/ExprStmt.hx",6,0xcd5caaa9)
HX_LOCAL_STACK_FRAME(_hx_pos_21597e337dc380ba_12_toString,"src.ast.ExprStmt","toString",0x16121fc7,"src.ast.ExprStmt.toString","src/ast/ExprStmt.hx",12,0xcd5caaa9)
namespace src{
namespace ast{

void ExprStmt_obj::__construct( ::src::ast::Expr expr,int line,int column){
            	HX_STACKFRAME(&_hx_pos_21597e337dc380ba_6_new)
HXLINE(   7)		super::__construct(line,column);
HXLINE(   8)		this->expr = expr;
            	}

Dynamic ExprStmt_obj::__CreateEmpty() { return new ExprStmt_obj; }

void *ExprStmt_obj::_hx_vtable = 0;

Dynamic ExprStmt_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ExprStmt_obj > _hx_result = new ExprStmt_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ExprStmt_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x11ee1c5b) {
		if (inClassId<=(int)0x010a45ea) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x010a45ea;
		} else {
			return inClassId==(int)0x11ee1c5b;
		}
	} else {
		return inClassId==(int)0x24f66a08;
	}
}

::String ExprStmt_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_21597e337dc380ba_12_toString)
HXDLIN(  12)		return ((HX_("Expr(",33,01,4d,0a) + this->expr->toString()) + HX_(")",29,00,00,00));
            	}



::hx::ObjectPtr< ExprStmt_obj > ExprStmt_obj::__new( ::src::ast::Expr expr,int line,int column) {
	::hx::ObjectPtr< ExprStmt_obj > __this = new ExprStmt_obj();
	__this->__construct(expr,line,column);
	return __this;
}

::hx::ObjectPtr< ExprStmt_obj > ExprStmt_obj::__alloc(::hx::Ctx *_hx_ctx, ::src::ast::Expr expr,int line,int column) {
	ExprStmt_obj *__this = (ExprStmt_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ExprStmt_obj), true, "src.ast.ExprStmt"));
	*(void **)__this = ExprStmt_obj::_hx_vtable;
	__this->__construct(expr,line,column);
	return __this;
}

ExprStmt_obj::ExprStmt_obj()
{
}

void ExprStmt_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ExprStmt);
	HX_MARK_MEMBER_NAME(expr,"expr");
	HX_MARK_END_CLASS();
}

void ExprStmt_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(expr,"expr");
}

::hx::Val ExprStmt_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"expr") ) { return ::hx::Val( expr ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ExprStmt_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"expr") ) { expr=inValue.Cast<  ::src::ast::Expr >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ExprStmt_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("expr",35,fd,1d,43));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ExprStmt_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::src::ast::Expr */ ,(int)offsetof(ExprStmt_obj,expr),HX_("expr",35,fd,1d,43)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ExprStmt_obj_sStaticStorageInfo = 0;
#endif

static ::String ExprStmt_obj_sMemberFields[] = {
	HX_("expr",35,fd,1d,43),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class ExprStmt_obj::__mClass;

void ExprStmt_obj::__register()
{
	ExprStmt_obj _hx_dummy;
	ExprStmt_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.ExprStmt",b3,60,63,06);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ExprStmt_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ExprStmt_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ExprStmt_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ExprStmt_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
