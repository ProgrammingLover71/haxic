// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_LetStmt
#include <src/ast/LetStmt.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif
#ifndef INCLUDED_src_ast_Stmt
#include <src/ast/Stmt.h>
#endif
#ifndef INCLUDED_src_ast_VariableExpr
#include <src/ast/VariableExpr.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_81189bf979546d5c_7_new,"src.ast.LetStmt","new",0xcd23655f,"src.ast.LetStmt.new","src/ast/LetStmt.hx",7,0xa890b5f3)
HX_LOCAL_STACK_FRAME(_hx_pos_81189bf979546d5c_14_toString,"src.ast.LetStmt","toString",0x63a7bf4d,"src.ast.LetStmt.toString","src/ast/LetStmt.hx",14,0xa890b5f3)
namespace src{
namespace ast{

void LetStmt_obj::__construct(::Array< ::Dynamic> bindings, ::src::ast::Expr value,int line,int column){
            	HX_STACKFRAME(&_hx_pos_81189bf979546d5c_7_new)
HXLINE(   8)		super::__construct(line,column);
HXLINE(   9)		this->bindings = bindings;
HXLINE(  10)		this->value = value;
            	}

Dynamic LetStmt_obj::__CreateEmpty() { return new LetStmt_obj; }

void *LetStmt_obj::_hx_vtable = 0;

Dynamic LetStmt_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LetStmt_obj > _hx_result = new LetStmt_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool LetStmt_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24f66a08) {
		if (inClassId<=(int)0x010a45ea) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x010a45ea;
		} else {
			return inClassId==(int)0x24f66a08;
		}
	} else {
		return inClassId==(int)0x7f7092dd;
	}
}

::String LetStmt_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_81189bf979546d5c_14_toString)
HXDLIN(  14)		::String _hx_tmp = ((HX_("LetStmt(",25,97,99,db) + ::Std_obj::string(this->bindings)) + HX_(", ",74,26,00,00));
HXDLIN(  14)		return ((_hx_tmp + ::Std_obj::string(this->value)) + HX_(")",29,00,00,00));
            	}



::hx::ObjectPtr< LetStmt_obj > LetStmt_obj::__new(::Array< ::Dynamic> bindings, ::src::ast::Expr value,int line,int column) {
	::hx::ObjectPtr< LetStmt_obj > __this = new LetStmt_obj();
	__this->__construct(bindings,value,line,column);
	return __this;
}

::hx::ObjectPtr< LetStmt_obj > LetStmt_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< ::Dynamic> bindings, ::src::ast::Expr value,int line,int column) {
	LetStmt_obj *__this = (LetStmt_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LetStmt_obj), true, "src.ast.LetStmt"));
	*(void **)__this = LetStmt_obj::_hx_vtable;
	__this->__construct(bindings,value,line,column);
	return __this;
}

LetStmt_obj::LetStmt_obj()
{
}

void LetStmt_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LetStmt);
	HX_MARK_MEMBER_NAME(bindings,"bindings");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_END_CLASS();
}

void LetStmt_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bindings,"bindings");
	HX_VISIT_MEMBER_NAME(value,"value");
}

::hx::Val LetStmt_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return ::hx::Val( value ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bindings") ) { return ::hx::Val( bindings ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LetStmt_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::src::ast::Expr >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bindings") ) { bindings=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LetStmt_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bindings",8e,51,ac,c8));
	outFields->push(HX_("value",71,7f,b8,31));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LetStmt_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(LetStmt_obj,bindings),HX_("bindings",8e,51,ac,c8)},
	{::hx::fsObject /*  ::src::ast::Expr */ ,(int)offsetof(LetStmt_obj,value),HX_("value",71,7f,b8,31)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LetStmt_obj_sStaticStorageInfo = 0;
#endif

static ::String LetStmt_obj_sMemberFields[] = {
	HX_("bindings",8e,51,ac,c8),
	HX_("value",71,7f,b8,31),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class LetStmt_obj::__mClass;

void LetStmt_obj::__register()
{
	LetStmt_obj _hx_dummy;
	LetStmt_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.LetStmt",ed,c9,57,36);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LetStmt_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LetStmt_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LetStmt_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LetStmt_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
