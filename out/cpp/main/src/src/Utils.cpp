// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_src_Utils
#include <src/Utils.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e6004c8b90a03ef6_7_print,"src.Utils","print",0xd50c8d86,"src.Utils.print","src/Utils.hx",7,0x4f88ad18)
namespace src{

void Utils_obj::__construct() { }

Dynamic Utils_obj::__CreateEmpty() { return new Utils_obj; }

void *Utils_obj::_hx_vtable = 0;

Dynamic Utils_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Utils_obj > _hx_result = new Utils_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Utils_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x61d5cfad;
}

void Utils_obj::print( ::Dynamic value,::hx::Null< bool >  __o_writeNewLine){
            		bool writeNewLine = __o_writeNewLine.Default(true);
            	HX_STACKFRAME(&_hx_pos_e6004c8b90a03ef6_7_print)
HXDLIN(   7)		 ::haxe::io::Output _hx_tmp = ::Sys_obj::_hx_stdout();
HXDLIN(   7)		::String _hx_tmp1 = ::Std_obj::string(value);
HXDLIN(   7)		::String _hx_tmp2;
HXDLIN(   7)		if (writeNewLine) {
HXDLIN(   7)			_hx_tmp2 = HX_("\n",0a,00,00,00);
            		}
            		else {
HXDLIN(   7)			_hx_tmp2 = HX_("",00,00,00,00);
            		}
HXDLIN(   7)		_hx_tmp->write(::haxe::io::Bytes_obj::ofString((_hx_tmp1 + _hx_tmp2),null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Utils_obj,print,(void))


Utils_obj::Utils_obj()
{
}

bool Utils_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"print") ) { outValue = print_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Utils_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Utils_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Utils_obj::__mClass;

static ::String Utils_obj_sStaticFields[] = {
	HX_("print",2d,58,8b,c8),
	::String(null())
};

void Utils_obj::__register()
{
	Utils_obj _hx_dummy;
	Utils_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.Utils",07,9d,2c,f2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Utils_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Utils_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Utils_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Utils_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Utils_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
