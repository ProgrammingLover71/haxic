// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_src_Token
#include <src/Token.h>
#endif
#ifndef INCLUDED_src_TokenType
#include <src/TokenType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c3e8e642ecaeb7a7_10_new,"src.Token","new",0x3c85aa41,"src.Token.new","src/Token.hx",10,0x08058150)
HX_LOCAL_STACK_FRAME(_hx_pos_c3e8e642ecaeb7a7_18_toString,"src.Token","toString",0x9236872b,"src.Token.toString","src/Token.hx",18,0x08058150)
namespace src{

void Token_obj::__construct( ::src::TokenType type, ::Dynamic value,int line,int column){
            	HX_STACKFRAME(&_hx_pos_c3e8e642ecaeb7a7_10_new)
HXLINE(  11)		this->type = type;
HXLINE(  12)		this->value = value;
HXLINE(  13)		this->line = line;
HXLINE(  14)		this->column = column;
            	}

Dynamic Token_obj::__CreateEmpty() { return new Token_obj; }

void *Token_obj::_hx_vtable = 0;

Dynamic Token_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Token_obj > _hx_result = new Token_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Token_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0a53aed9;
}

::String Token_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_c3e8e642ecaeb7a7_18_toString)
HXDLIN(  18)		::String _hx_tmp = ((HX_("Token(type:",b1,fa,5d,5c) + ::Std_obj::string(this->type)) + HX_(", value:'",6a,80,38,d8));
HXDLIN(  18)		::String _hx_tmp1;
HXDLIN(  18)		if (::hx::IsNull( this->value )) {
HXDLIN(  18)			_hx_tmp1 = HX_("null",87,9e,0e,49);
            		}
            		else {
HXDLIN(  18)			_hx_tmp1 = ::Std_obj::string(this->value);
            		}
HXDLIN(  18)		::String _hx_tmp2 = ((((_hx_tmp + _hx_tmp1) + HX_("'(",21,22,00,00)) + ::Type_obj::getClassName(::Type_obj::getClass(this->value))) + HX_("), line:",c9,19,32,8f));
HXDLIN(  18)		return ((((_hx_tmp2 + this->line) + HX_(", column:",b0,fc,25,5b)) + this->column) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Token_obj,toString,return )


::hx::ObjectPtr< Token_obj > Token_obj::__new( ::src::TokenType type, ::Dynamic value,int line,int column) {
	::hx::ObjectPtr< Token_obj > __this = new Token_obj();
	__this->__construct(type,value,line,column);
	return __this;
}

::hx::ObjectPtr< Token_obj > Token_obj::__alloc(::hx::Ctx *_hx_ctx, ::src::TokenType type, ::Dynamic value,int line,int column) {
	Token_obj *__this = (Token_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Token_obj), true, "src.Token"));
	*(void **)__this = Token_obj::_hx_vtable;
	__this->__construct(type,value,line,column);
	return __this;
}

Token_obj::Token_obj()
{
}

void Token_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Token);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(line,"line");
	HX_MARK_MEMBER_NAME(column,"column");
	HX_MARK_END_CLASS();
}

void Token_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(line,"line");
	HX_VISIT_MEMBER_NAME(column,"column");
}

::hx::Val Token_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"line") ) { return ::hx::Val( line ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return ::hx::Val( value ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"column") ) { return ::hx::Val( column ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Token_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::src::TokenType >(); return inValue; }
		if (HX_FIELD_EQ(inName,"line") ) { line=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"column") ) { column=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Token_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("value",71,7f,b8,31));
	outFields->push(HX_("line",f4,17,b3,47));
	outFields->push(HX_("column",d6,4e,8b,c6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Token_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::src::TokenType */ ,(int)offsetof(Token_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Token_obj,value),HX_("value",71,7f,b8,31)},
	{::hx::fsInt,(int)offsetof(Token_obj,line),HX_("line",f4,17,b3,47)},
	{::hx::fsInt,(int)offsetof(Token_obj,column),HX_("column",d6,4e,8b,c6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Token_obj_sStaticStorageInfo = 0;
#endif

static ::String Token_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("value",71,7f,b8,31),
	HX_("line",f4,17,b3,47),
	HX_("column",d6,4e,8b,c6),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class Token_obj::__mClass;

void Token_obj::__register()
{
	Token_obj _hx_dummy;
	Token_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.Token",cf,75,79,5b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Token_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Token_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Token_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Token_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
