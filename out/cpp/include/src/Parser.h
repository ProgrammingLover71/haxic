// Generated by Haxe 4.3.7
#ifndef INCLUDED_src_Parser
#define INCLUDED_src_Parser

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(src,Parser)
HX_DECLARE_CLASS1(src,ScopeState)
HX_DECLARE_CLASS1(src,Token)
HX_DECLARE_CLASS1(src,TokenType)
HX_DECLARE_CLASS2(src,ast,BlockStmt)
HX_DECLARE_CLASS2(src,ast,Expr)
HX_DECLARE_CLASS2(src,ast,ForeachStmt)
HX_DECLARE_CLASS2(src,ast,FunctionStmt)
HX_DECLARE_CLASS2(src,ast,IfStmt)
HX_DECLARE_CLASS2(src,ast,InputStmt)
HX_DECLARE_CLASS2(src,ast,LetStmt)
HX_DECLARE_CLASS2(src,ast,Node)
HX_DECLARE_CLASS2(src,ast,Parameter)
HX_DECLARE_CLASS2(src,ast,PrintStmt)
HX_DECLARE_CLASS2(src,ast,ReturnStmt)
HX_DECLARE_CLASS2(src,ast,Stmt)
HX_DECLARE_CLASS2(src,ast,WhileStmt)

namespace src{


class HXCPP_CLASS_ATTRIBUTES Parser_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Parser_obj OBJ_;
		Parser_obj();

	public:
		enum { _hx_ClassId = 0x4ed243e3 };

		void __construct(::Array< ::Dynamic> tokens);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="src.Parser")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"src.Parser"); }
		static ::hx::ObjectPtr< Parser_obj > __new(::Array< ::Dynamic> tokens);
		static ::hx::ObjectPtr< Parser_obj > __alloc(::hx::Ctx *_hx_ctx,::Array< ::Dynamic> tokens);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Parser_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Parser",ff,10,1d,22); }

		::Array< ::Dynamic> tokens;
		int position;
		::Array< ::Dynamic> scopeStates;
		::Array< ::Dynamic> parse();
		::Dynamic parse_dyn();

		 ::src::ast::PrintStmt parsePrintStatement();
		::Dynamic parsePrintStatement_dyn();

		 ::src::ast::InputStmt parseInputStatement();
		::Dynamic parseInputStatement_dyn();

		 ::src::ast::LetStmt parseLetStatement();
		::Dynamic parseLetStatement_dyn();

		 ::src::ast::WhileStmt parseWhileStatement();
		::Dynamic parseWhileStatement_dyn();

		 ::src::ast::ForeachStmt parseForeachStatement();
		::Dynamic parseForeachStatement_dyn();

		 ::src::ast::IfStmt parseIfStatement();
		::Dynamic parseIfStatement_dyn();

		 ::src::ast::LetStmt parseIncStatement();
		::Dynamic parseIncStatement_dyn();

		 ::src::ast::LetStmt parseDecStatement();
		::Dynamic parseDecStatement_dyn();

		 ::src::ast::ReturnStmt parseReturnStatement();
		::Dynamic parseReturnStatement_dyn();

		 ::src::ast::FunctionStmt parseFunctionStatement();
		::Dynamic parseFunctionStatement_dyn();

		::Array< ::Dynamic> parseParameters();
		::Dynamic parseParameters_dyn();

		 ::src::ast::BlockStmt parseBlockWithTerminators(::Array< ::String > terminators,int line,int column);
		::Dynamic parseBlockWithTerminators_dyn();

		 ::src::ast::Stmt parseStatement();
		::Dynamic parseStatement_dyn();

		 ::src::ast::Expr comparison();
		::Dynamic comparison_dyn();

		 ::src::ast::Expr expr();
		::Dynamic expr_dyn();

		 ::src::ast::Expr term();
		::Dynamic term_dyn();

		 ::src::ast::Expr unary();
		::Dynamic unary_dyn();

		 ::src::ast::Expr call();
		::Dynamic call_dyn();

		 ::src::ast::Expr factor();
		::Dynamic factor_dyn();

		bool match( ::src::TokenType type);
		::Dynamic match_dyn();

		 ::src::Token consume( ::src::TokenType type,::String message);
		::Dynamic consume_dyn();

		bool check( ::src::TokenType type);
		::Dynamic check_dyn();

		 ::src::Token advance();
		::Dynamic advance_dyn();

		bool isAtEnd();
		::Dynamic isAtEnd_dyn();

		 ::src::Token peek();
		::Dynamic peek_dyn();

		 ::src::Token previous();
		::Dynamic previous_dyn();

};

} // end namespace src

#endif /* INCLUDED_src_Parser */ 
