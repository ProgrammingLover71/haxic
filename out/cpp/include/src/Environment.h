// Generated by Haxe 4.3.7
#ifndef INCLUDED_src_Environment
#define INCLUDED_src_Environment

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(src,Environment)

namespace src{


class HXCPP_CLASS_ATTRIBUTES Environment_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Environment_obj OBJ_;
		Environment_obj();

	public:
		enum { _hx_ClassId = 0x3616764f };

		void __construct( ::src::Environment enclosing);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="src.Environment")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"src.Environment"); }
		static ::hx::ObjectPtr< Environment_obj > __new( ::src::Environment enclosing);
		static ::hx::ObjectPtr< Environment_obj > __alloc(::hx::Ctx *_hx_ctx, ::src::Environment enclosing);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Environment_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Environment",b3,a3,82,91); }

		 ::haxe::ds::StringMap values;
		 ::src::Environment enclosing;
		void define(::String name, ::Dynamic value);
		::Dynamic define_dyn();

		 ::Dynamic get(::String name);
		::Dynamic get_dyn();

		void assign(::String name, ::Dynamic value);
		::Dynamic assign_dyn();

		bool exists(::String name);
		::Dynamic exists_dyn();

};

} // end namespace src

#endif /* INCLUDED_src_Environment */ 
