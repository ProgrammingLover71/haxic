// Generated by Haxe 4.3.7
#ifndef INCLUDED_src_ASTWalker
#define INCLUDED_src_ASTWalker

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(src,ASTWalker)
HX_DECLARE_CLASS2(src,ast,ArrayExpr)
HX_DECLARE_CLASS2(src,ast,BinaryExpr)
HX_DECLARE_CLASS2(src,ast,BlockStmt)
HX_DECLARE_CLASS2(src,ast,BooleanExpr)
HX_DECLARE_CLASS2(src,ast,CallExpr)
HX_DECLARE_CLASS2(src,ast,Expr)
HX_DECLARE_CLASS2(src,ast,ExprStmt)
HX_DECLARE_CLASS2(src,ast,FunctionExpr)
HX_DECLARE_CLASS2(src,ast,FunctionStmt)
HX_DECLARE_CLASS2(src,ast,IfStmt)
HX_DECLARE_CLASS2(src,ast,IndexExpr)
HX_DECLARE_CLASS2(src,ast,InputStmt)
HX_DECLARE_CLASS2(src,ast,LetStmt)
HX_DECLARE_CLASS2(src,ast,MapExpr)
HX_DECLARE_CLASS2(src,ast,Node)
HX_DECLARE_CLASS2(src,ast,NullExpr)
HX_DECLARE_CLASS2(src,ast,NumberExpr)
HX_DECLARE_CLASS2(src,ast,PrintStmt)
HX_DECLARE_CLASS2(src,ast,Stmt)
HX_DECLARE_CLASS2(src,ast,StringExpr)
HX_DECLARE_CLASS2(src,ast,UnaryExpr)
HX_DECLARE_CLASS2(src,ast,VariableExpr)
HX_DECLARE_CLASS2(src,types,Value)

namespace src{


class HXCPP_CLASS_ATTRIBUTES ASTWalker_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ASTWalker_obj OBJ_;
		ASTWalker_obj();

	public:
		enum { _hx_ClassId = 0x401b9214 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="src.ASTWalker")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"src.ASTWalker"); }

		//~ASTWalker_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ASTWalker",78,de,50,aa); }

		virtual void visitPrintStmt( ::src::ast::PrintStmt stmt) {}
		::Dynamic visitPrintStmt_dyn();
		virtual void visitInputStmt( ::src::ast::InputStmt stmt) {}
		::Dynamic visitInputStmt_dyn();
		virtual void visitLetStmt( ::src::ast::LetStmt stmt) {}
		::Dynamic visitLetStmt_dyn();
		virtual void visitIfStmt( ::src::ast::IfStmt stmt) {}
		::Dynamic visitIfStmt_dyn();
		virtual void visitStmt( ::src::ast::Stmt stmt) {}
		::Dynamic visitStmt_dyn();
		virtual void visitBlockStmt( ::src::ast::BlockStmt stmt) {}
		::Dynamic visitBlockStmt_dyn();
		virtual void visitExprStmt( ::src::ast::ExprStmt stmt) {}
		::Dynamic visitExprStmt_dyn();
		virtual void visitFunctionStmt( ::src::ast::FunctionStmt stmt) {}
		::Dynamic visitFunctionStmt_dyn();
		virtual  ::src::types::Value visitBinaryExpr( ::src::ast::BinaryExpr expr) { return 0; }
		::Dynamic visitBinaryExpr_dyn();
		virtual  ::src::types::Value visitNumberExpr( ::src::ast::NumberExpr expr) { return 0; }
		::Dynamic visitNumberExpr_dyn();
		virtual  ::src::types::Value visitVariableExpr( ::src::ast::VariableExpr expr) { return 0; }
		::Dynamic visitVariableExpr_dyn();
		virtual  ::src::types::Value visitUnaryExpr( ::src::ast::UnaryExpr expr) { return 0; }
		::Dynamic visitUnaryExpr_dyn();
		virtual  ::src::types::Value visitStringExpr( ::src::ast::StringExpr expr) { return 0; }
		::Dynamic visitStringExpr_dyn();
		virtual  ::Dynamic visitExpr( ::src::ast::Expr expr) { return 0; }
		::Dynamic visitExpr_dyn();
		virtual  ::src::types::Value visitArrayExpr( ::src::ast::ArrayExpr expr) { return 0; }
		::Dynamic visitArrayExpr_dyn();
		virtual  ::src::types::Value visitIndexExpr( ::src::ast::IndexExpr expr) { return 0; }
		::Dynamic visitIndexExpr_dyn();
		virtual  ::src::types::Value visitCallExpr( ::src::ast::CallExpr expr) { return 0; }
		::Dynamic visitCallExpr_dyn();
		virtual  ::src::types::Value visitBooleanExpr( ::src::ast::BooleanExpr expr) { return 0; }
		::Dynamic visitBooleanExpr_dyn();
		virtual  ::src::types::Value visitNullExpr( ::src::ast::NullExpr expr) { return 0; }
		::Dynamic visitNullExpr_dyn();
		virtual  ::src::types::Value visitFunctionExpr( ::src::ast::FunctionExpr expr) { return 0; }
		::Dynamic visitFunctionExpr_dyn();
		virtual  ::src::types::Value visitMapExpr( ::src::ast::MapExpr expr) { return 0; }
		::Dynamic visitMapExpr_dyn();
};

} // end namespace src

#endif /* INCLUDED_src_ASTWalker */ 
