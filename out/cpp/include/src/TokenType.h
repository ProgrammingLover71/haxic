// Generated by Haxe 4.3.7
#ifndef INCLUDED_src_TokenType
#define INCLUDED_src_TokenType

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(src,TokenType)
namespace src{


class TokenType_obj : public ::hx::EnumBase_obj
{
	typedef ::hx::EnumBase_obj super;
		typedef TokenType_obj OBJ_;

	public:
		TokenType_obj() {};
		HX_DO_ENUM_RTTI;
		static void __boot();
		static void __register();
		static bool __GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::String GetEnumName( ) const { return HX_("src.TokenType",29,28,ac,55); }
		::String __ToString() const { return HX_("TokenType.",9b,fa,63,88) + _hx_tag; }

		static ::src::TokenType BANG;
		static inline ::src::TokenType BANG_dyn() { return BANG; }
		static ::src::TokenType COMMA;
		static inline ::src::TokenType COMMA_dyn() { return COMMA; }
		static ::src::TokenType EQEQ;
		static inline ::src::TokenType EQEQ_dyn() { return EQEQ; }
		static ::src::TokenType EQUALS;
		static inline ::src::TokenType EQUALS_dyn() { return EQUALS; }
		static ::src::TokenType GT;
		static inline ::src::TokenType GT_dyn() { return GT; }
		static ::src::TokenType GTEQ;
		static inline ::src::TokenType GTEQ_dyn() { return GTEQ; }
		static ::src::TokenType IDENTIFIER;
		static inline ::src::TokenType IDENTIFIER_dyn() { return IDENTIFIER; }
		static ::src::TokenType KEYWORD;
		static inline ::src::TokenType KEYWORD_dyn() { return KEYWORD; }
		static ::src::TokenType LBRACK;
		static inline ::src::TokenType LBRACK_dyn() { return LBRACK; }
		static ::src::TokenType LPAREN;
		static inline ::src::TokenType LPAREN_dyn() { return LPAREN; }
		static ::src::TokenType LT;
		static inline ::src::TokenType LT_dyn() { return LT; }
		static ::src::TokenType LTEQ;
		static inline ::src::TokenType LTEQ_dyn() { return LTEQ; }
		static ::src::TokenType MINUS;
		static inline ::src::TokenType MINUS_dyn() { return MINUS; }
		static ::src::TokenType NOTEQ;
		static inline ::src::TokenType NOTEQ_dyn() { return NOTEQ; }
		static ::src::TokenType NUMBER;
		static inline ::src::TokenType NUMBER_dyn() { return NUMBER; }
		static ::src::TokenType PLUS;
		static inline ::src::TokenType PLUS_dyn() { return PLUS; }
		static ::src::TokenType RBRACK;
		static inline ::src::TokenType RBRACK_dyn() { return RBRACK; }
		static ::src::TokenType RPAREN;
		static inline ::src::TokenType RPAREN_dyn() { return RPAREN; }
		static ::src::TokenType SEMICOLON;
		static inline ::src::TokenType SEMICOLON_dyn() { return SEMICOLON; }
		static ::src::TokenType SLASH;
		static inline ::src::TokenType SLASH_dyn() { return SLASH; }
		static ::src::TokenType STAR;
		static inline ::src::TokenType STAR_dyn() { return STAR; }
		static ::src::TokenType STRING;
		static inline ::src::TokenType STRING_dyn() { return STRING; }
};

} // end namespace src

#endif /* INCLUDED_src_TokenType */ 
