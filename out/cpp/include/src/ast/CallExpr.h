// Generated by Haxe 4.3.7
#ifndef INCLUDED_src_ast_CallExpr
#define INCLUDED_src_ast_CallExpr

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
HX_DECLARE_STACK_FRAME(_hx_pos_f9bc6d625d1e98a0_7_new)
HX_DECLARE_CLASS2(src,ast,CallExpr)
HX_DECLARE_CLASS2(src,ast,Expr)
HX_DECLARE_CLASS2(src,ast,Node)

namespace src{
namespace ast{


class HXCPP_CLASS_ATTRIBUTES CallExpr_obj : public  ::src::ast::Expr_obj
{
	public:
		typedef  ::src::ast::Expr_obj super;
		typedef CallExpr_obj OBJ_;
		CallExpr_obj();

	public:
		enum { _hx_ClassId = 0x32fcb995 };

		void __construct( ::src::ast::Expr callee,::Array< ::Dynamic> arguments,int line,int column);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="src.ast.CallExpr")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"src.ast.CallExpr"); }

		inline static ::hx::ObjectPtr< CallExpr_obj > __new( ::src::ast::Expr callee,::Array< ::Dynamic> arguments,int line,int column) {
			::hx::ObjectPtr< CallExpr_obj > __this = new CallExpr_obj();
			__this->__construct(callee,arguments,line,column);
			return __this;
		}

		inline static ::hx::ObjectPtr< CallExpr_obj > __alloc(::hx::Ctx *_hx_ctx, ::src::ast::Expr callee,::Array< ::Dynamic> arguments,int line,int column) {
			CallExpr_obj *__this = (CallExpr_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CallExpr_obj), true, "src.ast.CallExpr"));
			*(void **)__this = CallExpr_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_f9bc6d625d1e98a0_7_new)
HXLINE(   8)		__this->super::__construct(line,column);
HXLINE(   9)		( ( ::src::ast::CallExpr)(__this) )->callee = callee;
HXLINE(  10)		( ( ::src::ast::CallExpr)(__this) )->arguments = arguments;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CallExpr_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CallExpr",13,a5,9e,45); }

		 ::src::ast::Expr callee;
		::Array< ::Dynamic> arguments;
		virtual ::String toString();

};

} // end namespace src
} // end namespace ast

#endif /* INCLUDED_src_ast_CallExpr */ 
