// Generated by Haxe 4.3.7
#ifndef INCLUDED_src_ast_Node
#define INCLUDED_src_ast_Node

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(src,ast,Node)

namespace src{
namespace ast{


class HXCPP_CLASS_ATTRIBUTES Node_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Node_obj OBJ_;
		Node_obj();

	public:
		enum { _hx_ClassId = 0x24f66a08 };

		void __construct(int line,int column);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="src.ast.Node")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"src.ast.Node"); }

		//~Node_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Node",22,36,e3,33); }

		int line;
		int column;
		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace src
} // end namespace ast

#endif /* INCLUDED_src_ast_Node */ 
