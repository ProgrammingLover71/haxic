// Generated by Haxe 4.3.7
#ifndef INCLUDED_src_compiler_PyCompiler
#define INCLUDED_src_compiler_PyCompiler

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(src,ast,ArrayExpr)
HX_DECLARE_CLASS2(src,ast,BinaryExpr)
HX_DECLARE_CLASS2(src,ast,BlockStmt)
HX_DECLARE_CLASS2(src,ast,BooleanExpr)
HX_DECLARE_CLASS2(src,ast,CallExpr)
HX_DECLARE_CLASS2(src,ast,Expr)
HX_DECLARE_CLASS2(src,ast,ExprStmt)
HX_DECLARE_CLASS2(src,ast,ForeachStmt)
HX_DECLARE_CLASS2(src,ast,FunctionExpr)
HX_DECLARE_CLASS2(src,ast,FunctionStmt)
HX_DECLARE_CLASS2(src,ast,IfStmt)
HX_DECLARE_CLASS2(src,ast,IndexExpr)
HX_DECLARE_CLASS2(src,ast,InputStmt)
HX_DECLARE_CLASS2(src,ast,LetStmt)
HX_DECLARE_CLASS2(src,ast,MapExpr)
HX_DECLARE_CLASS2(src,ast,Node)
HX_DECLARE_CLASS2(src,ast,NullExpr)
HX_DECLARE_CLASS2(src,ast,NumberExpr)
HX_DECLARE_CLASS2(src,ast,PrintStmt)
HX_DECLARE_CLASS2(src,ast,ReturnStmt)
HX_DECLARE_CLASS2(src,ast,Stmt)
HX_DECLARE_CLASS2(src,ast,StringExpr)
HX_DECLARE_CLASS2(src,ast,UnaryExpr)
HX_DECLARE_CLASS2(src,ast,VariableExpr)
HX_DECLARE_CLASS2(src,ast,WhileStmt)
HX_DECLARE_CLASS2(src,compiler,PyCompiler)

namespace src{
namespace compiler{


class HXCPP_CLASS_ATTRIBUTES PyCompiler_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef PyCompiler_obj OBJ_;
		PyCompiler_obj();

	public:
		enum { _hx_ClassId = 0x62a735e3 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="src.compiler.PyCompiler")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"src.compiler.PyCompiler"); }
		static ::hx::ObjectPtr< PyCompiler_obj > __new();
		static ::hx::ObjectPtr< PyCompiler_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PyCompiler_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PyCompiler",e8,72,e3,22); }

		::String code;
		::String head;
		int indent;
		int lambda_idx;
		::String new_lambda_id();
		::Dynamic new_lambda_id_dyn();

		void writeHeader();
		::Dynamic writeHeader_dyn();

		void writeIndent();
		::Dynamic writeIndent_dyn();

		void write(::String text);
		::Dynamic write_dyn();

		void write_head(::String text);
		::Dynamic write_head_dyn();

		::String getCode();
		::Dynamic getCode_dyn();

		void visit(::Array< ::Dynamic> ast);
		::Dynamic visit_dyn();

		void visitStmt( ::src::ast::Stmt stmt);
		::Dynamic visitStmt_dyn();

		void visitExpr( ::src::ast::Expr expr);
		::Dynamic visitExpr_dyn();

		void visitPrintStmt( ::src::ast::PrintStmt stmt);
		::Dynamic visitPrintStmt_dyn();

		void visitInputStmt( ::src::ast::InputStmt stmt);
		::Dynamic visitInputStmt_dyn();

		void visitLetStmt( ::src::ast::LetStmt stmt);
		::Dynamic visitLetStmt_dyn();

		void visitIfStmt( ::src::ast::IfStmt stmt);
		::Dynamic visitIfStmt_dyn();

		void visitForeachStmt( ::src::ast::ForeachStmt stmt);
		::Dynamic visitForeachStmt_dyn();

		void visitWhileStmt( ::src::ast::WhileStmt stmt);
		::Dynamic visitWhileStmt_dyn();

		void visitBlockStmt( ::src::ast::BlockStmt stmt);
		::Dynamic visitBlockStmt_dyn();

		void visitExprStmt( ::src::ast::ExprStmt stmt);
		::Dynamic visitExprStmt_dyn();

		void visitFunctionStmt( ::src::ast::FunctionStmt stmt);
		::Dynamic visitFunctionStmt_dyn();

		void visitReturnStmt( ::src::ast::ReturnStmt stmt);
		::Dynamic visitReturnStmt_dyn();

		void visitBinaryExpr( ::src::ast::BinaryExpr expr);
		::Dynamic visitBinaryExpr_dyn();

		void visitNumberExpr( ::src::ast::NumberExpr expr);
		::Dynamic visitNumberExpr_dyn();

		void visitVariableExpr( ::src::ast::VariableExpr expr);
		::Dynamic visitVariableExpr_dyn();

		void visitUnaryExpr( ::src::ast::UnaryExpr expr);
		::Dynamic visitUnaryExpr_dyn();

		void visitStringExpr( ::src::ast::StringExpr expr);
		::Dynamic visitStringExpr_dyn();

		void visitArrayExpr( ::src::ast::ArrayExpr expr);
		::Dynamic visitArrayExpr_dyn();

		void visitIndexExpr( ::src::ast::IndexExpr expr);
		::Dynamic visitIndexExpr_dyn();

		void visitCallExpr( ::src::ast::CallExpr expr);
		::Dynamic visitCallExpr_dyn();

		void visitBooleanExpr( ::src::ast::BooleanExpr expr);
		::Dynamic visitBooleanExpr_dyn();

		void visitNullExpr( ::src::ast::NullExpr expr);
		::Dynamic visitNullExpr_dyn();

		void visitFunctionExpr( ::src::ast::FunctionExpr expr);
		::Dynamic visitFunctionExpr_dyn();

		void visitMapExpr( ::src::ast::MapExpr expr);
		::Dynamic visitMapExpr_dyn();

};

} // end namespace src
} // end namespace compiler

#endif /* INCLUDED_src_compiler_PyCompiler */ 
