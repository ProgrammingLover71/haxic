// Generated by Haxe 4.3.7
#ifndef INCLUDED_src_types_V
#define INCLUDED_src_types_V

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(src,types,Function)
HX_DECLARE_CLASS2(src,types,NativeFunction)
HX_DECLARE_CLASS2(src,types,V)
HX_DECLARE_CLASS2(src,types,Value)

namespace src{
namespace types{


class HXCPP_CLASS_ATTRIBUTES V_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef V_obj OBJ_;
		V_obj();

	public:
		enum { _hx_ClassId = 0x78b44aa1 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="src.types.V")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"src.types.V"); }

		inline static ::hx::ObjectPtr< V_obj > __new() {
			::hx::ObjectPtr< V_obj > __this = new V_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< V_obj > __alloc(::hx::Ctx *_hx_ctx) {
			V_obj *__this = (V_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(V_obj), false, "src.types.V"));
			*(void **)__this = V_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~V_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("V",56,00,00,00); }

		static Float toNumber( ::src::types::Value v);
		static ::Dynamic toNumber_dyn();

		static bool isTruthy( ::src::types::Value v);
		static ::Dynamic isTruthy_dyn();

		static ::String toString( ::src::types::Value v);
		static ::Dynamic toString_dyn();

		static ::Array< ::Dynamic> toArray( ::src::types::Value v);
		static ::Dynamic toArray_dyn();

		static  ::haxe::ds::StringMap toMap( ::src::types::Value v);
		static ::Dynamic toMap_dyn();

		static  ::src::types::Function toFunc( ::src::types::Value v);
		static ::Dynamic toFunc_dyn();

		static  ::src::types::NativeFunction toNativeFunc( ::src::types::Value v);
		static ::Dynamic toNativeFunc_dyn();

};

} // end namespace src
} // end namespace types

#endif /* INCLUDED_src_types_V */ 
