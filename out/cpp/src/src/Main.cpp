// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_src_ASTWalker
#include <src/ASTWalker.h>
#endif
#ifndef INCLUDED_src_Interpreter
#include <src/Interpreter.h>
#endif
#ifndef INCLUDED_src_Lexer
#include <src/Lexer.h>
#endif
#ifndef INCLUDED_src_Main
#include <src/Main.h>
#endif
#ifndef INCLUDED_src_Parser
#include <src/Parser.h>
#endif
#ifndef INCLUDED_src_Token
#include <src/Token.h>
#endif
#ifndef INCLUDED_src_Utils
#include <src/Utils.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif
#ifndef INCLUDED_src_ast_Stmt
#include <src/ast/Stmt.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_00c4668d97320537_4_main,"src.Main","main",0xed2a5664,"src.Main.main","src/Main.hx",4,0xa1307a9a)
namespace src{

void Main_obj::__construct() { }

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x39a6fa75;
}

void Main_obj::main(){
            	HX_GC_STACKFRAME(&_hx_pos_00c4668d97320537_4_main)
HXLINE(   6)		if ((::Sys_obj::args()->length > 1)) {
HXLINE(   7)			::src::Utils_obj::print(HX_("Usage: haxic [<file>]",4a,32,40,bd),null());
HXLINE(   8)			return;
            		}
HXLINE(  11)		if ((::Sys_obj::args()->length == 1)) {
HXLINE(  13)			::String filename = ::Sys_obj::args()->__get(0);
HXLINE(  14)			::String content = ::sys::io::File_obj::getContent(filename);
HXLINE(  16)			 ::src::Lexer lexer =  ::src::Lexer_obj::__alloc( HX_CTX ,content);
HXLINE(  17)			::Array< ::Dynamic> tokens = lexer->tokenize();
HXLINE(  18)			 ::src::Parser parser =  ::src::Parser_obj::__alloc( HX_CTX ,tokens);
HXLINE(  19)			::Array< ::Dynamic> ast = parser->parse();
HXLINE(  20)			 ::src::Interpreter interpreter =  ::src::Interpreter_obj::__alloc( HX_CTX );
HXLINE(  21)			interpreter->visit(ast);
HXLINE(  22)			return;
            		}
HXLINE(  26)		 ::src::Interpreter interpreter1 =  ::src::Interpreter_obj::__alloc( HX_CTX );
HXLINE(  27)		while(true){
HXLINE(  29)			::src::Utils_obj::print(HX_("haxic >> ",39,f7,b9,ed),false);
HXLINE(  30)			::Sys_obj::_hx_stdout()->flush();
HXLINE(  31)			::String line = ::Sys_obj::_hx_stdin()->readLine();
HXLINE(  32)			if (::hx::IsNull( line )) {
HXLINE(  32)				continue;
            			}
HXLINE(  34)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  35)				 ::src::Lexer lexer1 =  ::src::Lexer_obj::__alloc( HX_CTX ,line);
HXLINE(  36)				::Array< ::Dynamic> tokens1 = lexer1->tokenize();
HXLINE(  37)				 ::src::Parser parser1 =  ::src::Parser_obj::__alloc( HX_CTX ,tokens1);
HXLINE(  38)				::Array< ::Dynamic> ast1 = parser1->parse();
HXLINE(  39)				interpreter1->visit(ast1);
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE(  40)					 ::haxe::Exception err = ::haxe::Exception_obj::caught(_g);
HXLINE(  41)					::src::Utils_obj::print((HX_("Error: ",4e,a8,5b,b7) + err->get_message()),null());
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))


Main_obj::Main_obj()
{
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.Main",23,f2,2a,7b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
