// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_src_TokenType
#include <src/TokenType.h>
#endif
namespace src{

::src::TokenType TokenType_obj::BANG;

::src::TokenType TokenType_obj::COMMA;

::src::TokenType TokenType_obj::EQEQ;

::src::TokenType TokenType_obj::EQUALS;

::src::TokenType TokenType_obj::GT;

::src::TokenType TokenType_obj::GTEQ;

::src::TokenType TokenType_obj::IDENTIFIER;

::src::TokenType TokenType_obj::KEYWORD;

::src::TokenType TokenType_obj::LPAREN;

::src::TokenType TokenType_obj::LT;

::src::TokenType TokenType_obj::LTEQ;

::src::TokenType TokenType_obj::MINUS;

::src::TokenType TokenType_obj::NOTEQ;

::src::TokenType TokenType_obj::NUMBER;

::src::TokenType TokenType_obj::PLUS;

::src::TokenType TokenType_obj::RPAREN;

::src::TokenType TokenType_obj::SEMICOLON;

::src::TokenType TokenType_obj::SLASH;

::src::TokenType TokenType_obj::STAR;

::src::TokenType TokenType_obj::STRING;

bool TokenType_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("BANG",b8,ab,d1,2b)) { outValue = TokenType_obj::BANG; return true; }
	if (inName==HX_("COMMA",b5,69,4b,c8)) { outValue = TokenType_obj::COMMA; return true; }
	if (inName==HX_("EQEQ",d8,6b,d9,2d)) { outValue = TokenType_obj::EQEQ; return true; }
	if (inName==HX_("EQUALS",3f,9a,75,72)) { outValue = TokenType_obj::EQUALS; return true; }
	if (inName==HX_("GT",2d,3e,00,00)) { outValue = TokenType_obj::GT; return true; }
	if (inName==HX_("GTEQ",d9,1f,2e,2f)) { outValue = TokenType_obj::GTEQ; return true; }
	if (inName==HX_("IDENTIFIER",69,3c,36,c0)) { outValue = TokenType_obj::IDENTIFIER; return true; }
	if (inName==HX_("KEYWORD",c9,1a,d1,3d)) { outValue = TokenType_obj::KEYWORD; return true; }
	if (inName==HX_("LPAREN",1e,28,63,9e)) { outValue = TokenType_obj::LPAREN; return true; }
	if (inName==HX_("LT",88,42,00,00)) { outValue = TokenType_obj::LT; return true; }
	if (inName==HX_("LTEQ",f4,30,7c,32)) { outValue = TokenType_obj::LTEQ; return true; }
	if (inName==HX_("MINUS",50,b8,56,86)) { outValue = TokenType_obj::MINUS; return true; }
	if (inName==HX_("NOTEQ",1f,14,b9,1d)) { outValue = TokenType_obj::NOTEQ; return true; }
	if (inName==HX_("NUMBER",c9,32,fd,53)) { outValue = TokenType_obj::NUMBER; return true; }
	if (inName==HX_("PLUS",5a,07,1b,35)) { outValue = TokenType_obj::PLUS; return true; }
	if (inName==HX_("RPAREN",58,52,87,04)) { outValue = TokenType_obj::RPAREN; return true; }
	if (inName==HX_("SEMICOLON",11,86,2a,49)) { outValue = TokenType_obj::SEMICOLON; return true; }
	if (inName==HX_("SLASH",1d,f8,af,fc)) { outValue = TokenType_obj::SLASH; return true; }
	if (inName==HX_("STAR",d2,ab,1c,37)) { outValue = TokenType_obj::STAR; return true; }
	if (inName==HX_("STRING",d1,d4,b2,c3)) { outValue = TokenType_obj::STRING; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(TokenType_obj)

int TokenType_obj::__FindIndex(::String inName)
{
	if (inName==HX_("BANG",b8,ab,d1,2b)) return 19;
	if (inName==HX_("COMMA",b5,69,4b,c8)) return 12;
	if (inName==HX_("EQEQ",d8,6b,d9,2d)) return 13;
	if (inName==HX_("EQUALS",3f,9a,75,72)) return 11;
	if (inName==HX_("GT",2d,3e,00,00)) return 15;
	if (inName==HX_("GTEQ",d9,1f,2e,2f)) return 16;
	if (inName==HX_("IDENTIFIER",69,3c,36,c0)) return 0;
	if (inName==HX_("KEYWORD",c9,1a,d1,3d)) return 1;
	if (inName==HX_("LPAREN",1e,28,63,9e)) return 8;
	if (inName==HX_("LT",88,42,00,00)) return 17;
	if (inName==HX_("LTEQ",f4,30,7c,32)) return 18;
	if (inName==HX_("MINUS",50,b8,56,86)) return 5;
	if (inName==HX_("NOTEQ",1f,14,b9,1d)) return 14;
	if (inName==HX_("NUMBER",c9,32,fd,53)) return 2;
	if (inName==HX_("PLUS",5a,07,1b,35)) return 4;
	if (inName==HX_("RPAREN",58,52,87,04)) return 9;
	if (inName==HX_("SEMICOLON",11,86,2a,49)) return 10;
	if (inName==HX_("SLASH",1d,f8,af,fc)) return 7;
	if (inName==HX_("STAR",d2,ab,1c,37)) return 6;
	if (inName==HX_("STRING",d1,d4,b2,c3)) return 3;
	return super::__FindIndex(inName);
}

int TokenType_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("BANG",b8,ab,d1,2b)) return 0;
	if (inName==HX_("COMMA",b5,69,4b,c8)) return 0;
	if (inName==HX_("EQEQ",d8,6b,d9,2d)) return 0;
	if (inName==HX_("EQUALS",3f,9a,75,72)) return 0;
	if (inName==HX_("GT",2d,3e,00,00)) return 0;
	if (inName==HX_("GTEQ",d9,1f,2e,2f)) return 0;
	if (inName==HX_("IDENTIFIER",69,3c,36,c0)) return 0;
	if (inName==HX_("KEYWORD",c9,1a,d1,3d)) return 0;
	if (inName==HX_("LPAREN",1e,28,63,9e)) return 0;
	if (inName==HX_("LT",88,42,00,00)) return 0;
	if (inName==HX_("LTEQ",f4,30,7c,32)) return 0;
	if (inName==HX_("MINUS",50,b8,56,86)) return 0;
	if (inName==HX_("NOTEQ",1f,14,b9,1d)) return 0;
	if (inName==HX_("NUMBER",c9,32,fd,53)) return 0;
	if (inName==HX_("PLUS",5a,07,1b,35)) return 0;
	if (inName==HX_("RPAREN",58,52,87,04)) return 0;
	if (inName==HX_("SEMICOLON",11,86,2a,49)) return 0;
	if (inName==HX_("SLASH",1d,f8,af,fc)) return 0;
	if (inName==HX_("STAR",d2,ab,1c,37)) return 0;
	if (inName==HX_("STRING",d1,d4,b2,c3)) return 0;
	return super::__FindArgCount(inName);
}

::hx::Val TokenType_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("BANG",b8,ab,d1,2b)) return BANG;
	if (inName==HX_("COMMA",b5,69,4b,c8)) return COMMA;
	if (inName==HX_("EQEQ",d8,6b,d9,2d)) return EQEQ;
	if (inName==HX_("EQUALS",3f,9a,75,72)) return EQUALS;
	if (inName==HX_("GT",2d,3e,00,00)) return GT;
	if (inName==HX_("GTEQ",d9,1f,2e,2f)) return GTEQ;
	if (inName==HX_("IDENTIFIER",69,3c,36,c0)) return IDENTIFIER;
	if (inName==HX_("KEYWORD",c9,1a,d1,3d)) return KEYWORD;
	if (inName==HX_("LPAREN",1e,28,63,9e)) return LPAREN;
	if (inName==HX_("LT",88,42,00,00)) return LT;
	if (inName==HX_("LTEQ",f4,30,7c,32)) return LTEQ;
	if (inName==HX_("MINUS",50,b8,56,86)) return MINUS;
	if (inName==HX_("NOTEQ",1f,14,b9,1d)) return NOTEQ;
	if (inName==HX_("NUMBER",c9,32,fd,53)) return NUMBER;
	if (inName==HX_("PLUS",5a,07,1b,35)) return PLUS;
	if (inName==HX_("RPAREN",58,52,87,04)) return RPAREN;
	if (inName==HX_("SEMICOLON",11,86,2a,49)) return SEMICOLON;
	if (inName==HX_("SLASH",1d,f8,af,fc)) return SLASH;
	if (inName==HX_("STAR",d2,ab,1c,37)) return STAR;
	if (inName==HX_("STRING",d1,d4,b2,c3)) return STRING;
	return super::__Field(inName,inCallProp);
}

static ::String TokenType_obj_sStaticFields[] = {
	HX_("IDENTIFIER",69,3c,36,c0),
	HX_("KEYWORD",c9,1a,d1,3d),
	HX_("NUMBER",c9,32,fd,53),
	HX_("STRING",d1,d4,b2,c3),
	HX_("PLUS",5a,07,1b,35),
	HX_("MINUS",50,b8,56,86),
	HX_("STAR",d2,ab,1c,37),
	HX_("SLASH",1d,f8,af,fc),
	HX_("LPAREN",1e,28,63,9e),
	HX_("RPAREN",58,52,87,04),
	HX_("SEMICOLON",11,86,2a,49),
	HX_("EQUALS",3f,9a,75,72),
	HX_("COMMA",b5,69,4b,c8),
	HX_("EQEQ",d8,6b,d9,2d),
	HX_("NOTEQ",1f,14,b9,1d),
	HX_("GT",2d,3e,00,00),
	HX_("GTEQ",d9,1f,2e,2f),
	HX_("LT",88,42,00,00),
	HX_("LTEQ",f4,30,7c,32),
	HX_("BANG",b8,ab,d1,2b),
	::String(null())
};

::hx::Class TokenType_obj::__mClass;

Dynamic __Create_TokenType_obj() { return new TokenType_obj; }

void TokenType_obj::__register()
{

::hx::Static(__mClass) = ::hx::_hx_RegisterClass(HX_("src.TokenType",29,28,ac,55), ::hx::TCanCast< TokenType_obj >,TokenType_obj_sStaticFields,0,
	&__Create_TokenType_obj, &__Create,
	&super::__SGetClass(), &CreateTokenType_obj, 0
#ifdef HXCPP_VISIT_ALLOCS
    , 0
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &TokenType_obj::__GetStatic;
}

void TokenType_obj::__boot()
{
BANG = ::hx::CreateConstEnum< TokenType_obj >(HX_("BANG",b8,ab,d1,2b),19);
COMMA = ::hx::CreateConstEnum< TokenType_obj >(HX_("COMMA",b5,69,4b,c8),12);
EQEQ = ::hx::CreateConstEnum< TokenType_obj >(HX_("EQEQ",d8,6b,d9,2d),13);
EQUALS = ::hx::CreateConstEnum< TokenType_obj >(HX_("EQUALS",3f,9a,75,72),11);
GT = ::hx::CreateConstEnum< TokenType_obj >(HX_("GT",2d,3e,00,00),15);
GTEQ = ::hx::CreateConstEnum< TokenType_obj >(HX_("GTEQ",d9,1f,2e,2f),16);
IDENTIFIER = ::hx::CreateConstEnum< TokenType_obj >(HX_("IDENTIFIER",69,3c,36,c0),0);
KEYWORD = ::hx::CreateConstEnum< TokenType_obj >(HX_("KEYWORD",c9,1a,d1,3d),1);
LPAREN = ::hx::CreateConstEnum< TokenType_obj >(HX_("LPAREN",1e,28,63,9e),8);
LT = ::hx::CreateConstEnum< TokenType_obj >(HX_("LT",88,42,00,00),17);
LTEQ = ::hx::CreateConstEnum< TokenType_obj >(HX_("LTEQ",f4,30,7c,32),18);
MINUS = ::hx::CreateConstEnum< TokenType_obj >(HX_("MINUS",50,b8,56,86),5);
NOTEQ = ::hx::CreateConstEnum< TokenType_obj >(HX_("NOTEQ",1f,14,b9,1d),14);
NUMBER = ::hx::CreateConstEnum< TokenType_obj >(HX_("NUMBER",c9,32,fd,53),2);
PLUS = ::hx::CreateConstEnum< TokenType_obj >(HX_("PLUS",5a,07,1b,35),4);
RPAREN = ::hx::CreateConstEnum< TokenType_obj >(HX_("RPAREN",58,52,87,04),9);
SEMICOLON = ::hx::CreateConstEnum< TokenType_obj >(HX_("SEMICOLON",11,86,2a,49),10);
SLASH = ::hx::CreateConstEnum< TokenType_obj >(HX_("SLASH",1d,f8,af,fc),7);
STAR = ::hx::CreateConstEnum< TokenType_obj >(HX_("STAR",d2,ab,1c,37),6);
STRING = ::hx::CreateConstEnum< TokenType_obj >(HX_("STRING",d1,d4,b2,c3),3);
}


} // end namespace src
