// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_src_ASTWalker
#include <src/ASTWalker.h>
#endif
#ifndef INCLUDED_src_ast_BinaryExpr
#include <src/ast/BinaryExpr.h>
#endif
#ifndef INCLUDED_src_ast_BlockStmt
#include <src/ast/BlockStmt.h>
#endif
#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_ExprStmt
#include <src/ast/ExprStmt.h>
#endif
#ifndef INCLUDED_src_ast_IfStmt
#include <src/ast/IfStmt.h>
#endif
#ifndef INCLUDED_src_ast_InputStmt
#include <src/ast/InputStmt.h>
#endif
#ifndef INCLUDED_src_ast_LetStmt
#include <src/ast/LetStmt.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif
#ifndef INCLUDED_src_ast_NumberExpr
#include <src/ast/NumberExpr.h>
#endif
#ifndef INCLUDED_src_ast_PrintStmt
#include <src/ast/PrintStmt.h>
#endif
#ifndef INCLUDED_src_ast_Stmt
#include <src/ast/Stmt.h>
#endif
#ifndef INCLUDED_src_ast_StringExpr
#include <src/ast/StringExpr.h>
#endif
#ifndef INCLUDED_src_ast_UnaryExpr
#include <src/ast/UnaryExpr.h>
#endif
#ifndef INCLUDED_src_ast_VariableExpr
#include <src/ast/VariableExpr.h>
#endif

namespace src{

void ASTWalker_obj::__construct() { }

bool ASTWalker_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x401b9214;
}

HX_DEFINE_DYNAMIC_FUNC1(ASTWalker_obj,visitPrintStmt,(void))

HX_DEFINE_DYNAMIC_FUNC1(ASTWalker_obj,visitInputStmt,(void))

HX_DEFINE_DYNAMIC_FUNC1(ASTWalker_obj,visitLetStmt,(void))

HX_DEFINE_DYNAMIC_FUNC1(ASTWalker_obj,visitIfStmt,(void))

HX_DEFINE_DYNAMIC_FUNC1(ASTWalker_obj,visitStmt,(void))

HX_DEFINE_DYNAMIC_FUNC1(ASTWalker_obj,visitBlockStmt,(void))

HX_DEFINE_DYNAMIC_FUNC1(ASTWalker_obj,visitExprStmt,(void))

HX_DEFINE_DYNAMIC_FUNC1(ASTWalker_obj,visitBinaryExpr,return )

HX_DEFINE_DYNAMIC_FUNC1(ASTWalker_obj,visitNumberExpr,return )

HX_DEFINE_DYNAMIC_FUNC1(ASTWalker_obj,visitVariableExpr,return )

HX_DEFINE_DYNAMIC_FUNC1(ASTWalker_obj,visitUnaryExpr,return )

HX_DEFINE_DYNAMIC_FUNC1(ASTWalker_obj,visitStringExpr,return )


ASTWalker_obj::ASTWalker_obj()
{
}

::hx::Val ASTWalker_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"visitStmt") ) { return ::hx::Val( visitStmt_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"visitIfStmt") ) { return ::hx::Val( visitIfStmt_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"visitLetStmt") ) { return ::hx::Val( visitLetStmt_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visitExprStmt") ) { return ::hx::Val( visitExprStmt_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"visitPrintStmt") ) { return ::hx::Val( visitPrintStmt_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitInputStmt") ) { return ::hx::Val( visitInputStmt_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitBlockStmt") ) { return ::hx::Val( visitBlockStmt_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitUnaryExpr") ) { return ::hx::Val( visitUnaryExpr_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"visitBinaryExpr") ) { return ::hx::Val( visitBinaryExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitNumberExpr") ) { return ::hx::Val( visitNumberExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitStringExpr") ) { return ::hx::Val( visitStringExpr_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"visitVariableExpr") ) { return ::hx::Val( visitVariableExpr_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ASTWalker_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ASTWalker_obj_sStaticStorageInfo = 0;
#endif

static ::String ASTWalker_obj_sMemberFields[] = {
	HX_("visitPrintStmt",ca,e1,f5,4c),
	HX_("visitInputStmt",27,00,28,93),
	HX_("visitLetStmt",38,3d,e5,b6),
	HX_("visitIfStmt",f0,00,0f,77),
	HX_("visitStmt",b3,d5,44,5c),
	HX_("visitBlockStmt",ea,0e,8c,d1),
	HX_("visitExprStmt",08,cf,9a,01),
	HX_("visitBinaryExpr",81,43,80,12),
	HX_("visitNumberExpr",49,12,40,af),
	HX_("visitVariableExpr",fc,d3,8e,9c),
	HX_("visitUnaryExpr",39,d7,67,ab),
	HX_("visitStringExpr",51,58,a3,22),
	::String(null()) };

::hx::Class ASTWalker_obj::__mClass;

void ASTWalker_obj::__register()
{
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ASTWalker",6e,14,6d,aa);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ASTWalker_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ASTWalker_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ASTWalker_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ASTWalker_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
