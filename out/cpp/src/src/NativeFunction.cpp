// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_src_ASTWalker
#include <src/ASTWalker.h>
#endif
#ifndef INCLUDED_src_Environment
#include <src/Environment.h>
#endif
#ifndef INCLUDED_src_Interpreter
#include <src/Interpreter.h>
#endif
#ifndef INCLUDED_src_NativeFunction
#include <src/NativeFunction.h>
#endif
#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif
#ifndef INCLUDED_src_ast_Parameter
#include <src/ast/Parameter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ca7a233150f7473b_54_new,"src.NativeFunction","new",0x0866d3ab,"src.NativeFunction.new","src/Interpreter.hx",54,0xb37cc36f)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a233150f7473b_61_toString,"src.NativeFunction","toString",0x1a54fd81,"src.NativeFunction.toString","src/Interpreter.hx",61,0xb37cc36f)
HX_LOCAL_STACK_FRAME(_hx_pos_ca7a233150f7473b_64_call,"src.NativeFunction","call",0x4a49f6f3,"src.NativeFunction.call","src/Interpreter.hx",64,0xb37cc36f)
namespace src{

void NativeFunction_obj::__construct(::String name,::Array< ::Dynamic> params, ::Dynamic body){
            	HX_STACKFRAME(&_hx_pos_ca7a233150f7473b_54_new)
HXLINE(  55)		this->name = name;
HXLINE(  56)		this->params = params;
HXLINE(  57)		this->body = body;
            	}

Dynamic NativeFunction_obj::__CreateEmpty() { return new NativeFunction_obj; }

void *NativeFunction_obj::_hx_vtable = 0;

Dynamic NativeFunction_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NativeFunction_obj > _hx_result = new NativeFunction_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool NativeFunction_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4c1a77ef;
}

::String NativeFunction_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_ca7a233150f7473b_61_toString)
HXDLIN(  61)		return ((((HX_("<Native function ",9b,66,f5,8a) + this->name) + HX_(":",3a,00,00,00)) + this->params->length) + HX_(">",3e,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeFunction_obj,toString,return )

 ::Dynamic NativeFunction_obj::call(::cpp::VirtualArray args, ::src::Interpreter interp){
            	HX_GC_STACKFRAME(&_hx_pos_ca7a233150f7473b_64_call)
HXLINE(  66)		 ::src::Environment previousEnv = interp->environment;
HXLINE(  67)		interp->environment =  ::src::Environment_obj::__alloc( HX_CTX ,previousEnv);
HXLINE(  68)		{
HXLINE(  68)			int _g = 0;
HXDLIN(  68)			int _g1 = this->params->length;
HXDLIN(  68)			while((_g < _g1)){
HXLINE(  68)				_g = (_g + 1);
HXDLIN(  68)				int i = (_g - 1);
HXLINE(  69)				 ::src::ast::Parameter param = this->params->__get(i).StaticCast<  ::src::ast::Parameter >();
HXLINE(  70)				 ::Dynamic value = null();
HXLINE(  72)				if ((i < args->get_length())) {
HXLINE(  73)					value = args->__get(i);
            				}
            				else {
HXLINE(  74)					if (::hx::IsNotNull( param->defaultValue )) {
HXLINE(  75)						value = interp->visitExpr(param->defaultValue);
            					}
            					else {
HXLINE(  77)						HX_STACK_DO_THROW(((HX_("Missing argument for parameter '",d0,c2,b0,a3) + param->name) + HX_("'",27,00,00,00)));
            					}
            				}
HXLINE(  80)				interp->environment->define(param->name,value);
            			}
            		}
HXLINE(  83)		 ::Dynamic value1 = this->body(interp->environment);
HXLINE(  84)		interp->environment = previousEnv;
HXLINE(  85)		return value1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeFunction_obj,call,return )


::hx::ObjectPtr< NativeFunction_obj > NativeFunction_obj::__new(::String name,::Array< ::Dynamic> params, ::Dynamic body) {
	::hx::ObjectPtr< NativeFunction_obj > __this = new NativeFunction_obj();
	__this->__construct(name,params,body);
	return __this;
}

::hx::ObjectPtr< NativeFunction_obj > NativeFunction_obj::__alloc(::hx::Ctx *_hx_ctx,::String name,::Array< ::Dynamic> params, ::Dynamic body) {
	NativeFunction_obj *__this = (NativeFunction_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NativeFunction_obj), true, "src.NativeFunction"));
	*(void **)__this = NativeFunction_obj::_hx_vtable;
	__this->__construct(name,params,body);
	return __this;
}

NativeFunction_obj::NativeFunction_obj()
{
}

void NativeFunction_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NativeFunction);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(params,"params");
	HX_MARK_MEMBER_NAME(body,"body");
	HX_MARK_END_CLASS();
}

void NativeFunction_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(params,"params");
	HX_VISIT_MEMBER_NAME(body,"body");
}

::hx::Val NativeFunction_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"body") ) { return ::hx::Val( body ); }
		if (HX_FIELD_EQ(inName,"call") ) { return ::hx::Val( call_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { return ::hx::Val( params ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val NativeFunction_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"body") ) { body=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { params=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NativeFunction_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("params",46,fb,7a,ed));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo NativeFunction_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(NativeFunction_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(NativeFunction_obj,params),HX_("params",46,fb,7a,ed)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(NativeFunction_obj,body),HX_("body",a2,7a,1b,41)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *NativeFunction_obj_sStaticStorageInfo = 0;
#endif

static ::String NativeFunction_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("params",46,fb,7a,ed),
	HX_("body",a2,7a,1b,41),
	HX_("toString",ac,d0,6e,38),
	HX_("call",9e,18,ba,41),
	::String(null()) };

::hx::Class NativeFunction_obj::__mClass;

void NativeFunction_obj::__register()
{
	NativeFunction_obj _hx_dummy;
	NativeFunction_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.NativeFunction",39,22,9b,8e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NativeFunction_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NativeFunction_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NativeFunction_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NativeFunction_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
