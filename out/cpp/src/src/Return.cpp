// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_src_Return
#include <src/Return.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7f416f67976c9bce_98_new,"src.Return","new",0xdf55630c,"src.Return.new","src/Interpreter.hx",98,0xb37cc36f)
namespace src{

void Return_obj::__construct( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_7f416f67976c9bce_98_new)
HXLINE(  99)		super::__construct(HX_("Return",d0,18,c2,3d),null(),null());
HXLINE( 100)		this->value = value;
            	}

Dynamic Return_obj::__CreateEmpty() { return new Return_obj; }

void *Return_obj::_hx_vtable = 0;

Dynamic Return_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Return_obj > _hx_result = new Return_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Return_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x677ddc49) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x677ddc49;
	} else {
		return inClassId==(int)0x6a774bb4;
	}
}


Return_obj::Return_obj()
{
}

void Return_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Return);
	HX_MARK_MEMBER_NAME(value,"value");
	 ::haxe::Exception_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Return_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(value,"value");
	 ::haxe::Exception_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Return_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return ::hx::Val( value ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Return_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Return_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("value",71,7f,b8,31));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Return_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Return_obj,value),HX_("value",71,7f,b8,31)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Return_obj_sStaticStorageInfo = 0;
#endif

static ::String Return_obj_sMemberFields[] = {
	HX_("value",71,7f,b8,31),
	::String(null()) };

::hx::Class Return_obj::__mClass;

void Return_obj::__register()
{
	Return_obj _hx_dummy;
	Return_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.Return",1a,2d,14,26);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Return_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Return_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Return_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Return_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
