// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_src_ast_Parameter
#include <src/ast/Parameter.h>
#endif
#ifndef INCLUDED_src_types_Function
#include <src/types/Function.h>
#endif
#ifndef INCLUDED_src_types_NativeFunction
#include <src/types/NativeFunction.h>
#endif
#ifndef INCLUDED_src_types_V
#include <src/types/V.h>
#endif
#ifndef INCLUDED_src_types_Value
#include <src/types/Value.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_25f1330b2f2b39cc_7_toNumber,"src.types.V","toNumber",0x3b190c5b,"src.types.V.toNumber","src/types/V.hx",7,0x212f8549)
HX_LOCAL_STACK_FRAME(_hx_pos_25f1330b2f2b39cc_17_isTruthy,"src.types.V","isTruthy",0x1d8bccef,"src.types.V.isTruthy","src/types/V.hx",17,0x212f8549)
HX_LOCAL_STACK_FRAME(_hx_pos_25f1330b2f2b39cc_29_toString,"src.types.V","toString",0xaaceae63,"src.types.V.toString","src/types/V.hx",29,0x212f8549)
HX_LOCAL_STACK_FRAME(_hx_pos_25f1330b2f2b39cc_48_toArray,"src.types.V","toArray",0x66894047,"src.types.V.toArray","src/types/V.hx",48,0x212f8549)
HX_LOCAL_STACK_FRAME(_hx_pos_25f1330b2f2b39cc_55_toMap,"src.types.V","toMap",0x870935ca,"src.types.V.toMap","src/types/V.hx",55,0x212f8549)
HX_LOCAL_STACK_FRAME(_hx_pos_25f1330b2f2b39cc_62_toFunc,"src.types.V","toFunc",0x9c748856,"src.types.V.toFunc","src/types/V.hx",62,0x212f8549)
HX_LOCAL_STACK_FRAME(_hx_pos_25f1330b2f2b39cc_69_toNativeFunc,"src.types.V","toNativeFunc",0x271aaf0d,"src.types.V.toNativeFunc","src/types/V.hx",69,0x212f8549)
namespace src{
namespace types{

void V_obj::__construct() { }

Dynamic V_obj::__CreateEmpty() { return new V_obj; }

void *V_obj::_hx_vtable = 0;

Dynamic V_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< V_obj > _hx_result = new V_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool V_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x78b44aa1;
}

Float V_obj::toNumber( ::src::types::Value v){
            	HX_STACKFRAME(&_hx_pos_25f1330b2f2b39cc_7_toNumber)
HXDLIN(   7)		switch((int)(v->_hx_getIndex())){
            			case (int)0: {
HXLINE(   8)				return v->_hx_getFloat(0);
            			}
            			break;
            			case (int)1: {
HXLINE(   9)				if (v->_hx_getBool(0)) {
HXLINE(   9)					return ((Float)1.0);
            				}
            				else {
HXLINE(   9)					return ((Float)0.0);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE(  11)				return ((Float)0.0);
            			}
            			break;
            			case (int)3: {
HXLINE(  10)				return ::Std_obj::parseFloat(v->_hx_getString(0));
            			}
            			break;
            			default:{
HXLINE(  12)				HX_STACK_DO_THROW((HX_("Cannot convert to number: ",ca,9d,5e,a6) + ::Std_obj::string(v)));
            			}
            		}
HXLINE(   7)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(V_obj,toNumber,return )

bool V_obj::isTruthy( ::src::types::Value v){
            	HX_STACKFRAME(&_hx_pos_25f1330b2f2b39cc_17_isTruthy)
HXDLIN(  17)		switch((int)(v->_hx_getIndex())){
            			case (int)0: {
HXLINE(  20)				return (v->_hx_getFloat(0) != 0);
            			}
            			break;
            			case (int)1: {
HXLINE(  19)				return v->_hx_getBool(0);
            			}
            			break;
            			case (int)2: {
HXLINE(  18)				return false;
            			}
            			break;
            			case (int)3: {
HXLINE(  21)				return (v->_hx_getString(0).length > 0);
            			}
            			break;
            			case (int)4: {
HXLINE(  22)				return (v->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >()->length > 0);
            			}
            			break;
            			case (int)5: {
HXLINE(  23)				return ( (bool)(v->_hx_getObject(0).StaticCast<  ::haxe::ds::StringMap >()->keys()->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) );
            			}
            			break;
            			default:{
HXLINE(  24)				return true;
            			}
            		}
HXLINE(  17)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(V_obj,isTruthy,return )

::String V_obj::toString( ::src::types::Value v){
            	HX_STACKFRAME(&_hx_pos_25f1330b2f2b39cc_29_toString)
HXDLIN(  29)		switch((int)(v->_hx_getIndex())){
            			case (int)0: {
HXLINE(  30)				return ::Std_obj::string(v->_hx_getFloat(0));
            			}
            			break;
            			case (int)1: {
HXLINE(  31)				if (v->_hx_getBool(0)) {
HXLINE(  31)					return HX_("true",4e,a7,03,4d);
            				}
            				else {
HXLINE(  31)					return HX_("false",a3,35,4f,fb);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE(  33)				return HX_("null",87,9e,0e,49);
            			}
            			break;
            			case (int)3: {
HXLINE(  32)				return v->_hx_getString(0);
            			}
            			break;
            			case (int)4: {
HXLINE(  34)				::Array< ::Dynamic> _g = v->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE(  35)				::Array< ::String > parts = ::Array_obj< ::String >::__new(0);
HXLINE(  36)				{
HXLINE(  36)					int _g1 = 0;
HXDLIN(  36)					while((_g1 < _g->length)){
HXLINE(  36)						 ::src::types::Value x = _g->__get(_g1).StaticCast<  ::src::types::Value >();
HXDLIN(  36)						_g1 = (_g1 + 1);
HXDLIN(  36)						parts->push(::src::types::V_obj::toString(x));
            					}
            				}
HXLINE(  37)				return ((HX_("[",5b,00,00,00) + parts->join(HX_(", ",74,26,00,00))) + HX_("]",5d,00,00,00));
            			}
            			break;
            			case (int)5: {
HXLINE(  38)				 ::haxe::ds::StringMap _g2 = v->_hx_getObject(0).StaticCast<  ::haxe::ds::StringMap >();
HXLINE(  39)				::Array< ::String > parts1 = ::Array_obj< ::String >::__new(0);
HXLINE(  40)				{
HXLINE(  40)					 ::Dynamic k = _g2->keys();
HXDLIN(  40)					while(( (bool)(k->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  40)						::String k1 = ( (::String)(k->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  40)						parts1->push(((k1 + HX_(" => ",7f,53,55,15)) + ::src::types::V_obj::toString(_g2->get(k1))));
            					}
            				}
HXLINE(  41)				return ((HX_("{",7b,00,00,00) + parts1->join(HX_(", ",74,26,00,00))) + HX_("}",7d,00,00,00));
            			}
            			break;
            			case (int)6: {
HXLINE(  42)				 ::src::types::Function _g3 = v->_hx_getObject(0).StaticCast<  ::src::types::Function >();
HXDLIN(  42)				return ((((HX_("<Function ",2c,02,4a,67) + _g3->name) + HX_(":",3a,00,00,00)) + _g3->params->length) + HX_(">",3e,00,00,00));
            			}
            			break;
            			case (int)7: {
HXLINE(  43)				 ::src::types::NativeFunction _g4 = v->_hx_getObject(0).StaticCast<  ::src::types::NativeFunction >();
HXDLIN(  43)				return ((((HX_("<Native function ",9b,66,f5,8a) + _g4->name) + HX_(":",3a,00,00,00)) + _g4->params->length) + HX_(">",3e,00,00,00));
            			}
            			break;
            		}
HXLINE(  29)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(V_obj,toString,return )

::Array< ::Dynamic> V_obj::toArray( ::src::types::Value v){
            	HX_STACKFRAME(&_hx_pos_25f1330b2f2b39cc_48_toArray)
HXDLIN(  48)		if ((v->_hx_getIndex() == 4)) {
HXLINE(  49)			return v->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
            		}
            		else {
HXLINE(  50)			HX_STACK_DO_THROW((HX_("Cannot convert to array: ",c4,d4,db,84) + ::Std_obj::string(v)));
            		}
HXLINE(  48)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(V_obj,toArray,return )

 ::haxe::ds::StringMap V_obj::toMap( ::src::types::Value v){
            	HX_STACKFRAME(&_hx_pos_25f1330b2f2b39cc_55_toMap)
HXDLIN(  55)		if ((v->_hx_getIndex() == 5)) {
HXLINE(  56)			return v->_hx_getObject(0).StaticCast<  ::haxe::ds::StringMap >();
            		}
            		else {
HXLINE(  57)			HX_STACK_DO_THROW((HX_("Cannot convert to map: ",47,ed,e8,ac) + ::Std_obj::string(v)));
            		}
HXLINE(  55)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(V_obj,toMap,return )

 ::src::types::Function V_obj::toFunc( ::src::types::Value v){
            	HX_STACKFRAME(&_hx_pos_25f1330b2f2b39cc_62_toFunc)
HXDLIN(  62)		if ((v->_hx_getIndex() == 6)) {
HXLINE(  63)			return v->_hx_getObject(0).StaticCast<  ::src::types::Function >();
            		}
            		else {
HXLINE(  64)			HX_STACK_DO_THROW((HX_("Cannot convert to map: ",47,ed,e8,ac) + ::Std_obj::string(v)));
            		}
HXLINE(  62)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(V_obj,toFunc,return )

 ::src::types::NativeFunction V_obj::toNativeFunc( ::src::types::Value v){
            	HX_STACKFRAME(&_hx_pos_25f1330b2f2b39cc_69_toNativeFunc)
HXDLIN(  69)		if ((v->_hx_getIndex() == 7)) {
HXLINE(  70)			return v->_hx_getObject(0).StaticCast<  ::src::types::NativeFunction >();
            		}
            		else {
HXLINE(  71)			HX_STACK_DO_THROW((HX_("Cannot convert to map: ",47,ed,e8,ac) + ::Std_obj::string(v)));
            		}
HXLINE(  69)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(V_obj,toNativeFunc,return )


V_obj::V_obj()
{
}

bool V_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"toMap") ) { outValue = toMap_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"toFunc") ) { outValue = toFunc_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"toArray") ) { outValue = toArray_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toNumber") ) { outValue = toNumber_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isTruthy") ) { outValue = isTruthy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"toNativeFunc") ) { outValue = toNativeFunc_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *V_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *V_obj_sStaticStorageInfo = 0;
#endif

::hx::Class V_obj::__mClass;

static ::String V_obj_sStaticFields[] = {
	HX_("toNumber",a4,2e,b9,c8),
	HX_("isTruthy",38,ef,2b,ab),
	HX_("toString",ac,d0,6e,38),
	HX_("toArray",1e,ba,13,f2),
	HX_("toMap",e1,bb,14,14),
	HX_("toFunc",5f,56,7e,79),
	HX_("toNativeFunc",d6,29,b4,ac),
	::String(null())
};

void V_obj::__register()
{
	V_obj _hx_dummy;
	V_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.types.V",97,15,63,58);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &V_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(V_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< V_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = V_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = V_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace types
