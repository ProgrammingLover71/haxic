// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_src_ASTWalker
#include <src/ASTWalker.h>
#endif
#ifndef INCLUDED_src_Environment
#include <src/Environment.h>
#endif
#ifndef INCLUDED_src_Interpreter
#include <src/Interpreter.h>
#endif
#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif
#ifndef INCLUDED_src_ast_Parameter
#include <src/ast/Parameter.h>
#endif
#ifndef INCLUDED_src_ast_Stmt
#include <src/ast/Stmt.h>
#endif
#ifndef INCLUDED_src_types_Function
#include <src/types/Function.h>
#endif
#ifndef INCLUDED_src_types_Value
#include <src/types/Value.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5964856d202acecd_12_new,"src.types.Function","new",0x5505e489,"src.types.Function.new","src/types/Function.hx",12,0x04291b85)
HX_LOCAL_STACK_FRAME(_hx_pos_5964856d202acecd_19_toString,"src.types.Function","toString",0x265607e3,"src.types.Function.toString","src/types/Function.hx",19,0x04291b85)
HX_LOCAL_STACK_FRAME(_hx_pos_5964856d202acecd_22_call,"src.types.Function","call",0x08d9a855,"src.types.Function.call","src/types/Function.hx",22,0x04291b85)
namespace src{
namespace types{

void Function_obj::__construct(::String name,::Array< ::Dynamic> params, ::src::ast::Stmt body){
            	HX_STACKFRAME(&_hx_pos_5964856d202acecd_12_new)
HXLINE(  13)		this->name = name;
HXLINE(  14)		this->params = params;
HXLINE(  15)		this->body = body;
            	}

Dynamic Function_obj::__CreateEmpty() { return new Function_obj; }

void *Function_obj::_hx_vtable = 0;

Dynamic Function_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Function_obj > _hx_result = new Function_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Function_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0a94cc4d;
}

::String Function_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_5964856d202acecd_19_toString)
HXDLIN(  19)		return ((((HX_("<Function ",2c,02,4a,67) + this->name) + HX_(":",3a,00,00,00)) + this->params->length) + HX_(">",3e,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Function_obj,toString,return )

void Function_obj::call(::cpp::VirtualArray args, ::src::Interpreter interp){
            	HX_GC_STACKFRAME(&_hx_pos_5964856d202acecd_22_call)
HXLINE(  24)		 ::src::Environment previousEnv = interp->environment;
HXLINE(  25)		interp->environment =  ::src::Environment_obj::__alloc( HX_CTX ,previousEnv);
HXLINE(  26)		{
HXLINE(  26)			int _g = 0;
HXDLIN(  26)			int _g1 = this->params->length;
HXDLIN(  26)			while((_g < _g1)){
HXLINE(  26)				_g = (_g + 1);
HXDLIN(  26)				int i = (_g - 1);
HXLINE(  27)				 ::src::ast::Parameter param = this->params->__get(i).StaticCast<  ::src::ast::Parameter >();
HXLINE(  28)				 ::Dynamic value = null();
HXLINE(  30)				if ((i < args->get_length())) {
HXLINE(  31)					value = args->__get(i);
            				}
            				else {
HXLINE(  32)					if (::hx::IsNotNull( param->defaultValue )) {
HXLINE(  33)						value = interp->visitExpr(param->defaultValue).StaticCast<  ::src::types::Value >();
            					}
            					else {
HXLINE(  35)						HX_STACK_DO_THROW(((HX_("Missing argument for parameter '",d0,c2,b0,a3) + param->name) + HX_("'",27,00,00,00)));
            					}
            				}
HXLINE(  38)				interp->environment->define(param->name,value);
            			}
            		}
HXLINE(  41)		interp->visitStmt(this->body);
HXLINE(  43)		interp->environment = previousEnv;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Function_obj,call,(void))


::hx::ObjectPtr< Function_obj > Function_obj::__new(::String name,::Array< ::Dynamic> params, ::src::ast::Stmt body) {
	::hx::ObjectPtr< Function_obj > __this = new Function_obj();
	__this->__construct(name,params,body);
	return __this;
}

::hx::ObjectPtr< Function_obj > Function_obj::__alloc(::hx::Ctx *_hx_ctx,::String name,::Array< ::Dynamic> params, ::src::ast::Stmt body) {
	Function_obj *__this = (Function_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Function_obj), true, "src.types.Function"));
	*(void **)__this = Function_obj::_hx_vtable;
	__this->__construct(name,params,body);
	return __this;
}

Function_obj::Function_obj()
{
}

void Function_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Function);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(params,"params");
	HX_MARK_MEMBER_NAME(body,"body");
	HX_MARK_END_CLASS();
}

void Function_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(params,"params");
	HX_VISIT_MEMBER_NAME(body,"body");
}

::hx::Val Function_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"body") ) { return ::hx::Val( body ); }
		if (HX_FIELD_EQ(inName,"call") ) { return ::hx::Val( call_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { return ::hx::Val( params ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Function_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"body") ) { body=inValue.Cast<  ::src::ast::Stmt >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { params=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Function_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("params",46,fb,7a,ed));
	outFields->push(HX_("body",a2,7a,1b,41));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Function_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Function_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Function_obj,params),HX_("params",46,fb,7a,ed)},
	{::hx::fsObject /*  ::src::ast::Stmt */ ,(int)offsetof(Function_obj,body),HX_("body",a2,7a,1b,41)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Function_obj_sStaticStorageInfo = 0;
#endif

static ::String Function_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("params",46,fb,7a,ed),
	HX_("body",a2,7a,1b,41),
	HX_("toString",ac,d0,6e,38),
	HX_("call",9e,18,ba,41),
	::String(null()) };

::hx::Class Function_obj::__mClass;

void Function_obj::__register()
{
	Function_obj _hx_dummy;
	Function_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.types.Function",17,ec,2c,61);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Function_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Function_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Function_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Function_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace types
