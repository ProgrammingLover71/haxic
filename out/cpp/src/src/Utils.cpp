// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_src_Utils
#include <src/Utils.h>
#endif
#ifndef INCLUDED_src_types_Function
#include <src/types/Function.h>
#endif
#ifndef INCLUDED_src_types_NativeFunction
#include <src/types/NativeFunction.h>
#endif
#ifndef INCLUDED_src_types_Value
#include <src/types/Value.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e6004c8b90a03ef6_8_print,"src.Utils","print",0xd50c8d86,"src.Utils.print","src/Utils.hx",8,0x4f88ad18)
HX_LOCAL_STACK_FRAME(_hx_pos_e6004c8b90a03ef6_12_stringify,"src.Utils","stringify",0x2437cba4,"src.Utils.stringify","src/Utils.hx",12,0x4f88ad18)
namespace src{

void Utils_obj::__construct() { }

Dynamic Utils_obj::__CreateEmpty() { return new Utils_obj; }

void *Utils_obj::_hx_vtable = 0;

Dynamic Utils_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Utils_obj > _hx_result = new Utils_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Utils_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x61d5cfad;
}

void Utils_obj::print(::String value,::hx::Null< bool >  __o_writeNewLine){
            		bool writeNewLine = __o_writeNewLine.Default(true);
            	HX_STACKFRAME(&_hx_pos_e6004c8b90a03ef6_8_print)
HXDLIN(   8)		 ::haxe::io::Output _hx_tmp = ::Sys_obj::_hx_stdout();
HXDLIN(   8)		::String _hx_tmp1;
HXDLIN(   8)		if (writeNewLine) {
HXDLIN(   8)			_hx_tmp1 = HX_("\n",0a,00,00,00);
            		}
            		else {
HXDLIN(   8)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN(   8)		_hx_tmp->write(::haxe::io::Bytes_obj::ofString((value + _hx_tmp1),null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Utils_obj,print,(void))

::String Utils_obj::stringify( ::src::types::Value value){
            	HX_STACKFRAME(&_hx_pos_e6004c8b90a03ef6_12_stringify)
HXDLIN(  12)		switch((int)(value->_hx_getIndex())){
            			case (int)0: {
HXLINE(  15)				return ::Std_obj::string(value->_hx_getFloat(0));
            			}
            			break;
            			case (int)1: {
HXLINE(  16)				return ::Std_obj::string(value->_hx_getBool(0));
            			}
            			break;
            			case (int)2: {
HXLINE(  13)				return HX_("null",87,9e,0e,49);
            			}
            			break;
            			case (int)3: {
HXLINE(  14)				return value->_hx_getString(0);
            			}
            			break;
            			case (int)4: {
HXLINE(  17)				::Array< ::Dynamic> _g = value->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  17)				 ::Dynamic f = ::src::Utils_obj::stringify_dyn();
HXDLIN(  17)				::Array< ::String > result = ::Array_obj< ::String >::__new(_g->length);
HXDLIN(  17)				{
HXLINE(  17)					int _g1 = 0;
HXDLIN(  17)					int _g2 = _g->length;
HXDLIN(  17)					while((_g1 < _g2)){
HXLINE(  17)						_g1 = (_g1 + 1);
HXDLIN(  17)						int i = (_g1 - 1);
HXDLIN(  17)						{
HXLINE(  17)							::String inValue = ( (::String)(f(_hx_array_unsafe_get(_g,i))) );
HXDLIN(  17)							result->__unsafe_set(i,inValue);
            						}
            					}
            				}
HXDLIN(  17)				return ((HX_("[",5b,00,00,00) + result->join(HX_(", ",74,26,00,00))) + HX_("]",5d,00,00,00));
            			}
            			break;
            			case (int)5: {
HXLINE(  18)				 ::haxe::ds::StringMap _g3 = value->_hx_getObject(0).StaticCast<  ::haxe::ds::StringMap >();
HXLINE(  19)				::Array< ::String > items = ::Array_obj< ::String >::__new(0);
HXLINE(  20)				{
HXLINE(  20)					 ::Dynamic key = _g3->keys();
HXDLIN(  20)					while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  20)						::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  21)						items->push(((key1 + HX_(" => ",7f,53,55,15)) + ::src::Utils_obj::stringify(_g3->get(key1))));
            					}
            				}
HXLINE(  23)				return ((HX_("{",7b,00,00,00) + items->join(HX_(", ",74,26,00,00))) + HX_("}",7d,00,00,00));
            			}
            			break;
            			case (int)6: {
HXLINE(  24)				return ::Std_obj::string(value->_hx_getObject(0).StaticCast<  ::src::types::Function >());
            			}
            			break;
            			case (int)7: {
HXLINE(  25)				return ::Std_obj::string(value->_hx_getObject(0).StaticCast<  ::src::types::NativeFunction >());
            			}
            			break;
            		}
HXLINE(  12)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Utils_obj,stringify,return )


Utils_obj::Utils_obj()
{
}

bool Utils_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"print") ) { outValue = print_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"stringify") ) { outValue = stringify_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Utils_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Utils_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Utils_obj::__mClass;

static ::String Utils_obj_sStaticFields[] = {
	HX_("print",2d,58,8b,c8),
	HX_("stringify",cb,75,ce,c7),
	::String(null())
};

void Utils_obj::__register()
{
	Utils_obj _hx_dummy;
	Utils_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.Utils",07,9d,2c,f2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Utils_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Utils_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Utils_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Utils_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Utils_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
