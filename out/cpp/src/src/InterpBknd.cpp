// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_src_ASTWalker
#include <src/ASTWalker.h>
#endif
#ifndef INCLUDED_src_InterpBknd
#include <src/InterpBknd.h>
#endif
#ifndef INCLUDED_src_Token
#include <src/Token.h>
#endif
#ifndef INCLUDED_src_TokenType
#include <src/TokenType.h>
#endif
#ifndef INCLUDED_src_Utils
#include <src/Utils.h>
#endif
#ifndef INCLUDED_src_ast_BinaryExpr
#include <src/ast/BinaryExpr.h>
#endif
#ifndef INCLUDED_src_ast_BlockStmt
#include <src/ast/BlockStmt.h>
#endif
#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_ExprStmt
#include <src/ast/ExprStmt.h>
#endif
#ifndef INCLUDED_src_ast_IfStmt
#include <src/ast/IfStmt.h>
#endif
#ifndef INCLUDED_src_ast_InputStmt
#include <src/ast/InputStmt.h>
#endif
#ifndef INCLUDED_src_ast_LetStmt
#include <src/ast/LetStmt.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif
#ifndef INCLUDED_src_ast_NumberExpr
#include <src/ast/NumberExpr.h>
#endif
#ifndef INCLUDED_src_ast_PrintStmt
#include <src/ast/PrintStmt.h>
#endif
#ifndef INCLUDED_src_ast_Stmt
#include <src/ast/Stmt.h>
#endif
#ifndef INCLUDED_src_ast_StringExpr
#include <src/ast/StringExpr.h>
#endif
#ifndef INCLUDED_src_ast_UnaryExpr
#include <src/ast/UnaryExpr.h>
#endif
#ifndef INCLUDED_src_ast_VariableExpr
#include <src/ast/VariableExpr.h>
#endif
#ifndef INCLUDED_src_ast_WhileStmt
#include <src/ast/WhileStmt.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_817db7afda60fcc6_8_new,"src.InterpBknd","new",0x383fd30f,"src.InterpBknd.new","src/InterpBknd.hx",8,0x5704d6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_817db7afda60fcc6_17_visit,"src.InterpBknd","visit",0x43fcc63a,"src.InterpBknd.visit","src/InterpBknd.hx",17,0x5704d6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_817db7afda60fcc6_22_visitPrintStmt,"src.InterpBknd","visitPrintStmt",0xf5410f7b,"src.InterpBknd.visitPrintStmt","src/InterpBknd.hx",22,0x5704d6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_817db7afda60fcc6_28_visitInputStmt,"src.InterpBknd","visitInputStmt",0x3b732dd8,"src.InterpBknd.visitInputStmt","src/InterpBknd.hx",28,0x5704d6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_817db7afda60fcc6_35_visitLetStmt,"src.InterpBknd","visitLetStmt",0x2950eca9,"src.InterpBknd.visitLetStmt","src/InterpBknd.hx",35,0x5704d6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_817db7afda60fcc6_45_visitIfStmt,"src.InterpBknd","visitIfStmt",0x90d3ca9f,"src.InterpBknd.visitIfStmt","src/InterpBknd.hx",45,0x5704d6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_817db7afda60fcc6_54_visitWhileStmt,"src.InterpBknd","visitWhileStmt",0x0e290cff,"src.InterpBknd.visitWhileStmt","src/InterpBknd.hx",54,0x5704d6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_817db7afda60fcc6_63_visitBlockStmt,"src.InterpBknd","visitBlockStmt",0x79d73c9b,"src.InterpBknd.visitBlockStmt","src/InterpBknd.hx",63,0x5704d6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_817db7afda60fcc6_69_visitExprStmt,"src.InterpBknd","visitExprStmt",0xad68a277,"src.InterpBknd.visitExprStmt","src/InterpBknd.hx",69,0x5704d6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_817db7afda60fcc6_73_visitStmt,"src.InterpBknd","visitStmt",0xe54a85a2,"src.InterpBknd.visitStmt","src/InterpBknd.hx",73,0x5704d6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_817db7afda60fcc6_93_visitExpr,"src.InterpBknd","visitExpr",0xdc0c948f,"src.InterpBknd.visitExpr","src/InterpBknd.hx",93,0x5704d6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_817db7afda60fcc6_108_visitUnaryExpr,"src.InterpBknd","visitUnaryExpr",0x53b304ea,"src.InterpBknd.visitUnaryExpr","src/InterpBknd.hx",108,0x5704d6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_817db7afda60fcc6_120_visitBinaryExpr,"src.InterpBknd","visitBinaryExpr",0xabfd10b0,"src.InterpBknd.visitBinaryExpr","src/InterpBknd.hx",120,0x5704d6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_817db7afda60fcc6_152_visitNumberExpr,"src.InterpBknd","visitNumberExpr",0x48bcdf78,"src.InterpBknd.visitNumberExpr","src/InterpBknd.hx",152,0x5704d6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_817db7afda60fcc6_155_visitVariableExpr,"src.InterpBknd","visitVariableExpr",0x28bc8aeb,"src.InterpBknd.visitVariableExpr","src/InterpBknd.hx",155,0x5704d6a0)
HX_LOCAL_STACK_FRAME(_hx_pos_817db7afda60fcc6_161_visitStringExpr,"src.InterpBknd","visitStringExpr",0xbc202580,"src.InterpBknd.visitStringExpr","src/InterpBknd.hx",161,0x5704d6a0)
namespace src{

void InterpBknd_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_817db7afda60fcc6_8_new)
HXLINE(   9)		this->environment =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  10)		this->environment->set(HX_("pi",f9,61,00,00),::Math_obj::PI);
HXLINE(  11)		this->environment->set(HX_("e",65,00,00,00),::Math_obj::exp(( (Float)(1) )));
HXLINE(  12)		this->environment->set(HX_("inf",e1,0c,50,00),::Math_obj::POSITIVE_INFINITY);
HXLINE(  13)		this->environment->set(HX_("nan",db,cc,53,00),::Math_obj::NaN);
            	}

Dynamic InterpBknd_obj::__CreateEmpty() { return new InterpBknd_obj; }

void *InterpBknd_obj::_hx_vtable = 0;

Dynamic InterpBknd_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< InterpBknd_obj > _hx_result = new InterpBknd_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool InterpBknd_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x11fb008b) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x11fb008b;
	} else {
		return inClassId==(int)0x401b9214;
	}
}

void InterpBknd_obj::visit(::Array< ::Dynamic> ast){
            	HX_STACKFRAME(&_hx_pos_817db7afda60fcc6_17_visit)
HXDLIN(  17)		int _g = 0;
HXDLIN(  17)		while((_g < ast->length)){
HXDLIN(  17)			 ::src::ast::Stmt stmt = ast->__get(_g).StaticCast<  ::src::ast::Stmt >();
HXDLIN(  17)			_g = (_g + 1);
HXLINE(  18)			if (::hx::IsNotNull( stmt )) {
HXLINE(  18)				this->visitStmt(stmt);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(InterpBknd_obj,visit,(void))

void InterpBknd_obj::visitPrintStmt( ::src::ast::PrintStmt stmt){
            	HX_STACKFRAME(&_hx_pos_817db7afda60fcc6_22_visitPrintStmt)
HXLINE(  23)		 ::Dynamic value = this->visitExpr(stmt->expr);
HXLINE(  25)		::src::Utils_obj::print(value,null());
            	}


void InterpBknd_obj::visitInputStmt( ::src::ast::InputStmt stmt){
            	HX_STACKFRAME(&_hx_pos_817db7afda60fcc6_28_visitInputStmt)
HXLINE(  29)		::String input = ::Sys_obj::_hx_stdin()->readLine();
HXLINE(  30)		Float num = ::Std_obj::parseFloat(input);
HXLINE(  31)		 ::Dynamic final_val;
HXDLIN(  31)		if ((num == ::Math_obj::NaN)) {
HXLINE(  31)			final_val = input;
            		}
            		else {
HXLINE(  31)			final_val = num;
            		}
HXLINE(  32)		this->environment->set(stmt->target->name,final_val);
            	}


void InterpBknd_obj::visitLetStmt( ::src::ast::LetStmt stmt){
            	HX_STACKFRAME(&_hx_pos_817db7afda60fcc6_35_visitLetStmt)
HXLINE(  36)		 ::Dynamic value = null();
HXLINE(  37)		if (::hx::IsNotNull( stmt->value )) {
HXLINE(  38)			value = this->visitExpr(stmt->value);
            		}
HXLINE(  40)		{
HXLINE(  40)			int _g = 0;
HXDLIN(  40)			::Array< ::Dynamic> _g1 = stmt->bindings;
HXDLIN(  40)			while((_g < _g1->length)){
HXLINE(  40)				 ::src::ast::VariableExpr v = _g1->__get(_g).StaticCast<  ::src::ast::VariableExpr >();
HXDLIN(  40)				_g = (_g + 1);
HXLINE(  41)				this->environment->set(v->name,value);
            			}
            		}
            	}


void InterpBknd_obj::visitIfStmt( ::src::ast::IfStmt stmt){
            	HX_STACKFRAME(&_hx_pos_817db7afda60fcc6_45_visitIfStmt)
HXLINE(  46)		 ::Dynamic condition = this->visitExpr(stmt->condition);
HXLINE(  47)		if (( (bool)(condition) )) {
HXLINE(  48)			this->visitBlockStmt(stmt->thenBranch);
            		}
            		else {
HXLINE(  49)			if (::hx::IsNotNull( stmt->elseBranch )) {
HXLINE(  50)				this->visitBlockStmt(stmt->elseBranch);
            			}
            		}
            	}


void InterpBknd_obj::visitWhileStmt( ::src::ast::WhileStmt stmt){
            	HX_STACKFRAME(&_hx_pos_817db7afda60fcc6_54_visitWhileStmt)
HXLINE(  55)		 ::Dynamic condition = this->visitExpr(stmt->condition);
HXLINE(  56)		while(( (bool)(condition) )){
HXLINE(  57)			this->visitBlockStmt(stmt->body);
HXLINE(  58)			condition = this->visitExpr(stmt->condition);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(InterpBknd_obj,visitWhileStmt,(void))

void InterpBknd_obj::visitBlockStmt( ::src::ast::BlockStmt stmt){
            	HX_STACKFRAME(&_hx_pos_817db7afda60fcc6_63_visitBlockStmt)
HXDLIN(  63)		int _g = 0;
HXDLIN(  63)		::Array< ::Dynamic> _g1 = stmt->statements;
HXDLIN(  63)		while((_g < _g1->length)){
HXDLIN(  63)			 ::src::ast::Stmt s = _g1->__get(_g).StaticCast<  ::src::ast::Stmt >();
HXDLIN(  63)			_g = (_g + 1);
HXLINE(  64)			this->visitStmt(s);
            		}
            	}


void InterpBknd_obj::visitExprStmt( ::src::ast::ExprStmt stmt){
            	HX_STACKFRAME(&_hx_pos_817db7afda60fcc6_69_visitExprStmt)
HXDLIN(  69)		this->visitExpr(stmt->expr);
            	}


void InterpBknd_obj::visitStmt( ::src::ast::Stmt stmt){
            	HX_STACKFRAME(&_hx_pos_817db7afda60fcc6_73_visitStmt)
HXDLIN(  73)		if (::Std_obj::isOfType(stmt,::hx::ClassOf< ::src::ast::PrintStmt >())) {
HXLINE(  74)			this->visitPrintStmt(( ( ::src::ast::PrintStmt)(stmt) ));
            		}
            		else {
HXLINE(  75)			if (::Std_obj::isOfType(stmt,::hx::ClassOf< ::src::ast::InputStmt >())) {
HXLINE(  76)				this->visitInputStmt(( ( ::src::ast::InputStmt)(stmt) ));
            			}
            			else {
HXLINE(  77)				if (::Std_obj::isOfType(stmt,::hx::ClassOf< ::src::ast::LetStmt >())) {
HXLINE(  78)					this->visitLetStmt(( ( ::src::ast::LetStmt)(stmt) ));
            				}
            				else {
HXLINE(  79)					if (::Std_obj::isOfType(stmt,::hx::ClassOf< ::src::ast::IfStmt >())) {
HXLINE(  80)						this->visitIfStmt(( ( ::src::ast::IfStmt)(stmt) ));
            					}
            					else {
HXLINE(  81)						if (::Std_obj::isOfType(stmt,::hx::ClassOf< ::src::ast::BlockStmt >())) {
HXLINE(  82)							this->visitBlockStmt(( ( ::src::ast::BlockStmt)(stmt) ));
            						}
            						else {
HXLINE(  83)							if (::Std_obj::isOfType(stmt,::hx::ClassOf< ::src::ast::ExprStmt >())) {
HXLINE(  84)								this->visitExprStmt(( ( ::src::ast::ExprStmt)(stmt) ));
            							}
            							else {
HXLINE(  85)								if (::Std_obj::isOfType(stmt,::hx::ClassOf< ::src::ast::WhileStmt >())) {
HXLINE(  86)									this->visitWhileStmt(( ( ::src::ast::WhileStmt)(stmt) ));
            								}
            								else {
HXLINE(  88)									HX_STACK_DO_THROW((HX_("Unknown statement type: ",27,79,2e,4f) + ::Std_obj::string(stmt)));
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


 ::Dynamic InterpBknd_obj::visitExpr( ::src::ast::Expr expr){
            	HX_STACKFRAME(&_hx_pos_817db7afda60fcc6_93_visitExpr)
HXDLIN(  93)		if (::Std_obj::isOfType(expr,::hx::ClassOf< ::src::ast::BinaryExpr >())) {
HXLINE(  94)			return this->visitBinaryExpr(( ( ::src::ast::BinaryExpr)(expr) ));
            		}
            		else {
HXLINE(  95)			if (::Std_obj::isOfType(expr,::hx::ClassOf< ::src::ast::NumberExpr >())) {
HXLINE(  96)				return this->visitNumberExpr(( ( ::src::ast::NumberExpr)(expr) ));
            			}
            			else {
HXLINE(  97)				if (::Std_obj::isOfType(expr,::hx::ClassOf< ::src::ast::VariableExpr >())) {
HXLINE(  98)					return this->visitVariableExpr(( ( ::src::ast::VariableExpr)(expr) ));
            				}
            				else {
HXLINE(  99)					if (::Std_obj::isOfType(expr,::hx::ClassOf< ::src::ast::UnaryExpr >())) {
HXLINE( 100)						return this->visitUnaryExpr(( ( ::src::ast::UnaryExpr)(expr) ));
            					}
            					else {
HXLINE( 101)						if (::Std_obj::isOfType(expr,::hx::ClassOf< ::src::ast::StringExpr >())) {
HXLINE( 102)							return this->visitStringExpr(( ( ::src::ast::StringExpr)(expr) ));
            						}
            						else {
HXLINE( 104)							HX_STACK_DO_THROW((HX_("Unknown expression type: ",32,bb,51,d7) + ::Std_obj::string(expr)));
            						}
            					}
            				}
            			}
            		}
HXLINE(  93)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(InterpBknd_obj,visitExpr,return )

 ::Dynamic InterpBknd_obj::visitUnaryExpr( ::src::ast::UnaryExpr expr){
            	HX_STACKFRAME(&_hx_pos_817db7afda60fcc6_108_visitUnaryExpr)
HXLINE( 109)		 ::Dynamic right = this->visitExpr(expr->right);
HXLINE( 110)		switch((int)(expr->oper->type->_hx_getIndex())){
            			case (int)5: {
HXLINE( 112)				return -(right);
            			}
            			break;
            			case (int)19: {
HXLINE( 114)				return !(( (bool)(right) ));
            			}
            			break;
            			default:{
HXLINE( 116)				::String _hx_tmp;
HXDLIN( 116)				if (::hx::IsNull( expr->oper->value )) {
HXLINE( 116)					_hx_tmp = HX_("null",87,9e,0e,49);
            				}
            				else {
HXLINE( 116)					_hx_tmp = ::Std_obj::string(expr->oper->value);
            				}
HXDLIN( 116)				HX_STACK_DO_THROW((((((HX_("Unknown unary operator ",95,59,a9,99) + _hx_tmp) + HX_(" at line ",df,96,71,22)) + expr->oper->line) + HX_(", column ",96,fc,25,5b)) + expr->oper->column));
            			}
            		}
HXLINE( 110)		return null();
            	}


 ::Dynamic InterpBknd_obj::visitBinaryExpr( ::src::ast::BinaryExpr expr){
            	HX_STACKFRAME(&_hx_pos_817db7afda60fcc6_120_visitBinaryExpr)
HXLINE( 121)		 ::Dynamic left = this->visitExpr(expr->left);
HXLINE( 122)		 ::Dynamic right = this->visitExpr(expr->right);
HXLINE( 123)		switch((int)(expr->oper->type->_hx_getIndex())){
            			case (int)4: {
HXLINE( 125)				return (left + right);
            			}
            			break;
            			case (int)5: {
HXLINE( 127)				return (( (Float)(left) ) - ( (Float)(right) ));
            			}
            			break;
            			case (int)6: {
HXLINE( 129)				return (( (Float)(left) ) * ( (Float)(right) ));
            			}
            			break;
            			case (int)7: {
HXLINE( 131)				return (( (Float)(left) ) / ( (Float)(right) ));
            			}
            			break;
            			case (int)13: {
HXLINE( 141)				return ::hx::IsEq( left,right );
            			}
            			break;
            			case (int)14: {
HXLINE( 143)				return ::hx::IsNotEq( left,right );
            			}
            			break;
            			case (int)15: {
HXLINE( 133)				return ::hx::IsGreater( left,right );
            			}
            			break;
            			case (int)16: {
HXLINE( 135)				return ::hx::IsGreaterEq( left,right );
            			}
            			break;
            			case (int)17: {
HXLINE( 137)				return ::hx::IsLess( left,right );
            			}
            			break;
            			case (int)18: {
HXLINE( 139)				return ::hx::IsLessEq( left,right );
            			}
            			break;
            			case (int)19: {
HXLINE( 145)				return !(( (bool)(left) ));
            			}
            			break;
            			default:{
HXLINE( 147)				::String _hx_tmp;
HXDLIN( 147)				if (::hx::IsNull( expr->oper->value )) {
HXLINE( 147)					_hx_tmp = HX_("null",87,9e,0e,49);
            				}
            				else {
HXLINE( 147)					_hx_tmp = ::Std_obj::string(expr->oper->value);
            				}
HXDLIN( 147)				HX_STACK_DO_THROW((((((HX_("Unknown operator ",c6,83,e4,d4) + _hx_tmp) + HX_(" at line ",df,96,71,22)) + expr->oper->line) + HX_(", column ",96,fc,25,5b)) + expr->oper->column));
            			}
            		}
HXLINE( 123)		return null();
            	}


 ::Dynamic InterpBknd_obj::visitNumberExpr( ::src::ast::NumberExpr expr){
            	HX_STACKFRAME(&_hx_pos_817db7afda60fcc6_152_visitNumberExpr)
HXDLIN( 152)		return expr->value;
            	}


 ::Dynamic InterpBknd_obj::visitVariableExpr( ::src::ast::VariableExpr expr){
            	HX_STACKFRAME(&_hx_pos_817db7afda60fcc6_155_visitVariableExpr)
HXLINE( 156)		if (this->environment->exists(expr->name)) {
HXLINE( 156)			return this->environment->get(expr->name);
            		}
HXLINE( 157)		HX_STACK_DO_THROW((((((HX_("Undefined variable '",f3,34,cc,06) + expr->name) + HX_("' at line ",d8,d9,c9,6d)) + expr->line) + HX_(", column ",96,fc,25,5b)) + expr->column));
HXDLIN( 157)		return null();
            	}


 ::Dynamic InterpBknd_obj::visitStringExpr( ::src::ast::StringExpr expr){
            	HX_STACKFRAME(&_hx_pos_817db7afda60fcc6_161_visitStringExpr)
HXDLIN( 161)		return expr->value;
            	}



::hx::ObjectPtr< InterpBknd_obj > InterpBknd_obj::__new() {
	::hx::ObjectPtr< InterpBknd_obj > __this = new InterpBknd_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< InterpBknd_obj > InterpBknd_obj::__alloc(::hx::Ctx *_hx_ctx) {
	InterpBknd_obj *__this = (InterpBknd_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(InterpBknd_obj), true, "src.InterpBknd"));
	*(void **)__this = InterpBknd_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

InterpBknd_obj::InterpBknd_obj()
{
}

void InterpBknd_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InterpBknd);
	HX_MARK_MEMBER_NAME(environment,"environment");
	HX_MARK_END_CLASS();
}

void InterpBknd_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(environment,"environment");
}

::hx::Val InterpBknd_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"visit") ) { return ::hx::Val( visit_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"visitStmt") ) { return ::hx::Val( visitStmt_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitExpr") ) { return ::hx::Val( visitExpr_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"environment") ) { return ::hx::Val( environment ); }
		if (HX_FIELD_EQ(inName,"visitIfStmt") ) { return ::hx::Val( visitIfStmt_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"visitLetStmt") ) { return ::hx::Val( visitLetStmt_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visitExprStmt") ) { return ::hx::Val( visitExprStmt_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"visitPrintStmt") ) { return ::hx::Val( visitPrintStmt_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitInputStmt") ) { return ::hx::Val( visitInputStmt_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitWhileStmt") ) { return ::hx::Val( visitWhileStmt_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitBlockStmt") ) { return ::hx::Val( visitBlockStmt_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitUnaryExpr") ) { return ::hx::Val( visitUnaryExpr_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"visitBinaryExpr") ) { return ::hx::Val( visitBinaryExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitNumberExpr") ) { return ::hx::Val( visitNumberExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitStringExpr") ) { return ::hx::Val( visitStringExpr_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"visitVariableExpr") ) { return ::hx::Val( visitVariableExpr_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val InterpBknd_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"environment") ) { environment=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InterpBknd_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("environment",d3,0b,50,ad));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo InterpBknd_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(InterpBknd_obj,environment),HX_("environment",d3,0b,50,ad)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *InterpBknd_obj_sStaticStorageInfo = 0;
#endif

static ::String InterpBknd_obj_sMemberFields[] = {
	HX_("environment",d3,0b,50,ad),
	HX_("visit",cb,79,07,37),
	HX_("visitPrintStmt",ca,e1,f5,4c),
	HX_("visitInputStmt",27,00,28,93),
	HX_("visitLetStmt",38,3d,e5,b6),
	HX_("visitIfStmt",f0,00,0f,77),
	HX_("visitWhileStmt",4e,df,dd,65),
	HX_("visitBlockStmt",ea,0e,8c,d1),
	HX_("visitExprStmt",08,cf,9a,01),
	HX_("visitStmt",b3,d5,44,5c),
	HX_("visitExpr",a0,e4,06,53),
	HX_("visitUnaryExpr",39,d7,67,ab),
	HX_("visitBinaryExpr",81,43,80,12),
	HX_("visitNumberExpr",49,12,40,af),
	HX_("visitVariableExpr",fc,d3,8e,9c),
	HX_("visitStringExpr",51,58,a3,22),
	::String(null()) };

::hx::Class InterpBknd_obj::__mClass;

void InterpBknd_obj::__register()
{
	InterpBknd_obj _hx_dummy;
	InterpBknd_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.InterpBknd",9d,9f,df,21);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(InterpBknd_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< InterpBknd_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InterpBknd_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InterpBknd_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
