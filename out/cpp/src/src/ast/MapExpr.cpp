// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_MapExpr
#include <src/ast/MapExpr.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ba0efd346965668a_6_new,"src.ast.MapExpr","new",0x92ead68d,"src.ast.MapExpr.new","src/ast/MapExpr.hx",6,0x446e0485)
HX_LOCAL_STACK_FRAME(_hx_pos_ba0efd346965668a_11_toString,"src.ast.MapExpr","toString",0x04b1475f,"src.ast.MapExpr.toString","src/ast/MapExpr.hx",11,0x446e0485)
namespace src{
namespace ast{

void MapExpr_obj::__construct(::Array< ::Dynamic> pairs,int line,int column){
            	HX_STACKFRAME(&_hx_pos_ba0efd346965668a_6_new)
HXLINE(   7)		super::__construct(line,column);
HXLINE(   8)		this->pairs = pairs;
            	}

Dynamic MapExpr_obj::__CreateEmpty() { return new MapExpr_obj; }

void *MapExpr_obj::_hx_vtable = 0;

Dynamic MapExpr_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MapExpr_obj > _hx_result = new MapExpr_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool MapExpr_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f0a5d3b) {
		if (inClassId<=(int)0x017ffd73) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x017ffd73;
		} else {
			return inClassId==(int)0x1f0a5d3b;
		}
	} else {
		return inClassId==(int)0x24f66a08;
	}
}

::String MapExpr_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_ba0efd346965668a_11_toString)
HXLINE(  12)		::Array< ::Dynamic> _this = this->pairs;
HXDLIN(  12)		::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN(  12)		{
HXLINE(  12)			int _g = 0;
HXDLIN(  12)			int _g1 = _this->length;
HXDLIN(  12)			while((_g < _g1)){
HXLINE(  12)				_g = (_g + 1);
HXDLIN(  12)				int i = (_g - 1);
HXDLIN(  12)				{
HXLINE(  13)					 ::Dynamic pair = _hx_array_unsafe_get(_this,i);
HXDLIN(  13)					::String inValue = (::Std_obj::string( ::Dynamic(pair->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic))) + HX_(" => ",7f,53,55,15));
HXLINE(  12)					::String inValue1 = (inValue + ::Std_obj::string( ::Dynamic(pair->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic))));
HXDLIN(  12)					result->__unsafe_set(i,inValue1);
            				}
            			}
            		}
HXDLIN(  12)		::String pairsStr = result->join(HX_(", ",74,26,00,00));
HXLINE(  15)		return ((HX_("{",7b,00,00,00) + pairsStr) + HX_("}",7d,00,00,00));
            	}



::hx::ObjectPtr< MapExpr_obj > MapExpr_obj::__new(::Array< ::Dynamic> pairs,int line,int column) {
	::hx::ObjectPtr< MapExpr_obj > __this = new MapExpr_obj();
	__this->__construct(pairs,line,column);
	return __this;
}

::hx::ObjectPtr< MapExpr_obj > MapExpr_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< ::Dynamic> pairs,int line,int column) {
	MapExpr_obj *__this = (MapExpr_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MapExpr_obj), true, "src.ast.MapExpr"));
	*(void **)__this = MapExpr_obj::_hx_vtable;
	__this->__construct(pairs,line,column);
	return __this;
}

MapExpr_obj::MapExpr_obj()
{
}

void MapExpr_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MapExpr);
	HX_MARK_MEMBER_NAME(pairs,"pairs");
	HX_MARK_END_CLASS();
}

void MapExpr_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pairs,"pairs");
}

::hx::Val MapExpr_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"pairs") ) { return ::hx::Val( pairs ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MapExpr_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"pairs") ) { pairs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MapExpr_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pairs",19,bb,4e,bd));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MapExpr_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MapExpr_obj,pairs),HX_("pairs",19,bb,4e,bd)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MapExpr_obj_sStaticStorageInfo = 0;
#endif

static ::String MapExpr_obj_sMemberFields[] = {
	HX_("pairs",19,bb,4e,bd),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class MapExpr_obj::__mClass;

void MapExpr_obj::__register()
{
	MapExpr_obj _hx_dummy;
	MapExpr_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.MapExpr",1b,8c,a7,6f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MapExpr_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MapExpr_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MapExpr_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MapExpr_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
