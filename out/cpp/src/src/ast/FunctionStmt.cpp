// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_FunctionStmt
#include <src/ast/FunctionStmt.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif
#ifndef INCLUDED_src_ast_Parameter
#include <src/ast/Parameter.h>
#endif
#ifndef INCLUDED_src_ast_Stmt
#include <src/ast/Stmt.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3872249d65a447d9_8_new,"src.ast.FunctionStmt","new",0x74682308,"src.ast.FunctionStmt.new","src/ast/FunctionStmt.hx",8,0x6e63e326)
HX_LOCAL_STACK_FRAME(_hx_pos_3872249d65a447d9_16_toString,"src.ast.FunctionStmt","toString",0xeb65dd04,"src.ast.FunctionStmt.toString","src/ast/FunctionStmt.hx",16,0x6e63e326)
namespace src{
namespace ast{

void FunctionStmt_obj::__construct(::String name,::Array< ::Dynamic> params, ::src::ast::Stmt body,int line,int column){
            	HX_STACKFRAME(&_hx_pos_3872249d65a447d9_8_new)
HXLINE(   9)		super::__construct(line,column);
HXLINE(  10)		this->name = name;
HXLINE(  11)		this->params = params;
HXLINE(  12)		this->body = body;
            	}

Dynamic FunctionStmt_obj::__CreateEmpty() { return new FunctionStmt_obj; }

void *FunctionStmt_obj::_hx_vtable = 0;

Dynamic FunctionStmt_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FunctionStmt_obj > _hx_result = new FunctionStmt_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool FunctionStmt_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24f66a08) {
		if (inClassId<=(int)0x010a45ea) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x010a45ea;
		} else {
			return inClassId==(int)0x24f66a08;
		}
	} else {
		return inClassId==(int)0x46a5eebe;
	}
}

::String FunctionStmt_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_3872249d65a447d9_16_toString)
HXDLIN(  16)		::String _hx_tmp = ((HX_("Function(name=",a2,9f,48,19) + this->name) + HX_(", args=[",8f,09,13,b8));
HXDLIN(  16)		::String _hx_tmp1 = ((_hx_tmp + this->params->join(HX_(", ",74,26,00,00))) + HX_("], body=",aa,3d,5f,6f));
HXDLIN(  16)		return ((_hx_tmp1 + this->body->toString()) + HX_(")",29,00,00,00));
            	}



::hx::ObjectPtr< FunctionStmt_obj > FunctionStmt_obj::__new(::String name,::Array< ::Dynamic> params, ::src::ast::Stmt body,int line,int column) {
	::hx::ObjectPtr< FunctionStmt_obj > __this = new FunctionStmt_obj();
	__this->__construct(name,params,body,line,column);
	return __this;
}

::hx::ObjectPtr< FunctionStmt_obj > FunctionStmt_obj::__alloc(::hx::Ctx *_hx_ctx,::String name,::Array< ::Dynamic> params, ::src::ast::Stmt body,int line,int column) {
	FunctionStmt_obj *__this = (FunctionStmt_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FunctionStmt_obj), true, "src.ast.FunctionStmt"));
	*(void **)__this = FunctionStmt_obj::_hx_vtable;
	__this->__construct(name,params,body,line,column);
	return __this;
}

FunctionStmt_obj::FunctionStmt_obj()
{
}

void FunctionStmt_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FunctionStmt);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(params,"params");
	HX_MARK_MEMBER_NAME(body,"body");
	HX_MARK_END_CLASS();
}

void FunctionStmt_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(params,"params");
	HX_VISIT_MEMBER_NAME(body,"body");
}

::hx::Val FunctionStmt_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"body") ) { return ::hx::Val( body ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { return ::hx::Val( params ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FunctionStmt_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"body") ) { body=inValue.Cast<  ::src::ast::Stmt >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { params=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FunctionStmt_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("params",46,fb,7a,ed));
	outFields->push(HX_("body",a2,7a,1b,41));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FunctionStmt_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(FunctionStmt_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FunctionStmt_obj,params),HX_("params",46,fb,7a,ed)},
	{::hx::fsObject /*  ::src::ast::Stmt */ ,(int)offsetof(FunctionStmt_obj,body),HX_("body",a2,7a,1b,41)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FunctionStmt_obj_sStaticStorageInfo = 0;
#endif

static ::String FunctionStmt_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("params",46,fb,7a,ed),
	HX_("body",a2,7a,1b,41),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class FunctionStmt_obj::__mClass;

void FunctionStmt_obj::__register()
{
	FunctionStmt_obj _hx_dummy;
	FunctionStmt_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.FunctionStmt",16,3f,50,04);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FunctionStmt_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FunctionStmt_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FunctionStmt_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FunctionStmt_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
