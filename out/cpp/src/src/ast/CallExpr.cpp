// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_CallExpr
#include <src/ast/CallExpr.h>
#endif
#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f9bc6d625d1e98a0_7_new,"src.ast.CallExpr","new",0xa2948cfb,"src.ast.CallExpr.new","src/ast/CallExpr.hx",7,0xee1d0193)
HX_LOCAL_STACK_FRAME(_hx_pos_f9bc6d625d1e98a0_14_toString,"src.ast.CallExpr","toString",0x7f558231,"src.ast.CallExpr.toString","src/ast/CallExpr.hx",14,0xee1d0193)
namespace src{
namespace ast{

void CallExpr_obj::__construct( ::src::ast::Expr callee,::Array< ::Dynamic> arguments,int line,int column){
            	HX_STACKFRAME(&_hx_pos_f9bc6d625d1e98a0_7_new)
HXLINE(   8)		super::__construct(line,column);
HXLINE(   9)		this->callee = callee;
HXLINE(  10)		this->arguments = arguments;
            	}

Dynamic CallExpr_obj::__CreateEmpty() { return new CallExpr_obj; }

void *CallExpr_obj::_hx_vtable = 0;

Dynamic CallExpr_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CallExpr_obj > _hx_result = new CallExpr_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool CallExpr_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24f66a08) {
		if (inClassId<=(int)0x1f0a5d3b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1f0a5d3b;
		} else {
			return inClassId==(int)0x24f66a08;
		}
	} else {
		return inClassId==(int)0x32fcb995;
	}
}

::String CallExpr_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_f9bc6d625d1e98a0_14_toString)
HXDLIN(  14)		::String _hx_tmp = ((HX_("Call(callee=",95,a1,e6,6a) + this->callee->toString()) + HX_(", args=[",8f,09,13,b8));
HXDLIN(  14)		::Array< ::Dynamic> _this = this->arguments;
HXDLIN(  14)		::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN(  14)		{
HXDLIN(  14)			int _g = 0;
HXDLIN(  14)			int _g1 = _this->length;
HXDLIN(  14)			while((_g < _g1)){
HXDLIN(  14)				_g = (_g + 1);
HXDLIN(  14)				int i = (_g - 1);
HXDLIN(  14)				{
HXDLIN(  14)					::String inValue = ( ( ::src::ast::Expr)(_hx_array_unsafe_get(_this,i)) )->toString();
HXDLIN(  14)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN(  14)		return ((_hx_tmp + result->join(HX_(", ",74,26,00,00))) + HX_("])",2c,51,00,00));
            	}



CallExpr_obj::CallExpr_obj()
{
}

void CallExpr_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CallExpr);
	HX_MARK_MEMBER_NAME(callee,"callee");
	HX_MARK_MEMBER_NAME(arguments,"arguments");
	HX_MARK_END_CLASS();
}

void CallExpr_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(callee,"callee");
	HX_VISIT_MEMBER_NAME(arguments,"arguments");
}

::hx::Val CallExpr_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"callee") ) { return ::hx::Val( callee ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"arguments") ) { return ::hx::Val( arguments ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CallExpr_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"callee") ) { callee=inValue.Cast<  ::src::ast::Expr >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"arguments") ) { arguments=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CallExpr_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("callee",7e,54,e8,b6));
	outFields->push(HX_("arguments",56,3f,97,ee));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CallExpr_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::src::ast::Expr */ ,(int)offsetof(CallExpr_obj,callee),HX_("callee",7e,54,e8,b6)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(CallExpr_obj,arguments),HX_("arguments",56,3f,97,ee)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CallExpr_obj_sStaticStorageInfo = 0;
#endif

static ::String CallExpr_obj_sMemberFields[] = {
	HX_("callee",7e,54,e8,b6),
	HX_("arguments",56,3f,97,ee),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class CallExpr_obj::__mClass;

void CallExpr_obj::__register()
{
	CallExpr_obj _hx_dummy;
	CallExpr_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.CallExpr",89,f3,7d,c0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CallExpr_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CallExpr_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CallExpr_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CallExpr_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
