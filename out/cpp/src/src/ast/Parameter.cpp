// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif
#ifndef INCLUDED_src_ast_Parameter
#include <src/ast/Parameter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_89bba41795d0da9b_9_new,"src.ast.Parameter","new",0x13d534c5,"src.ast.Parameter.new","src/ast/Parameter.hx",9,0x572499cd)
HX_LOCAL_STACK_FRAME(_hx_pos_89bba41795d0da9b_17_toString,"src.ast.Parameter","toString",0xe36e5e27,"src.ast.Parameter.toString","src/ast/Parameter.hx",17,0x572499cd)
namespace src{
namespace ast{

void Parameter_obj::__construct(::String name, ::src::ast::Expr defaultValue,int line,int column){
            	HX_STACKFRAME(&_hx_pos_89bba41795d0da9b_9_new)
HXLINE(  10)		this->name = name;
HXLINE(  11)		this->defaultValue = defaultValue;
HXLINE(  12)		this->line = line;
HXLINE(  13)		this->column = column;
            	}

Dynamic Parameter_obj::__CreateEmpty() { return new Parameter_obj; }

void *Parameter_obj::_hx_vtable = 0;

Dynamic Parameter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Parameter_obj > _hx_result = new Parameter_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Parameter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x00e1e5ab;
}

::String Parameter_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_89bba41795d0da9b_17_toString)
HXDLIN(  17)		::String _hx_tmp = (HX_("Parameter(",7f,c2,2f,48) + this->name);
HXDLIN(  17)		::String _hx_tmp1;
HXDLIN(  17)		if (::hx::IsNotNull( this->defaultValue )) {
HXDLIN(  17)			_hx_tmp1 = (HX_(", default=",d0,8a,93,1a) + ::Std_obj::string(this->defaultValue));
            		}
            		else {
HXDLIN(  17)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN(  17)		return ((_hx_tmp + _hx_tmp1) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parameter_obj,toString,return )


::hx::ObjectPtr< Parameter_obj > Parameter_obj::__new(::String name, ::src::ast::Expr defaultValue,int line,int column) {
	::hx::ObjectPtr< Parameter_obj > __this = new Parameter_obj();
	__this->__construct(name,defaultValue,line,column);
	return __this;
}

::hx::ObjectPtr< Parameter_obj > Parameter_obj::__alloc(::hx::Ctx *_hx_ctx,::String name, ::src::ast::Expr defaultValue,int line,int column) {
	Parameter_obj *__this = (Parameter_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Parameter_obj), true, "src.ast.Parameter"));
	*(void **)__this = Parameter_obj::_hx_vtable;
	__this->__construct(name,defaultValue,line,column);
	return __this;
}

Parameter_obj::Parameter_obj()
{
}

void Parameter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Parameter);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(defaultValue,"defaultValue");
	HX_MARK_MEMBER_NAME(line,"line");
	HX_MARK_MEMBER_NAME(column,"column");
	HX_MARK_END_CLASS();
}

void Parameter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(defaultValue,"defaultValue");
	HX_VISIT_MEMBER_NAME(line,"line");
	HX_VISIT_MEMBER_NAME(column,"column");
}

::hx::Val Parameter_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"line") ) { return ::hx::Val( line ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"column") ) { return ::hx::Val( column ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultValue") ) { return ::hx::Val( defaultValue ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Parameter_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"line") ) { line=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"column") ) { column=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultValue") ) { defaultValue=inValue.Cast<  ::src::ast::Expr >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Parameter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("defaultValue",f0,ba,13,e7));
	outFields->push(HX_("line",f4,17,b3,47));
	outFields->push(HX_("column",d6,4e,8b,c6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Parameter_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Parameter_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsObject /*  ::src::ast::Expr */ ,(int)offsetof(Parameter_obj,defaultValue),HX_("defaultValue",f0,ba,13,e7)},
	{::hx::fsInt,(int)offsetof(Parameter_obj,line),HX_("line",f4,17,b3,47)},
	{::hx::fsInt,(int)offsetof(Parameter_obj,column),HX_("column",d6,4e,8b,c6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Parameter_obj_sStaticStorageInfo = 0;
#endif

static ::String Parameter_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("defaultValue",f0,ba,13,e7),
	HX_("line",f4,17,b3,47),
	HX_("column",d6,4e,8b,c6),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class Parameter_obj::__mClass;

void Parameter_obj::__register()
{
	Parameter_obj _hx_dummy;
	Parameter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.Parameter",53,6e,08,f3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Parameter_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Parameter_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Parameter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Parameter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
