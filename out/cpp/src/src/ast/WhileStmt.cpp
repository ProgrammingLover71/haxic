// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_BlockStmt
#include <src/ast/BlockStmt.h>
#endif
#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif
#ifndef INCLUDED_src_ast_Stmt
#include <src/ast/Stmt.h>
#endif
#ifndef INCLUDED_src_ast_WhileStmt
#include <src/ast/WhileStmt.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_936e46a004a025f4_7_new,"src.ast.WhileStmt","new",0x4046c1b5,"src.ast.WhileStmt.new","src/ast/WhileStmt.hx",7,0xdda7fadd)
HX_LOCAL_STACK_FRAME(_hx_pos_936e46a004a025f4_14_toString,"src.ast.WhileStmt","toString",0xe987eb37,"src.ast.WhileStmt.toString","src/ast/WhileStmt.hx",14,0xdda7fadd)
namespace src{
namespace ast{

void WhileStmt_obj::__construct( ::src::ast::Expr condition, ::src::ast::BlockStmt body,int line,int column){
            	HX_STACKFRAME(&_hx_pos_936e46a004a025f4_7_new)
HXLINE(   8)		super::__construct(line,column);
HXLINE(   9)		this->condition = condition;
HXLINE(  10)		this->body = body;
            	}

Dynamic WhileStmt_obj::__CreateEmpty() { return new WhileStmt_obj; }

void *WhileStmt_obj::_hx_vtable = 0;

Dynamic WhileStmt_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< WhileStmt_obj > _hx_result = new WhileStmt_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool WhileStmt_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24f66a08) {
		if (inClassId<=(int)0x010a45ea) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x010a45ea;
		} else {
			return inClassId==(int)0x24f66a08;
		}
	} else {
		return inClassId==(int)0x4d0347b7;
	}
}

::String WhileStmt_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_936e46a004a025f4_14_toString)
HXDLIN(  14)		::String _hx_tmp = ((HX_("While(condition=",79,84,62,42) + this->condition->toString()) + HX_(", body=",67,c8,0b,a8));
HXDLIN(  14)		return ((_hx_tmp + this->body->toString()) + HX_(")",29,00,00,00));
            	}



::hx::ObjectPtr< WhileStmt_obj > WhileStmt_obj::__new( ::src::ast::Expr condition, ::src::ast::BlockStmt body,int line,int column) {
	::hx::ObjectPtr< WhileStmt_obj > __this = new WhileStmt_obj();
	__this->__construct(condition,body,line,column);
	return __this;
}

::hx::ObjectPtr< WhileStmt_obj > WhileStmt_obj::__alloc(::hx::Ctx *_hx_ctx, ::src::ast::Expr condition, ::src::ast::BlockStmt body,int line,int column) {
	WhileStmt_obj *__this = (WhileStmt_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(WhileStmt_obj), true, "src.ast.WhileStmt"));
	*(void **)__this = WhileStmt_obj::_hx_vtable;
	__this->__construct(condition,body,line,column);
	return __this;
}

WhileStmt_obj::WhileStmt_obj()
{
}

void WhileStmt_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(WhileStmt);
	HX_MARK_MEMBER_NAME(condition,"condition");
	HX_MARK_MEMBER_NAME(body,"body");
	HX_MARK_END_CLASS();
}

void WhileStmt_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(condition,"condition");
	HX_VISIT_MEMBER_NAME(body,"body");
}

::hx::Val WhileStmt_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"body") ) { return ::hx::Val( body ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"condition") ) { return ::hx::Val( condition ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val WhileStmt_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"body") ) { body=inValue.Cast<  ::src::ast::BlockStmt >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"condition") ) { condition=inValue.Cast<  ::src::ast::Expr >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void WhileStmt_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("condition",9b,e9,33,fc));
	outFields->push(HX_("body",a2,7a,1b,41));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo WhileStmt_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::src::ast::Expr */ ,(int)offsetof(WhileStmt_obj,condition),HX_("condition",9b,e9,33,fc)},
	{::hx::fsObject /*  ::src::ast::BlockStmt */ ,(int)offsetof(WhileStmt_obj,body),HX_("body",a2,7a,1b,41)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *WhileStmt_obj_sStaticStorageInfo = 0;
#endif

static ::String WhileStmt_obj_sMemberFields[] = {
	HX_("condition",9b,e9,33,fc),
	HX_("body",a2,7a,1b,41),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class WhileStmt_obj::__mClass;

void WhileStmt_obj::__register()
{
	WhileStmt_obj _hx_dummy;
	WhileStmt_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.WhileStmt",43,c3,94,90);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(WhileStmt_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< WhileStmt_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WhileStmt_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WhileStmt_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
