// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fed70c35166b8c38_7_new,"src.ast.Node","new",0x31f0de8a,"src.ast.Node.new","src/ast/Node.hx",7,0xd94d9fe4)
HX_LOCAL_STACK_FRAME(_hx_pos_fed70c35166b8c38_13_toString,"src.ast.Node","toString",0xd7bc2a42,"src.ast.Node.toString","src/ast/Node.hx",13,0xd94d9fe4)
namespace src{
namespace ast{

void Node_obj::__construct(int line,int column){
            	HX_STACKFRAME(&_hx_pos_fed70c35166b8c38_7_new)
HXLINE(   8)		this->line = line;
HXLINE(   9)		this->column = column;
            	}

bool Node_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x24f66a08;
}

::String Node_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_fed70c35166b8c38_13_toString)
HXDLIN(  13)		return HX_("Node",22,36,e3,33);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Node_obj,toString,return )


Node_obj::Node_obj()
{
}

::hx::Val Node_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { return ::hx::Val( line ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"column") ) { return ::hx::Val( column ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Node_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { line=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"column") ) { column=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Node_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("line",f4,17,b3,47));
	outFields->push(HX_("column",d6,4e,8b,c6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Node_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Node_obj,line),HX_("line",f4,17,b3,47)},
	{::hx::fsInt,(int)offsetof(Node_obj,column),HX_("column",d6,4e,8b,c6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Node_obj_sStaticStorageInfo = 0;
#endif

static ::String Node_obj_sMemberFields[] = {
	HX_("line",f4,17,b3,47),
	HX_("column",d6,4e,8b,c6),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class Node_obj::__mClass;

void Node_obj::__register()
{
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.Node",98,91,30,9c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Node_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Node_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Node_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Node_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
