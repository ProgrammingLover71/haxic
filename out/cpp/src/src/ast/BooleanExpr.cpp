// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_src_ast_BooleanExpr
#include <src/ast/BooleanExpr.h>
#endif
#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_94e612842bf71685_6_new,"src.ast.BooleanExpr","new",0x83037f99,"src.ast.BooleanExpr.new","src/ast/BooleanExpr.hx",6,0x6138e9f9)
HX_LOCAL_STACK_FRAME(_hx_pos_94e612842bf71685_12_toString,"src.ast.BooleanExpr","toString",0xd9dc52d3,"src.ast.BooleanExpr.toString","src/ast/BooleanExpr.hx",12,0x6138e9f9)
namespace src{
namespace ast{

void BooleanExpr_obj::__construct(bool value,int line,int column){
            	HX_STACKFRAME(&_hx_pos_94e612842bf71685_6_new)
HXLINE(   7)		super::__construct(line,column);
HXLINE(   8)		this->value = value;
            	}

Dynamic BooleanExpr_obj::__CreateEmpty() { return new BooleanExpr_obj; }

void *BooleanExpr_obj::_hx_vtable = 0;

Dynamic BooleanExpr_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BooleanExpr_obj > _hx_result = new BooleanExpr_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool BooleanExpr_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24f66a08) {
		if (inClassId<=(int)0x1f0a5d3b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1f0a5d3b;
		} else {
			return inClassId==(int)0x24f66a08;
		}
	} else {
		return inClassId==(int)0x6e03bc7f;
	}
}

::String BooleanExpr_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_94e612842bf71685_12_toString)
HXDLIN(  12)		return ((HX_("Boolean(",a0,24,c0,9a) + ::Std_obj::string(this->value)) + HX_(")",29,00,00,00));
            	}



::hx::ObjectPtr< BooleanExpr_obj > BooleanExpr_obj::__new(bool value,int line,int column) {
	::hx::ObjectPtr< BooleanExpr_obj > __this = new BooleanExpr_obj();
	__this->__construct(value,line,column);
	return __this;
}

::hx::ObjectPtr< BooleanExpr_obj > BooleanExpr_obj::__alloc(::hx::Ctx *_hx_ctx,bool value,int line,int column) {
	BooleanExpr_obj *__this = (BooleanExpr_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BooleanExpr_obj), false, "src.ast.BooleanExpr"));
	*(void **)__this = BooleanExpr_obj::_hx_vtable;
	__this->__construct(value,line,column);
	return __this;
}

BooleanExpr_obj::BooleanExpr_obj()
{
}

::hx::Val BooleanExpr_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return ::hx::Val( value ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BooleanExpr_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BooleanExpr_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("value",71,7f,b8,31));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BooleanExpr_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(BooleanExpr_obj,value),HX_("value",71,7f,b8,31)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BooleanExpr_obj_sStaticStorageInfo = 0;
#endif

static ::String BooleanExpr_obj_sMemberFields[] = {
	HX_("value",71,7f,b8,31),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class BooleanExpr_obj::__mClass;

void BooleanExpr_obj::__register()
{
	BooleanExpr_obj _hx_dummy;
	BooleanExpr_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.BooleanExpr",27,bf,5b,1d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BooleanExpr_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BooleanExpr_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BooleanExpr_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BooleanExpr_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
