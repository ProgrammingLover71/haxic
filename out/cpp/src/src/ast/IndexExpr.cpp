// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_IndexExpr
#include <src/ast/IndexExpr.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_91f1424ce196c5bf_7_new,"src.ast.IndexExpr","new",0x6d9e6b83,"src.ast.IndexExpr.new","src/ast/IndexExpr.hx",7,0x0f3904cf)
HX_LOCAL_STACK_FRAME(_hx_pos_91f1424ce196c5bf_14_toString,"src.ast.IndexExpr","toString",0xae4ff6a9,"src.ast.IndexExpr.toString","src/ast/IndexExpr.hx",14,0x0f3904cf)
namespace src{
namespace ast{

void IndexExpr_obj::__construct( ::src::ast::Expr target, ::src::ast::Expr index,int line,int column){
            	HX_STACKFRAME(&_hx_pos_91f1424ce196c5bf_7_new)
HXLINE(   8)		super::__construct(line,column);
HXLINE(   9)		this->target = target;
HXLINE(  10)		this->index = index;
            	}

Dynamic IndexExpr_obj::__CreateEmpty() { return new IndexExpr_obj; }

void *IndexExpr_obj::_hx_vtable = 0;

Dynamic IndexExpr_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< IndexExpr_obj > _hx_result = new IndexExpr_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool IndexExpr_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24f66a08) {
		if (inClassId<=(int)0x1f0a5d3b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1f0a5d3b;
		} else {
			return inClassId==(int)0x24f66a08;
		}
	} else {
		return inClassId==(int)0x65f27285;
	}
}

::String IndexExpr_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_91f1424ce196c5bf_14_toString)
HXDLIN(  14)		::String _hx_tmp = ((HX_("Index(target=",96,15,db,b1) + this->target->toString()) + HX_(", index=",5f,8a,4d,9b));
HXDLIN(  14)		return ((_hx_tmp + this->index->toString()) + HX_(")",29,00,00,00));
            	}



IndexExpr_obj::IndexExpr_obj()
{
}

void IndexExpr_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IndexExpr);
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(index,"index");
	HX_MARK_END_CLASS();
}

void IndexExpr_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(index,"index");
}

::hx::Val IndexExpr_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { return ::hx::Val( index ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return ::hx::Val( target ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val IndexExpr_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast<  ::src::ast::Expr >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast<  ::src::ast::Expr >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IndexExpr_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("target",51,f3,ec,86));
	outFields->push(HX_("index",12,9b,14,be));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo IndexExpr_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::src::ast::Expr */ ,(int)offsetof(IndexExpr_obj,target),HX_("target",51,f3,ec,86)},
	{::hx::fsObject /*  ::src::ast::Expr */ ,(int)offsetof(IndexExpr_obj,index),HX_("index",12,9b,14,be)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *IndexExpr_obj_sStaticStorageInfo = 0;
#endif

static ::String IndexExpr_obj_sMemberFields[] = {
	HX_("target",51,f3,ec,86),
	HX_("index",12,9b,14,be),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class IndexExpr_obj::__mClass;

void IndexExpr_obj::__register()
{
	IndexExpr_obj _hx_dummy;
	IndexExpr_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.IndexExpr",11,ee,83,a9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(IndexExpr_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< IndexExpr_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IndexExpr_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IndexExpr_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
