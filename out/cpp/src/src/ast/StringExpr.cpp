// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif
#ifndef INCLUDED_src_ast_StringExpr
#include <src/ast/StringExpr.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_344cf940fe2bac03_6_new,"src.ast.StringExpr","new",0xef4199ae,"src.ast.StringExpr.new","src/ast/StringExpr.hx",6,0xdf52f7c0)
HX_LOCAL_STACK_FRAME(_hx_pos_344cf940fe2bac03_12_toString,"src.ast.StringExpr","toString",0xf9be8c9e,"src.ast.StringExpr.toString","src/ast/StringExpr.hx",12,0xdf52f7c0)
namespace src{
namespace ast{

void StringExpr_obj::__construct(::String value,int line,int column){
            	HX_STACKFRAME(&_hx_pos_344cf940fe2bac03_6_new)
HXLINE(   7)		super::__construct(line,column);
HXLINE(   8)		this->value = value;
            	}

Dynamic StringExpr_obj::__CreateEmpty() { return new StringExpr_obj; }

void *StringExpr_obj::_hx_vtable = 0;

Dynamic StringExpr_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StringExpr_obj > _hx_result = new StringExpr_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool StringExpr_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24f66a08) {
		if (inClassId<=(int)0x1f0a5d3b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1f0a5d3b;
		} else {
			return inClassId==(int)0x24f66a08;
		}
	} else {
		return inClassId==(int)0x6862e064;
	}
}

::String StringExpr_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_344cf940fe2bac03_12_toString)
HXDLIN(  12)		return ((HX_("\"",22,00,00,00) + this->value) + HX_("\"",22,00,00,00));
            	}



StringExpr_obj::StringExpr_obj()
{
}

void StringExpr_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StringExpr);
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_END_CLASS();
}

void StringExpr_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(value,"value");
}

::hx::Val StringExpr_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return ::hx::Val( value ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val StringExpr_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StringExpr_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("value",71,7f,b8,31));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StringExpr_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(StringExpr_obj,value),HX_("value",71,7f,b8,31)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StringExpr_obj_sStaticStorageInfo = 0;
#endif

static ::String StringExpr_obj_sMemberFields[] = {
	HX_("value",71,7f,b8,31),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class StringExpr_obj::__mClass;

void StringExpr_obj::__register()
{
	StringExpr_obj _hx_dummy;
	StringExpr_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.StringExpr",bc,ea,f3,57);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StringExpr_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StringExpr_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StringExpr_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StringExpr_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
