// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_BlockStmt
#include <src/ast/BlockStmt.h>
#endif
#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_IfStmt
#include <src/ast/IfStmt.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif
#ifndef INCLUDED_src_ast_Stmt
#include <src/ast/Stmt.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_880d09c997af12b2_8_new,"src.ast.IfStmt","new",0x2ec66c4d,"src.ast.IfStmt.new","src/ast/IfStmt.hx",8,0x68c62701)
HX_LOCAL_STACK_FRAME(_hx_pos_880d09c997af12b2_16_toString,"src.ast.IfStmt","toString",0x803ed99f,"src.ast.IfStmt.toString","src/ast/IfStmt.hx",16,0x68c62701)
namespace src{
namespace ast{

void IfStmt_obj::__construct( ::src::ast::Expr condition, ::src::ast::BlockStmt thenBranch, ::src::ast::BlockStmt elseBranch,int line,int column){
            	HX_STACKFRAME(&_hx_pos_880d09c997af12b2_8_new)
HXLINE(   9)		super::__construct(line,column);
HXLINE(  10)		this->condition = condition;
HXLINE(  11)		this->thenBranch = thenBranch;
HXLINE(  12)		this->elseBranch = elseBranch;
            	}

Dynamic IfStmt_obj::__CreateEmpty() { return new IfStmt_obj; }

void *IfStmt_obj::_hx_vtable = 0;

Dynamic IfStmt_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< IfStmt_obj > _hx_result = new IfStmt_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool IfStmt_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24f66a08) {
		if (inClassId<=(int)0x010a45ea) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x010a45ea;
		} else {
			return inClassId==(int)0x24f66a08;
		}
	} else {
		return inClassId==(int)0x7df8c327;
	}
}

::String IfStmt_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_880d09c997af12b2_16_toString)
HXDLIN(  16)		::String _hx_tmp = ((HX_("If(cond=",b0,36,94,29) + this->condition->toString()) + HX_(", then=",cc,73,a2,00));
HXDLIN(  16)		::String _hx_tmp1 = (_hx_tmp + this->thenBranch->toString());
HXDLIN(  16)		::String _hx_tmp2;
HXDLIN(  16)		if (::hx::IsNotNull( this->elseBranch )) {
HXDLIN(  16)			_hx_tmp2 = (HX_(", else=",70,32,4f,60) + this->elseBranch->toString());
            		}
            		else {
HXDLIN(  16)			_hx_tmp2 = HX_("",00,00,00,00);
            		}
HXDLIN(  16)		return ((_hx_tmp1 + _hx_tmp2) + HX_(")",29,00,00,00));
            	}



::hx::ObjectPtr< IfStmt_obj > IfStmt_obj::__new( ::src::ast::Expr condition, ::src::ast::BlockStmt thenBranch, ::src::ast::BlockStmt elseBranch,int line,int column) {
	::hx::ObjectPtr< IfStmt_obj > __this = new IfStmt_obj();
	__this->__construct(condition,thenBranch,elseBranch,line,column);
	return __this;
}

::hx::ObjectPtr< IfStmt_obj > IfStmt_obj::__alloc(::hx::Ctx *_hx_ctx, ::src::ast::Expr condition, ::src::ast::BlockStmt thenBranch, ::src::ast::BlockStmt elseBranch,int line,int column) {
	IfStmt_obj *__this = (IfStmt_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(IfStmt_obj), true, "src.ast.IfStmt"));
	*(void **)__this = IfStmt_obj::_hx_vtable;
	__this->__construct(condition,thenBranch,elseBranch,line,column);
	return __this;
}

IfStmt_obj::IfStmt_obj()
{
}

void IfStmt_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IfStmt);
	HX_MARK_MEMBER_NAME(condition,"condition");
	HX_MARK_MEMBER_NAME(thenBranch,"thenBranch");
	HX_MARK_MEMBER_NAME(elseBranch,"elseBranch");
	HX_MARK_END_CLASS();
}

void IfStmt_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(condition,"condition");
	HX_VISIT_MEMBER_NAME(thenBranch,"thenBranch");
	HX_VISIT_MEMBER_NAME(elseBranch,"elseBranch");
}

::hx::Val IfStmt_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"condition") ) { return ::hx::Val( condition ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"thenBranch") ) { return ::hx::Val( thenBranch ); }
		if (HX_FIELD_EQ(inName,"elseBranch") ) { return ::hx::Val( elseBranch ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val IfStmt_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"condition") ) { condition=inValue.Cast<  ::src::ast::Expr >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"thenBranch") ) { thenBranch=inValue.Cast<  ::src::ast::BlockStmt >(); return inValue; }
		if (HX_FIELD_EQ(inName,"elseBranch") ) { elseBranch=inValue.Cast<  ::src::ast::BlockStmt >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IfStmt_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("condition",9b,e9,33,fc));
	outFields->push(HX_("thenBranch",5f,79,9e,8a));
	outFields->push(HX_("elseBranch",3b,28,88,3c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo IfStmt_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::src::ast::Expr */ ,(int)offsetof(IfStmt_obj,condition),HX_("condition",9b,e9,33,fc)},
	{::hx::fsObject /*  ::src::ast::BlockStmt */ ,(int)offsetof(IfStmt_obj,thenBranch),HX_("thenBranch",5f,79,9e,8a)},
	{::hx::fsObject /*  ::src::ast::BlockStmt */ ,(int)offsetof(IfStmt_obj,elseBranch),HX_("elseBranch",3b,28,88,3c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *IfStmt_obj_sStaticStorageInfo = 0;
#endif

static ::String IfStmt_obj_sMemberFields[] = {
	HX_("condition",9b,e9,33,fc),
	HX_("thenBranch",5f,79,9e,8a),
	HX_("elseBranch",3b,28,88,3c),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class IfStmt_obj::__mClass;

void IfStmt_obj::__register()
{
	IfStmt_obj _hx_dummy;
	IfStmt_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.IfStmt",db,41,15,3d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(IfStmt_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< IfStmt_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IfStmt_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IfStmt_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
