// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_ForeachStmt
#include <src/ast/ForeachStmt.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif
#ifndef INCLUDED_src_ast_Stmt
#include <src/ast/Stmt.h>
#endif
#ifndef INCLUDED_src_ast_VariableExpr
#include <src/ast/VariableExpr.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_84fc4df48678068f_8_new,"src.ast.ForeachStmt","new",0xd591bb0e,"src.ast.ForeachStmt.new","src/ast/ForeachStmt.hx",8,0xec7f9424)
HX_LOCAL_STACK_FRAME(_hx_pos_84fc4df48678068f_16_toString,"src.ast.ForeachStmt","toString",0x5a996f3e,"src.ast.ForeachStmt.toString","src/ast/ForeachStmt.hx",16,0xec7f9424)
namespace src{
namespace ast{

void ForeachStmt_obj::__construct( ::src::ast::VariableExpr variable, ::src::ast::Expr target, ::src::ast::Stmt body,int line,int column){
            	HX_STACKFRAME(&_hx_pos_84fc4df48678068f_8_new)
HXLINE(   9)		super::__construct(line,column);
HXLINE(  10)		this->variable = variable;
HXLINE(  11)		this->target = target;
HXLINE(  12)		this->body = body;
            	}

Dynamic ForeachStmt_obj::__CreateEmpty() { return new ForeachStmt_obj; }

void *ForeachStmt_obj::_hx_vtable = 0;

Dynamic ForeachStmt_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ForeachStmt_obj > _hx_result = new ForeachStmt_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool ForeachStmt_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1527d974) {
		if (inClassId<=(int)0x010a45ea) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x010a45ea;
		} else {
			return inClassId==(int)0x1527d974;
		}
	} else {
		return inClassId==(int)0x24f66a08;
	}
}

::String ForeachStmt_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_84fc4df48678068f_16_toString)
HXDLIN(  16)		::String _hx_tmp = ((HX_("Foreach(variable=",43,6b,54,16) + this->variable->toString()) + HX_(", target=",d8,43,34,f0));
HXDLIN(  16)		::String _hx_tmp1 = ((_hx_tmp + this->target->toString()) + HX_(", body=",67,c8,0b,a8));
HXDLIN(  16)		return ((_hx_tmp1 + this->body->toString()) + HX_(")",29,00,00,00));
            	}



::hx::ObjectPtr< ForeachStmt_obj > ForeachStmt_obj::__new( ::src::ast::VariableExpr variable, ::src::ast::Expr target, ::src::ast::Stmt body,int line,int column) {
	::hx::ObjectPtr< ForeachStmt_obj > __this = new ForeachStmt_obj();
	__this->__construct(variable,target,body,line,column);
	return __this;
}

::hx::ObjectPtr< ForeachStmt_obj > ForeachStmt_obj::__alloc(::hx::Ctx *_hx_ctx, ::src::ast::VariableExpr variable, ::src::ast::Expr target, ::src::ast::Stmt body,int line,int column) {
	ForeachStmt_obj *__this = (ForeachStmt_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ForeachStmt_obj), true, "src.ast.ForeachStmt"));
	*(void **)__this = ForeachStmt_obj::_hx_vtable;
	__this->__construct(variable,target,body,line,column);
	return __this;
}

ForeachStmt_obj::ForeachStmt_obj()
{
}

void ForeachStmt_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ForeachStmt);
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(variable,"variable");
	HX_MARK_MEMBER_NAME(body,"body");
	HX_MARK_END_CLASS();
}

void ForeachStmt_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(variable,"variable");
	HX_VISIT_MEMBER_NAME(body,"body");
}

::hx::Val ForeachStmt_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"body") ) { return ::hx::Val( body ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return ::hx::Val( target ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"variable") ) { return ::hx::Val( variable ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ForeachStmt_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"body") ) { body=inValue.Cast<  ::src::ast::Stmt >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast<  ::src::ast::Expr >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"variable") ) { variable=inValue.Cast<  ::src::ast::VariableExpr >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ForeachStmt_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("target",51,f3,ec,86));
	outFields->push(HX_("variable",3c,12,0d,69));
	outFields->push(HX_("body",a2,7a,1b,41));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ForeachStmt_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::src::ast::Expr */ ,(int)offsetof(ForeachStmt_obj,target),HX_("target",51,f3,ec,86)},
	{::hx::fsObject /*  ::src::ast::VariableExpr */ ,(int)offsetof(ForeachStmt_obj,variable),HX_("variable",3c,12,0d,69)},
	{::hx::fsObject /*  ::src::ast::Stmt */ ,(int)offsetof(ForeachStmt_obj,body),HX_("body",a2,7a,1b,41)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ForeachStmt_obj_sStaticStorageInfo = 0;
#endif

static ::String ForeachStmt_obj_sMemberFields[] = {
	HX_("target",51,f3,ec,86),
	HX_("variable",3c,12,0d,69),
	HX_("body",a2,7a,1b,41),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class ForeachStmt_obj::__mClass;

void ForeachStmt_obj::__register()
{
	ForeachStmt_obj _hx_dummy;
	ForeachStmt_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.ForeachStmt",1c,dc,7f,c4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ForeachStmt_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ForeachStmt_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ForeachStmt_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ForeachStmt_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
