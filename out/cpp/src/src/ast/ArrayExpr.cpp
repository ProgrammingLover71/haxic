// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_ArrayExpr
#include <src/ast/ArrayExpr.h>
#endif
#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_84553a148d2becfc_6_new,"src.ast.ArrayExpr","new",0x24899d0a,"src.ast.ArrayExpr.new","src/ast/ArrayExpr.hx",6,0x7636a128)
HX_LOCAL_STACK_FRAME(_hx_pos_84553a148d2becfc_12_toString,"src.ast.ArrayExpr","toString",0x7a60dbc2,"src.ast.ArrayExpr.toString","src/ast/ArrayExpr.hx",12,0x7636a128)
namespace src{
namespace ast{

void ArrayExpr_obj::__construct(::Array< ::Dynamic> elements,int line,int column){
            	HX_STACKFRAME(&_hx_pos_84553a148d2becfc_6_new)
HXLINE(   7)		super::__construct(line,column);
HXLINE(   8)		this->elements = elements;
            	}

Dynamic ArrayExpr_obj::__CreateEmpty() { return new ArrayExpr_obj; }

void *ArrayExpr_obj::_hx_vtable = 0;

Dynamic ArrayExpr_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ArrayExpr_obj > _hx_result = new ArrayExpr_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ArrayExpr_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24f66a08) {
		if (inClassId<=(int)0x1f0a5d3b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1f0a5d3b;
		} else {
			return inClassId==(int)0x24f66a08;
		}
	} else {
		return inClassId==(int)0x44c18770;
	}
}

::String ArrayExpr_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_84553a148d2becfc_12_toString)
HXDLIN(  12)		::Array< ::Dynamic> _this = this->elements;
HXDLIN(  12)		::Array< ::String > result = ::Array_obj< ::String >::__new(_this->length);
HXDLIN(  12)		{
HXDLIN(  12)			int _g = 0;
HXDLIN(  12)			int _g1 = _this->length;
HXDLIN(  12)			while((_g < _g1)){
HXDLIN(  12)				_g = (_g + 1);
HXDLIN(  12)				int i = (_g - 1);
HXDLIN(  12)				{
HXDLIN(  12)					::String inValue = ( ( ::src::ast::Expr)(_hx_array_unsafe_get(_this,i)) )->toString();
HXDLIN(  12)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN(  12)		return ((HX_("Array(",8f,ec,84,ec) + result->join(HX_(", ",74,26,00,00))) + HX_(")",29,00,00,00));
            	}



ArrayExpr_obj::ArrayExpr_obj()
{
}

void ArrayExpr_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ArrayExpr);
	HX_MARK_MEMBER_NAME(elements,"elements");
	HX_MARK_END_CLASS();
}

void ArrayExpr_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(elements,"elements");
}

::hx::Val ArrayExpr_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"elements") ) { return ::hx::Val( elements ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ArrayExpr_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"elements") ) { elements=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ArrayExpr_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("elements",37,36,c4,83));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ArrayExpr_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ArrayExpr_obj,elements),HX_("elements",37,36,c4,83)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ArrayExpr_obj_sStaticStorageInfo = 0;
#endif

static ::String ArrayExpr_obj_sMemberFields[] = {
	HX_("elements",37,36,c4,83),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class ArrayExpr_obj::__mClass;

void ArrayExpr_obj::__register()
{
	ArrayExpr_obj _hx_dummy;
	ArrayExpr_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.ArrayExpr",18,10,e8,36);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ArrayExpr_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ArrayExpr_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArrayExpr_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArrayExpr_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
