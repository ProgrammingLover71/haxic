// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif
#ifndef INCLUDED_src_ast_VariableExpr
#include <src/ast/VariableExpr.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_df1eb052d5f1e24e_6_new,"src.ast.VariableExpr","new",0x702cd799,"src.ast.VariableExpr.new","src/ast/VariableExpr.hx",6,0xe80eabb5)
HX_LOCAL_STACK_FRAME(_hx_pos_df1eb052d5f1e24e_12_toString,"src.ast.VariableExpr","toString",0xffd3fad3,"src.ast.VariableExpr.toString","src/ast/VariableExpr.hx",12,0xe80eabb5)
namespace src{
namespace ast{

void VariableExpr_obj::__construct(::String name,int line,int column){
            	HX_STACKFRAME(&_hx_pos_df1eb052d5f1e24e_6_new)
HXLINE(   7)		super::__construct(line,column);
HXLINE(   8)		this->name = name;
            	}

Dynamic VariableExpr_obj::__CreateEmpty() { return new VariableExpr_obj; }

void *VariableExpr_obj::_hx_vtable = 0;

Dynamic VariableExpr_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VariableExpr_obj > _hx_result = new VariableExpr_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool VariableExpr_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24f66a08) {
		if (inClassId<=(int)0x1f0a5d3b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1f0a5d3b;
		} else {
			return inClassId==(int)0x24f66a08;
		}
	} else {
		return inClassId==(int)0x774ec6cf;
	}
}

::String VariableExpr_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_df1eb052d5f1e24e_12_toString)
HXDLIN(  12)		return ((HX_("Var(",81,57,22,39) + this->name) + HX_(")",29,00,00,00));
            	}



VariableExpr_obj::VariableExpr_obj()
{
}

void VariableExpr_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VariableExpr);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_END_CLASS();
}

void VariableExpr_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
}

::hx::Val VariableExpr_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val VariableExpr_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VariableExpr_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo VariableExpr_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(VariableExpr_obj,name),HX_("name",4b,72,ff,48)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *VariableExpr_obj_sStaticStorageInfo = 0;
#endif

static ::String VariableExpr_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class VariableExpr_obj::__mClass;

void VariableExpr_obj::__register()
{
	VariableExpr_obj _hx_dummy;
	VariableExpr_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.VariableExpr",27,17,f9,34);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VariableExpr_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VariableExpr_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VariableExpr_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VariableExpr_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
