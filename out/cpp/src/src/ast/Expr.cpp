// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cec20c7a98468348_5_new,"src.ast.Expr","new",0xede9e73d,"src.ast.Expr.new","src/ast/Expr.hx",5,0xeda96e91)
HX_LOCAL_STACK_FRAME(_hx_pos_cec20c7a98468348_9_toString,"src.ast.Expr","toString",0x81e7b8af,"src.ast.Expr.toString","src/ast/Expr.hx",9,0xeda96e91)
namespace src{
namespace ast{

void Expr_obj::__construct(int line,int column){
            	HX_STACKFRAME(&_hx_pos_cec20c7a98468348_5_new)
HXDLIN(   5)		super::__construct(line,column);
            	}

bool Expr_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f0a5d3b) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1f0a5d3b;
	} else {
		return inClassId==(int)0x24f66a08;
	}
}

::String Expr_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_cec20c7a98468348_9_toString)
HXDLIN(   9)		return HX_("Expr",55,29,f7,2d);
            	}



Expr_obj::Expr_obj()
{
}

::hx::Val Expr_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Expr_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Expr_obj_sStaticStorageInfo = 0;
#endif

static ::String Expr_obj_sMemberFields[] = {
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class Expr_obj::__mClass;

void Expr_obj::__register()
{
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.ast.Expr",cb,84,44,96);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Expr_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Expr_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Expr_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Expr_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace ast
