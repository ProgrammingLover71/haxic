// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_src_Environment
#include <src/Environment.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_91d668d60dd81b93_95_new,"src.Environment","new",0xded7ac9b,"src.Environment.new","src/Interpreter.hx",95,0xb37cc36f)
HX_LOCAL_STACK_FRAME(_hx_pos_91d668d60dd81b93_101_define,"src.Environment","define",0xce31b6e0,"src.Environment.define","src/Interpreter.hx",101,0xb37cc36f)
HX_LOCAL_STACK_FRAME(_hx_pos_91d668d60dd81b93_104_get,"src.Environment","get",0xded25cd1,"src.Environment.get","src/Interpreter.hx",104,0xb37cc36f)
HX_LOCAL_STACK_FRAME(_hx_pos_91d668d60dd81b93_114_assign,"src.Environment","assign",0xb35380d4,"src.Environment.assign","src/Interpreter.hx",114,0xb37cc36f)
HX_LOCAL_STACK_FRAME(_hx_pos_91d668d60dd81b93_126_exists,"src.Environment","exists",0x272d5881,"src.Environment.exists","src/Interpreter.hx",126,0xb37cc36f)
namespace src{

void Environment_obj::__construct( ::src::Environment enclosing){
            	HX_GC_STACKFRAME(&_hx_pos_91d668d60dd81b93_95_new)
HXLINE(  96)		this->values =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  97)		this->enclosing = enclosing;
            	}

Dynamic Environment_obj::__CreateEmpty() { return new Environment_obj; }

void *Environment_obj::_hx_vtable = 0;

Dynamic Environment_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Environment_obj > _hx_result = new Environment_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Environment_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3616764f;
}

void Environment_obj::define(::String name, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_91d668d60dd81b93_101_define)
HXDLIN( 101)		this->values->set(name,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Environment_obj,define,(void))

 ::Dynamic Environment_obj::get(::String name){
            	HX_STACKFRAME(&_hx_pos_91d668d60dd81b93_104_get)
HXLINE( 105)		if (this->values->exists(name)) {
HXLINE( 106)			return this->values->get(name);
            		}
HXLINE( 108)		if (::hx::IsNotNull( this->enclosing )) {
HXLINE( 109)			return this->enclosing->get(name);
            		}
HXLINE( 111)		HX_STACK_DO_THROW(((HX_("Undefined variable '",f3,34,cc,06) + name) + HX_("'",27,00,00,00)));
HXDLIN( 111)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Environment_obj,get,return )

void Environment_obj::assign(::String name, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_91d668d60dd81b93_114_assign)
HXLINE( 115)		if (this->values->exists(name)) {
HXLINE( 116)			this->values->set(name,value);
HXLINE( 117)			return;
            		}
HXLINE( 119)		if (::hx::IsNotNull( this->enclosing )) {
HXLINE( 120)			this->enclosing->assign(name,value);
HXLINE( 121)			return;
            		}
HXLINE( 123)		HX_STACK_DO_THROW(((HX_("Undefined variable '",f3,34,cc,06) + name) + HX_("'",27,00,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Environment_obj,assign,(void))

bool Environment_obj::exists(::String name){
            	HX_STACKFRAME(&_hx_pos_91d668d60dd81b93_126_exists)
HXLINE( 127)		if (this->values->exists(name)) {
HXLINE( 128)			return true;
            		}
HXLINE( 130)		if (::hx::IsNotNull( this->enclosing )) {
HXLINE( 131)			return this->enclosing->exists(name);
            		}
HXLINE( 133)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Environment_obj,exists,return )


::hx::ObjectPtr< Environment_obj > Environment_obj::__new( ::src::Environment enclosing) {
	::hx::ObjectPtr< Environment_obj > __this = new Environment_obj();
	__this->__construct(enclosing);
	return __this;
}

::hx::ObjectPtr< Environment_obj > Environment_obj::__alloc(::hx::Ctx *_hx_ctx, ::src::Environment enclosing) {
	Environment_obj *__this = (Environment_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Environment_obj), true, "src.Environment"));
	*(void **)__this = Environment_obj::_hx_vtable;
	__this->__construct(enclosing);
	return __this;
}

Environment_obj::Environment_obj()
{
}

void Environment_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Environment);
	HX_MARK_MEMBER_NAME(values,"values");
	HX_MARK_MEMBER_NAME(enclosing,"enclosing");
	HX_MARK_END_CLASS();
}

void Environment_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(values,"values");
	HX_VISIT_MEMBER_NAME(enclosing,"enclosing");
}

::hx::Val Environment_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { return ::hx::Val( values ); }
		if (HX_FIELD_EQ(inName,"define") ) { return ::hx::Val( define_dyn() ); }
		if (HX_FIELD_EQ(inName,"assign") ) { return ::hx::Val( assign_dyn() ); }
		if (HX_FIELD_EQ(inName,"exists") ) { return ::hx::Val( exists_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"enclosing") ) { return ::hx::Val( enclosing ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Environment_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { values=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"enclosing") ) { enclosing=inValue.Cast<  ::src::Environment >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Environment_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("values",e2,03,b7,4f));
	outFields->push(HX_("enclosing",ac,55,11,46));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Environment_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Environment_obj,values),HX_("values",e2,03,b7,4f)},
	{::hx::fsObject /*  ::src::Environment */ ,(int)offsetof(Environment_obj,enclosing),HX_("enclosing",ac,55,11,46)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Environment_obj_sStaticStorageInfo = 0;
#endif

static ::String Environment_obj_sMemberFields[] = {
	HX_("values",e2,03,b7,4f),
	HX_("enclosing",ac,55,11,46),
	HX_("define",3b,7c,e4,66),
	HX_("get",96,80,4e,00),
	HX_("assign",2f,46,06,4c),
	HX_("exists",dc,1d,e0,bf),
	::String(null()) };

::hx::Class Environment_obj::__mClass;

void Environment_obj::__register()
{
	Environment_obj _hx_dummy;
	Environment_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.Environment",29,c3,90,f9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Environment_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Environment_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Environment_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Environment_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
