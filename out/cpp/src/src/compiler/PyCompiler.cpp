// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_src_Token
#include <src/Token.h>
#endif
#ifndef INCLUDED_src_ast_ArrayExpr
#include <src/ast/ArrayExpr.h>
#endif
#ifndef INCLUDED_src_ast_BinaryExpr
#include <src/ast/BinaryExpr.h>
#endif
#ifndef INCLUDED_src_ast_BlockStmt
#include <src/ast/BlockStmt.h>
#endif
#ifndef INCLUDED_src_ast_BooleanExpr
#include <src/ast/BooleanExpr.h>
#endif
#ifndef INCLUDED_src_ast_CallExpr
#include <src/ast/CallExpr.h>
#endif
#ifndef INCLUDED_src_ast_Expr
#include <src/ast/Expr.h>
#endif
#ifndef INCLUDED_src_ast_ExprStmt
#include <src/ast/ExprStmt.h>
#endif
#ifndef INCLUDED_src_ast_ForeachStmt
#include <src/ast/ForeachStmt.h>
#endif
#ifndef INCLUDED_src_ast_FunctionExpr
#include <src/ast/FunctionExpr.h>
#endif
#ifndef INCLUDED_src_ast_FunctionStmt
#include <src/ast/FunctionStmt.h>
#endif
#ifndef INCLUDED_src_ast_IfStmt
#include <src/ast/IfStmt.h>
#endif
#ifndef INCLUDED_src_ast_IndexExpr
#include <src/ast/IndexExpr.h>
#endif
#ifndef INCLUDED_src_ast_InputStmt
#include <src/ast/InputStmt.h>
#endif
#ifndef INCLUDED_src_ast_LetStmt
#include <src/ast/LetStmt.h>
#endif
#ifndef INCLUDED_src_ast_MapExpr
#include <src/ast/MapExpr.h>
#endif
#ifndef INCLUDED_src_ast_Node
#include <src/ast/Node.h>
#endif
#ifndef INCLUDED_src_ast_NullExpr
#include <src/ast/NullExpr.h>
#endif
#ifndef INCLUDED_src_ast_NumberExpr
#include <src/ast/NumberExpr.h>
#endif
#ifndef INCLUDED_src_ast_Parameter
#include <src/ast/Parameter.h>
#endif
#ifndef INCLUDED_src_ast_PrintStmt
#include <src/ast/PrintStmt.h>
#endif
#ifndef INCLUDED_src_ast_ReturnStmt
#include <src/ast/ReturnStmt.h>
#endif
#ifndef INCLUDED_src_ast_Stmt
#include <src/ast/Stmt.h>
#endif
#ifndef INCLUDED_src_ast_StringExpr
#include <src/ast/StringExpr.h>
#endif
#ifndef INCLUDED_src_ast_UnaryExpr
#include <src/ast/UnaryExpr.h>
#endif
#ifndef INCLUDED_src_ast_VariableExpr
#include <src/ast/VariableExpr.h>
#endif
#ifndef INCLUDED_src_ast_WhileStmt
#include <src/ast/WhileStmt.h>
#endif
#ifndef INCLUDED_src_compiler_PyCompiler
#include <src/compiler/PyCompiler.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9cec9c5813af1374_11_new,"src.compiler.PyCompiler","new",0x082aa03f,"src.compiler.PyCompiler.new","src/compiler/PyCompiler.hx",11,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_20_new_lambda_id,"src.compiler.PyCompiler","new_lambda_id",0x181c1e13,"src.compiler.PyCompiler.new_lambda_id","src/compiler/PyCompiler.hx",20,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_24_writeHeader,"src.compiler.PyCompiler","writeHeader",0x5401a2ab,"src.compiler.PyCompiler.writeHeader","src/compiler/PyCompiler.hx",24,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_28_writeIndent,"src.compiler.PyCompiler","writeIndent",0xeaf4a58a,"src.compiler.PyCompiler.writeIndent","src/compiler/PyCompiler.hx",28,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_34_write,"src.compiler.PyCompiler","write",0x976b327e,"src.compiler.PyCompiler.write","src/compiler/PyCompiler.hx",34,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_38_write_head,"src.compiler.PyCompiler","write_head",0xd5d349c1,"src.compiler.PyCompiler.write_head","src/compiler/PyCompiler.hx",38,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_42_getCode,"src.compiler.PyCompiler","getCode",0x178d0c42,"src.compiler.PyCompiler.getCode","src/compiler/PyCompiler.hx",42,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_46_visit,"src.compiler.PyCompiler","visit",0xfe193f6a,"src.compiler.PyCompiler.visit","src/compiler/PyCompiler.hx",46,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_52_visitStmt,"src.compiler.PyCompiler","visitStmt",0xfcd356d2,"src.compiler.PyCompiler.visitStmt","src/compiler/PyCompiler.hx",52,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_81_visitExpr,"src.compiler.PyCompiler","visitExpr",0xf39565bf,"src.compiler.PyCompiler.visitExpr","src/compiler/PyCompiler.hx",81,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_110_visitPrintStmt,"src.compiler.PyCompiler","visitPrintStmt",0x5843f04b,"src.compiler.PyCompiler.visitPrintStmt","src/compiler/PyCompiler.hx",110,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_116_visitInputStmt,"src.compiler.PyCompiler","visitInputStmt",0x9e760ea8,"src.compiler.PyCompiler.visitInputStmt","src/compiler/PyCompiler.hx",116,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_125_visitLetStmt,"src.compiler.PyCompiler","visitLetStmt",0xbc1af979,"src.compiler.PyCompiler.visitLetStmt","src/compiler/PyCompiler.hx",125,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_136_visitIfStmt,"src.compiler.PyCompiler","visitIfStmt",0x391747cf,"src.compiler.PyCompiler.visitIfStmt","src/compiler/PyCompiler.hx",136,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_154_visitForeachStmt,"src.compiler.PyCompiler","visitForeachStmt",0x591fc1a8,"src.compiler.PyCompiler.visitForeachStmt","src/compiler/PyCompiler.hx",154,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_165_visitWhileStmt,"src.compiler.PyCompiler","visitWhileStmt",0x712bedcf,"src.compiler.PyCompiler.visitWhileStmt","src/compiler/PyCompiler.hx",165,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_175_visitBlockStmt,"src.compiler.PyCompiler","visitBlockStmt",0xdcda1d6b,"src.compiler.PyCompiler.visitBlockStmt","src/compiler/PyCompiler.hx",175,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_180_visitExprStmt,"src.compiler.PyCompiler","visitExprStmt",0x8b69cba7,"src.compiler.PyCompiler.visitExprStmt","src/compiler/PyCompiler.hx",180,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_185_visitFunctionStmt,"src.compiler.PyCompiler","visitFunctionStmt",0x7b99340a,"src.compiler.PyCompiler.visitFunctionStmt","src/compiler/PyCompiler.hx",185,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_203_visitReturnStmt,"src.compiler.PyCompiler","visitReturnStmt",0xef124322,"src.compiler.PyCompiler.visitReturnStmt","src/compiler/PyCompiler.hx",203,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_209_visitBinaryExpr,"src.compiler.PyCompiler","visitBinaryExpr",0xeb7ee5e0,"src.compiler.PyCompiler.visitBinaryExpr","src/compiler/PyCompiler.hx",209,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_218_visitNumberExpr,"src.compiler.PyCompiler","visitNumberExpr",0x883eb4a8,"src.compiler.PyCompiler.visitNumberExpr","src/compiler/PyCompiler.hx",218,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_222_visitVariableExpr,"src.compiler.PyCompiler","visitVariableExpr",0xac420c1b,"src.compiler.PyCompiler.visitVariableExpr","src/compiler/PyCompiler.hx",222,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_225_visitUnaryExpr,"src.compiler.PyCompiler","visitUnaryExpr",0xb6b5e5ba,"src.compiler.PyCompiler.visitUnaryExpr","src/compiler/PyCompiler.hx",225,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_233_visitStringExpr,"src.compiler.PyCompiler","visitStringExpr",0xfba1fab0,"src.compiler.PyCompiler.visitStringExpr","src/compiler/PyCompiler.hx",233,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_236_visitArrayExpr,"src.compiler.PyCompiler","visitArrayExpr",0x177f3aa4,"src.compiler.PyCompiler.visitArrayExpr","src/compiler/PyCompiler.hx",236,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_247_visitIndexExpr,"src.compiler.PyCompiler","visitIndexExpr",0x8a1b189d,"src.compiler.PyCompiler.visitIndexExpr","src/compiler/PyCompiler.hx",247,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_254_visitCallExpr,"src.compiler.PyCompiler","visitCallExpr",0x45845e7d,"src.compiler.PyCompiler.visitCallExpr","src/compiler/PyCompiler.hx",254,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_267_visitBooleanExpr,"src.compiler.PyCompiler","visitBooleanExpr",0xb1fba4b3,"src.compiler.PyCompiler.visitBooleanExpr","src/compiler/PyCompiler.hx",267,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_271_visitNullExpr,"src.compiler.PyCompiler","visitNullExpr",0xfa5c8ce6,"src.compiler.PyCompiler.visitNullExpr","src/compiler/PyCompiler.hx",271,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_274_visitFunctionExpr,"src.compiler.PyCompiler","visitFunctionExpr",0x725b42f7,"src.compiler.PyCompiler.visitFunctionExpr","src/compiler/PyCompiler.hx",274,0x4c188831)
HX_LOCAL_STACK_FRAME(_hx_pos_9cec9c5813af1374_296_visitMapExpr,"src.compiler.PyCompiler","visitMapExpr",0xf56abba7,"src.compiler.PyCompiler.visitMapExpr","src/compiler/PyCompiler.hx",296,0x4c188831)
namespace src{
namespace compiler{

void PyCompiler_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_11_new)
HXLINE(  12)		this->code = HX_("",00,00,00,00);
HXLINE(  13)		this->head = HX_("",00,00,00,00);
HXLINE(  14)		this->indent = 0;
HXLINE(  15)		this->lambda_idx = 0;
HXLINE(  16)		this->writeHeader();
            	}

Dynamic PyCompiler_obj::__CreateEmpty() { return new PyCompiler_obj; }

void *PyCompiler_obj::_hx_vtable = 0;

Dynamic PyCompiler_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PyCompiler_obj > _hx_result = new PyCompiler_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PyCompiler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x62a735e3;
}

::String PyCompiler_obj::new_lambda_id(){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_20_new_lambda_id)
HXDLIN(  20)		return (HX_("$lambda",2b,e6,c4,29) + this->lambda_idx++);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PyCompiler_obj,new_lambda_id,return )

void PyCompiler_obj::writeHeader(){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_24_writeHeader)
HXDLIN(  24)		this->head = (this->head + HX_("import haxic_std\n\n",e2,f1,7d,b1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PyCompiler_obj,writeHeader,(void))

void PyCompiler_obj::writeIndent(){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_28_writeIndent)
HXDLIN(  28)		int _g = 0;
HXDLIN(  28)		int _g1 = this->indent;
HXDLIN(  28)		while((_g < _g1)){
HXDLIN(  28)			_g = (_g + 1);
HXLINE(  29)			this->write(HX_("\t",09,00,00,00));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PyCompiler_obj,writeIndent,(void))

void PyCompiler_obj::write(::String text){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_34_write)
HXDLIN(  34)		this->code = (this->code + text);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,write,(void))

void PyCompiler_obj::write_head(::String text){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_38_write_head)
HXDLIN(  38)		this->head = (this->head + text);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,write_head,(void))

::String PyCompiler_obj::getCode(){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_42_getCode)
HXDLIN(  42)		return (this->head + this->code);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PyCompiler_obj,getCode,return )

void PyCompiler_obj::visit(::Array< ::Dynamic> ast){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_46_visit)
HXDLIN(  46)		int _g = 0;
HXDLIN(  46)		while((_g < ast->length)){
HXDLIN(  46)			 ::src::ast::Stmt stmt = ast->__get(_g).StaticCast<  ::src::ast::Stmt >();
HXDLIN(  46)			_g = (_g + 1);
HXLINE(  47)			if (::hx::IsNotNull( stmt )) {
HXLINE(  47)				this->visitStmt(stmt);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visit,(void))

void PyCompiler_obj::visitStmt( ::src::ast::Stmt stmt){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_52_visitStmt)
HXLINE(  53)		this->writeIndent();
HXLINE(  54)		if (::Std_obj::isOfType(stmt,::hx::ClassOf< ::src::ast::PrintStmt >())) {
HXLINE(  55)			this->visitPrintStmt(( ( ::src::ast::PrintStmt)(stmt) ));
            		}
            		else {
HXLINE(  56)			if (::Std_obj::isOfType(stmt,::hx::ClassOf< ::src::ast::InputStmt >())) {
HXLINE(  57)				this->visitInputStmt(( ( ::src::ast::InputStmt)(stmt) ));
            			}
            			else {
HXLINE(  58)				if (::Std_obj::isOfType(stmt,::hx::ClassOf< ::src::ast::LetStmt >())) {
HXLINE(  59)					this->visitLetStmt(( ( ::src::ast::LetStmt)(stmt) ));
            				}
            				else {
HXLINE(  60)					if (::Std_obj::isOfType(stmt,::hx::ClassOf< ::src::ast::IfStmt >())) {
HXLINE(  61)						this->visitIfStmt(( ( ::src::ast::IfStmt)(stmt) ));
            					}
            					else {
HXLINE(  62)						if (::Std_obj::isOfType(stmt,::hx::ClassOf< ::src::ast::BlockStmt >())) {
HXLINE(  63)							this->visitBlockStmt(( ( ::src::ast::BlockStmt)(stmt) ));
            						}
            						else {
HXLINE(  64)							if (::Std_obj::isOfType(stmt,::hx::ClassOf< ::src::ast::ExprStmt >())) {
HXLINE(  65)								this->visitExprStmt(( ( ::src::ast::ExprStmt)(stmt) ));
            							}
            							else {
HXLINE(  66)								if (::Std_obj::isOfType(stmt,::hx::ClassOf< ::src::ast::WhileStmt >())) {
HXLINE(  67)									this->visitWhileStmt(( ( ::src::ast::WhileStmt)(stmt) ));
            								}
            								else {
HXLINE(  68)									if (::Std_obj::isOfType(stmt,::hx::ClassOf< ::src::ast::ForeachStmt >())) {
HXLINE(  69)										this->visitForeachStmt(( ( ::src::ast::ForeachStmt)(stmt) ));
            									}
            									else {
HXLINE(  70)										if (::Std_obj::isOfType(stmt,::hx::ClassOf< ::src::ast::ReturnStmt >())) {
HXLINE(  71)											this->visitReturnStmt(( ( ::src::ast::ReturnStmt)(stmt) ));
            										}
            										else {
HXLINE(  72)											if (::Std_obj::isOfType(stmt,::hx::ClassOf< ::src::ast::FunctionStmt >())) {
HXLINE(  73)												this->visitFunctionStmt(( ( ::src::ast::FunctionStmt)(stmt) ));
            											}
            											else {
HXLINE(  75)												HX_STACK_DO_THROW((HX_("Unknown statement type: ",27,79,2e,4f) + ::Std_obj::string(stmt)));
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitStmt,(void))

void PyCompiler_obj::visitExpr( ::src::ast::Expr expr){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_81_visitExpr)
HXDLIN(  81)		if (::Std_obj::isOfType(expr,::hx::ClassOf< ::src::ast::BinaryExpr >())) {
HXLINE(  82)			this->visitBinaryExpr(( ( ::src::ast::BinaryExpr)(expr) ));
            		}
            		else {
HXLINE(  83)			if (::Std_obj::isOfType(expr,::hx::ClassOf< ::src::ast::NumberExpr >())) {
HXLINE(  84)				this->visitNumberExpr(( ( ::src::ast::NumberExpr)(expr) ));
            			}
            			else {
HXLINE(  85)				if (::Std_obj::isOfType(expr,::hx::ClassOf< ::src::ast::VariableExpr >())) {
HXLINE(  86)					this->visitVariableExpr(( ( ::src::ast::VariableExpr)(expr) ));
            				}
            				else {
HXLINE(  87)					if (::Std_obj::isOfType(expr,::hx::ClassOf< ::src::ast::UnaryExpr >())) {
HXLINE(  88)						this->visitUnaryExpr(( ( ::src::ast::UnaryExpr)(expr) ));
            					}
            					else {
HXLINE(  89)						if (::Std_obj::isOfType(expr,::hx::ClassOf< ::src::ast::StringExpr >())) {
HXLINE(  90)							this->visitStringExpr(( ( ::src::ast::StringExpr)(expr) ));
            						}
            						else {
HXLINE(  91)							if (::Std_obj::isOfType(expr,::hx::ClassOf< ::src::ast::CallExpr >())) {
HXLINE(  92)								this->visitCallExpr(( ( ::src::ast::CallExpr)(expr) ));
            							}
            							else {
HXLINE(  93)								if (::Std_obj::isOfType(expr,::hx::ClassOf< ::src::ast::BooleanExpr >())) {
HXLINE(  94)									this->visitBooleanExpr(( ( ::src::ast::BooleanExpr)(expr) ));
            								}
            								else {
HXLINE(  95)									if (::Std_obj::isOfType(expr,::hx::ClassOf< ::src::ast::NullExpr >())) {
HXLINE(  96)										this->visitNullExpr(( ( ::src::ast::NullExpr)(expr) ));
            									}
            									else {
HXLINE(  97)										if (::Std_obj::isOfType(expr,::hx::ClassOf< ::src::ast::ArrayExpr >())) {
HXLINE(  98)											this->visitArrayExpr(( ( ::src::ast::ArrayExpr)(expr) ));
            										}
            										else {
HXLINE(  99)											if (::Std_obj::isOfType(expr,::hx::ClassOf< ::src::ast::IndexExpr >())) {
HXLINE( 100)												this->visitIndexExpr(( ( ::src::ast::IndexExpr)(expr) ));
            											}
            											else {
HXLINE( 101)												if (::Std_obj::isOfType(expr,::hx::ClassOf< ::src::ast::MapExpr >())) {
HXLINE( 102)													this->visitMapExpr(( ( ::src::ast::MapExpr)(expr) ));
            												}
            												else {
HXLINE( 103)													if (::Std_obj::isOfType(expr,::hx::ClassOf< ::src::ast::FunctionExpr >())) {
HXLINE( 104)														this->visitFunctionExpr(( ( ::src::ast::FunctionExpr)(expr) ));
            													}
            													else {
HXLINE( 106)														HX_STACK_DO_THROW((HX_("Unknown expression type: ",32,bb,51,d7) + ::Std_obj::string(expr)));
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitExpr,(void))

void PyCompiler_obj::visitPrintStmt( ::src::ast::PrintStmt stmt){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_110_visitPrintStmt)
HXLINE( 111)		this->write(HX_("print(",5b,cf,61,b1));
HXLINE( 112)		this->visitExpr(stmt->expr);
HXLINE( 113)		this->write(HX_(")\n",c1,23,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitPrintStmt,(void))

void PyCompiler_obj::visitInputStmt( ::src::ast::InputStmt stmt){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_116_visitInputStmt)
HXLINE( 117)		this->visitVariableExpr(stmt->target);
HXLINE( 118)		this->write(HX_(" = input()\ntry: ",df,94,29,1f));
HXLINE( 119)		this->visitVariableExpr(stmt->target);
HXLINE( 120)		this->write(HX_(" = float(",af,4c,37,73));
HXLINE( 121)		this->visitVariableExpr(stmt->target);
HXLINE( 122)		this->write(HX_(")\nexcept ValueError: pass\n",d6,5b,b8,ac));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitInputStmt,(void))

void PyCompiler_obj::visitLetStmt( ::src::ast::LetStmt stmt){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_125_visitLetStmt)
HXLINE( 127)		{
HXLINE( 127)			int _g = 0;
HXDLIN( 127)			::Array< ::Dynamic> _g1 = stmt->bindings;
HXDLIN( 127)			while((_g < _g1->length)){
HXLINE( 127)				 ::src::ast::VariableExpr bind = _g1->__get(_g).StaticCast<  ::src::ast::VariableExpr >();
HXDLIN( 127)				_g = (_g + 1);
HXLINE( 128)				this->visitVariableExpr(bind);
HXLINE( 129)				if ((0 < (stmt->bindings->length - 1))) {
HXLINE( 129)					this->write(HX_(", ",74,26,00,00));
            				}
            			}
            		}
HXLINE( 131)		this->write(HX_(" = ",63,7d,18,00));
HXLINE( 132)		this->visitExpr(stmt->value);
HXLINE( 133)		this->write(HX_("\n",0a,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitLetStmt,(void))

void PyCompiler_obj::visitIfStmt( ::src::ast::IfStmt stmt){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_136_visitIfStmt)
HXLINE( 137)		this->write(HX_("if ",a3,05,50,00));
HXLINE( 138)		this->visitExpr(stmt->condition);
HXLINE( 139)		this->write(HX_(":\n",90,32,00,00));
HXLINE( 141)		this->indent++;
HXLINE( 142)		this->visitStmt(stmt->thenBranch);
HXLINE( 143)		this->indent--;
HXLINE( 145)		if (::hx::IsNotNull( stmt->elseBranch )) {
HXLINE( 146)			this->writeIndent();
HXLINE( 147)			this->write(HX_("else:",61,3d,33,6f));
HXLINE( 148)			this->indent++;
HXLINE( 149)			this->visitStmt(stmt->elseBranch);
HXLINE( 150)			this->indent--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitIfStmt,(void))

void PyCompiler_obj::visitForeachStmt( ::src::ast::ForeachStmt stmt){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_154_visitForeachStmt)
HXLINE( 155)		this->write(HX_("for ",f7,60,c0,43));
HXLINE( 156)		this->visitVariableExpr(stmt->variable);
HXLINE( 157)		this->write(HX_(" in ",7b,e0,76,15));
HXLINE( 158)		this->visitExpr(stmt->target);
HXLINE( 159)		this->write(HX_(":\n",90,32,00,00));
HXLINE( 160)		this->indent++;
HXLINE( 161)		this->visitStmt(stmt->body);
HXLINE( 162)		this->indent--;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitForeachStmt,(void))

void PyCompiler_obj::visitWhileStmt( ::src::ast::WhileStmt stmt){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_165_visitWhileStmt)
HXLINE( 166)		this->write(HX_("while ",4f,f7,dd,bb));
HXLINE( 167)		this->visitExpr(stmt->condition);
HXLINE( 168)		this->write(HX_(":\n",90,32,00,00));
HXLINE( 169)		this->indent++;
HXLINE( 170)		this->visitStmt(stmt->body);
HXLINE( 171)		this->indent--;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitWhileStmt,(void))

void PyCompiler_obj::visitBlockStmt( ::src::ast::BlockStmt stmt){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_175_visitBlockStmt)
HXDLIN( 175)		int _g = 0;
HXDLIN( 175)		::Array< ::Dynamic> _g1 = stmt->statements;
HXDLIN( 175)		while((_g < _g1->length)){
HXDLIN( 175)			 ::src::ast::Stmt st = _g1->__get(_g).StaticCast<  ::src::ast::Stmt >();
HXDLIN( 175)			_g = (_g + 1);
HXLINE( 176)			this->visitStmt(st);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitBlockStmt,(void))

void PyCompiler_obj::visitExprStmt( ::src::ast::ExprStmt stmt){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_180_visitExprStmt)
HXLINE( 181)		this->visitExpr(stmt->expr);
HXLINE( 182)		this->write(HX_("\n",0a,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitExprStmt,(void))

void PyCompiler_obj::visitFunctionStmt( ::src::ast::FunctionStmt stmt){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_185_visitFunctionStmt)
HXLINE( 186)		this->write(((HX_("def ",bb,52,66,42) + stmt->name) + HX_("(",28,00,00,00)));
HXLINE( 189)		{
HXLINE( 189)			int _g = 0;
HXDLIN( 189)			::Array< ::Dynamic> _g1 = stmt->params;
HXDLIN( 189)			while((_g < _g1->length)){
HXLINE( 189)				 ::src::ast::Parameter param = _g1->__get(_g).StaticCast<  ::src::ast::Parameter >();
HXDLIN( 189)				_g = (_g + 1);
HXLINE( 190)				this->write(param->name);
HXLINE( 191)				if (::hx::IsNotNull( param->defaultValue )) {
HXLINE( 192)					this->write(HX_(" = ",63,7d,18,00));
HXLINE( 193)					this->visitExpr(param->defaultValue);
            				}
HXLINE( 195)				if ((0 < stmt->params->length)) {
HXLINE( 195)					this->write(HX_(", ",74,26,00,00));
            				}
            			}
            		}
HXLINE( 197)		this->write(HX_("):\n",f9,4e,1f,00));
HXLINE( 198)		this->indent++;
HXLINE( 199)		this->visitStmt(stmt->body);
HXLINE( 200)		this->indent--;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitFunctionStmt,(void))

void PyCompiler_obj::visitReturnStmt( ::src::ast::ReturnStmt stmt){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_203_visitReturnStmt)
HXLINE( 204)		this->write(HX_("return ",70,75,c2,fe));
HXLINE( 205)		this->visitExpr(stmt->value);
HXLINE( 206)		this->write(HX_("\n",0a,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitReturnStmt,(void))

void PyCompiler_obj::visitBinaryExpr( ::src::ast::BinaryExpr expr){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_209_visitBinaryExpr)
HXLINE( 210)		this->write(HX_("(",28,00,00,00));
HXLINE( 211)		this->visitExpr(expr->left);
HXLINE( 212)		::String _hx_tmp;
HXDLIN( 212)		if (::hx::IsNull( expr->oper->value )) {
HXLINE( 212)			_hx_tmp = HX_("null",87,9e,0e,49);
            		}
            		else {
HXLINE( 212)			_hx_tmp = ::Std_obj::string(expr->oper->value);
            		}
HXDLIN( 212)		this->write(((HX_(" ",20,00,00,00) + _hx_tmp) + HX_(" ",20,00,00,00)));
HXLINE( 213)		this->visitExpr(expr->right);
HXLINE( 214)		this->write(HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitBinaryExpr,(void))

void PyCompiler_obj::visitNumberExpr( ::src::ast::NumberExpr expr){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_218_visitNumberExpr)
HXDLIN( 218)		this->write(::Std_obj::string(expr->value));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitNumberExpr,(void))

void PyCompiler_obj::visitVariableExpr( ::src::ast::VariableExpr expr){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_222_visitVariableExpr)
HXDLIN( 222)		this->write(expr->name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitVariableExpr,(void))

void PyCompiler_obj::visitUnaryExpr( ::src::ast::UnaryExpr expr){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_225_visitUnaryExpr)
HXLINE( 226)		this->write(HX_("(",28,00,00,00));
HXLINE( 227)		::String _hx_tmp;
HXDLIN( 227)		if (::hx::IsNull( expr->oper->value )) {
HXLINE( 227)			_hx_tmp = HX_("null",87,9e,0e,49);
            		}
            		else {
HXLINE( 227)			_hx_tmp = ::Std_obj::string(expr->oper->value);
            		}
HXDLIN( 227)		this->write(_hx_tmp);
HXLINE( 228)		this->visitExpr(expr->right);
HXLINE( 229)		this->write(HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitUnaryExpr,(void))

void PyCompiler_obj::visitStringExpr( ::src::ast::StringExpr expr){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_233_visitStringExpr)
HXDLIN( 233)		this->write(((HX_("\"",22,00,00,00) + expr->value) + HX_("\"",22,00,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitStringExpr,(void))

void PyCompiler_obj::visitArrayExpr( ::src::ast::ArrayExpr expr){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_236_visitArrayExpr)
HXLINE( 237)		this->write(HX_("[",5b,00,00,00));
HXLINE( 240)		{
HXLINE( 240)			int _g = 0;
HXDLIN( 240)			::Array< ::Dynamic> _g1 = expr->elements;
HXDLIN( 240)			while((_g < _g1->length)){
HXLINE( 240)				 ::src::ast::Expr value = _g1->__get(_g).StaticCast<  ::src::ast::Expr >();
HXDLIN( 240)				_g = (_g + 1);
HXLINE( 241)				this->visitExpr(value);
HXLINE( 242)				if ((0 < (expr->elements->length - 1))) {
HXLINE( 242)					this->write(HX_(", ",74,26,00,00));
            				}
            			}
            		}
HXLINE( 244)		this->write(HX_("]",5d,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitArrayExpr,(void))

void PyCompiler_obj::visitIndexExpr( ::src::ast::IndexExpr expr){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_247_visitIndexExpr)
HXLINE( 248)		this->visitExpr(expr->target);
HXLINE( 249)		this->write(HX_("[",5b,00,00,00));
HXLINE( 250)		this->visitExpr(expr->index);
HXLINE( 251)		this->write(HX_("]",5d,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitIndexExpr,(void))

void PyCompiler_obj::visitCallExpr( ::src::ast::CallExpr expr){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_254_visitCallExpr)
HXLINE( 255)		this->visitExpr(expr->callee);
HXLINE( 256)		this->write(HX_("(",28,00,00,00));
HXLINE( 259)		{
HXLINE( 259)			int _g = 0;
HXDLIN( 259)			::Array< ::Dynamic> _g1 = expr->arguments;
HXDLIN( 259)			while((_g < _g1->length)){
HXLINE( 259)				 ::src::ast::Expr value = _g1->__get(_g).StaticCast<  ::src::ast::Expr >();
HXDLIN( 259)				_g = (_g + 1);
HXLINE( 260)				this->visitExpr(value);
HXLINE( 261)				if ((0 < (expr->arguments->length - 1))) {
HXLINE( 261)					this->write(HX_(", ",74,26,00,00));
            				}
            			}
            		}
HXLINE( 263)		this->write(HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitCallExpr,(void))

void PyCompiler_obj::visitBooleanExpr( ::src::ast::BooleanExpr expr){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_267_visitBooleanExpr)
HXDLIN( 267)		::String _hx_tmp;
HXDLIN( 267)		if (expr->value) {
HXDLIN( 267)			_hx_tmp = HX_("True",6e,d3,dc,37);
            		}
            		else {
HXDLIN( 267)			_hx_tmp = HX_("False",83,a5,7c,8e);
            		}
HXDLIN( 267)		this->write(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitBooleanExpr,(void))

void PyCompiler_obj::visitNullExpr( ::src::ast::NullExpr expr){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_271_visitNullExpr)
HXDLIN( 271)		this->write(HX_("None",d8,3e,e3,33));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitNullExpr,(void))

void PyCompiler_obj::visitFunctionExpr( ::src::ast::FunctionExpr expr){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_274_visitFunctionExpr)
HXLINE( 275)		::String l_id = this->new_lambda_id();
HXLINE( 277)		this->write_head(((HX_("def ",bb,52,66,42) + l_id) + HX_("(",28,00,00,00)));
HXLINE( 280)		{
HXLINE( 280)			int _g = 0;
HXDLIN( 280)			::Array< ::Dynamic> _g1 = expr->params;
HXDLIN( 280)			while((_g < _g1->length)){
HXLINE( 280)				 ::src::ast::Parameter param = _g1->__get(_g).StaticCast<  ::src::ast::Parameter >();
HXDLIN( 280)				_g = (_g + 1);
HXLINE( 281)				this->write_head(param->name);
HXLINE( 282)				if (::hx::IsNotNull( param->defaultValue )) {
HXLINE( 283)					this->write_head(HX_(" = ",63,7d,18,00));
HXLINE( 284)					this->visitExpr(param->defaultValue);
            				}
HXLINE( 286)				if ((0 < expr->params->length)) {
HXLINE( 286)					this->write_head(HX_(", ",74,26,00,00));
            				}
            			}
            		}
HXLINE( 288)		this->write_head(HX_("):\n",f9,4e,1f,00));
HXLINE( 289)		this->indent++;
HXLINE( 290)		this->visitStmt(expr->body);
HXLINE( 291)		this->indent--;
HXLINE( 292)		this->write_head(HX_("\n",0a,00,00,00));
HXLINE( 293)		this->write(l_id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitFunctionExpr,(void))

void PyCompiler_obj::visitMapExpr( ::src::ast::MapExpr expr){
            	HX_STACKFRAME(&_hx_pos_9cec9c5813af1374_296_visitMapExpr)
HXLINE( 297)		this->write(HX_("{",7b,00,00,00));
HXLINE( 299)		{
HXLINE( 299)			int _g = 0;
HXDLIN( 299)			::Array< ::Dynamic> _g1 = expr->pairs;
HXDLIN( 299)			while((_g < _g1->length)){
HXLINE( 299)				 ::Dynamic pair = _g1->__get(_g);
HXDLIN( 299)				_g = (_g + 1);
HXLINE( 300)				this->write(( (::String)((pair->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic) + HX_(": ",a6,32,00,00))) ));
HXLINE( 301)				this->visitExpr(( ( ::src::ast::Expr)(pair->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) ));
HXLINE( 302)				if ((0 < (expr->pairs->length - 1))) {
HXLINE( 302)					this->write(HX_(", ",74,26,00,00));
            				}
            			}
            		}
HXLINE( 304)		this->write(HX_("}",7d,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PyCompiler_obj,visitMapExpr,(void))


::hx::ObjectPtr< PyCompiler_obj > PyCompiler_obj::__new() {
	::hx::ObjectPtr< PyCompiler_obj > __this = new PyCompiler_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< PyCompiler_obj > PyCompiler_obj::__alloc(::hx::Ctx *_hx_ctx) {
	PyCompiler_obj *__this = (PyCompiler_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PyCompiler_obj), true, "src.compiler.PyCompiler"));
	*(void **)__this = PyCompiler_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

PyCompiler_obj::PyCompiler_obj()
{
}

void PyCompiler_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PyCompiler);
	HX_MARK_MEMBER_NAME(code,"code");
	HX_MARK_MEMBER_NAME(head,"head");
	HX_MARK_MEMBER_NAME(indent,"indent");
	HX_MARK_MEMBER_NAME(lambda_idx,"lambda_idx");
	HX_MARK_END_CLASS();
}

void PyCompiler_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(code,"code");
	HX_VISIT_MEMBER_NAME(head,"head");
	HX_VISIT_MEMBER_NAME(indent,"indent");
	HX_VISIT_MEMBER_NAME(lambda_idx,"lambda_idx");
}

::hx::Val PyCompiler_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { return ::hx::Val( code ); }
		if (HX_FIELD_EQ(inName,"head") ) { return ::hx::Val( head ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"write") ) { return ::hx::Val( write_dyn() ); }
		if (HX_FIELD_EQ(inName,"visit") ) { return ::hx::Val( visit_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"indent") ) { return ::hx::Val( indent ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getCode") ) { return ::hx::Val( getCode_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"visitStmt") ) { return ::hx::Val( visitStmt_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitExpr") ) { return ::hx::Val( visitExpr_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lambda_idx") ) { return ::hx::Val( lambda_idx ); }
		if (HX_FIELD_EQ(inName,"write_head") ) { return ::hx::Val( write_head_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"writeHeader") ) { return ::hx::Val( writeHeader_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeIndent") ) { return ::hx::Val( writeIndent_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitIfStmt") ) { return ::hx::Val( visitIfStmt_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"visitLetStmt") ) { return ::hx::Val( visitLetStmt_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitMapExpr") ) { return ::hx::Val( visitMapExpr_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"new_lambda_id") ) { return ::hx::Val( new_lambda_id_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitExprStmt") ) { return ::hx::Val( visitExprStmt_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitCallExpr") ) { return ::hx::Val( visitCallExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitNullExpr") ) { return ::hx::Val( visitNullExpr_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"visitPrintStmt") ) { return ::hx::Val( visitPrintStmt_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitInputStmt") ) { return ::hx::Val( visitInputStmt_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitWhileStmt") ) { return ::hx::Val( visitWhileStmt_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitBlockStmt") ) { return ::hx::Val( visitBlockStmt_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitUnaryExpr") ) { return ::hx::Val( visitUnaryExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitArrayExpr") ) { return ::hx::Val( visitArrayExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitIndexExpr") ) { return ::hx::Val( visitIndexExpr_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"visitReturnStmt") ) { return ::hx::Val( visitReturnStmt_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitBinaryExpr") ) { return ::hx::Val( visitBinaryExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitNumberExpr") ) { return ::hx::Val( visitNumberExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitStringExpr") ) { return ::hx::Val( visitStringExpr_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"visitForeachStmt") ) { return ::hx::Val( visitForeachStmt_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitBooleanExpr") ) { return ::hx::Val( visitBooleanExpr_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"visitFunctionStmt") ) { return ::hx::Val( visitFunctionStmt_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitVariableExpr") ) { return ::hx::Val( visitVariableExpr_dyn() ); }
		if (HX_FIELD_EQ(inName,"visitFunctionExpr") ) { return ::hx::Val( visitFunctionExpr_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PyCompiler_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { code=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"head") ) { head=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"indent") ) { indent=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lambda_idx") ) { lambda_idx=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PyCompiler_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("code",2d,b1,c4,41));
	outFields->push(HX_("head",20,29,0b,45));
	outFields->push(HX_("indent",6c,0c,f3,93));
	outFields->push(HX_("lambda_idx",c5,0b,3f,67));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PyCompiler_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(PyCompiler_obj,code),HX_("code",2d,b1,c4,41)},
	{::hx::fsString,(int)offsetof(PyCompiler_obj,head),HX_("head",20,29,0b,45)},
	{::hx::fsInt,(int)offsetof(PyCompiler_obj,indent),HX_("indent",6c,0c,f3,93)},
	{::hx::fsInt,(int)offsetof(PyCompiler_obj,lambda_idx),HX_("lambda_idx",c5,0b,3f,67)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PyCompiler_obj_sStaticStorageInfo = 0;
#endif

static ::String PyCompiler_obj_sMemberFields[] = {
	HX_("code",2d,b1,c4,41),
	HX_("head",20,29,0b,45),
	HX_("indent",6c,0c,f3,93),
	HX_("lambda_idx",c5,0b,3f,67),
	HX_("new_lambda_id",74,21,4d,8e),
	HX_("writeHeader",cc,5b,f9,91),
	HX_("writeIndent",ab,5e,ec,28),
	HX_("write",df,6c,59,d0),
	HX_("write_head",c0,cf,b0,f9),
	HX_("getCode",e3,60,47,14),
	HX_("visit",cb,79,07,37),
	HX_("visitStmt",b3,d5,44,5c),
	HX_("visitExpr",a0,e4,06,53),
	HX_("visitPrintStmt",ca,e1,f5,4c),
	HX_("visitInputStmt",27,00,28,93),
	HX_("visitLetStmt",38,3d,e5,b6),
	HX_("visitIfStmt",f0,00,0f,77),
	HX_("visitForeachStmt",e7,50,50,53),
	HX_("visitWhileStmt",4e,df,dd,65),
	HX_("visitBlockStmt",ea,0e,8c,d1),
	HX_("visitExprStmt",08,cf,9a,01),
	HX_("visitFunctionStmt",eb,fb,e5,6b),
	HX_("visitReturnStmt",c3,a0,13,16),
	HX_("visitBinaryExpr",81,43,80,12),
	HX_("visitNumberExpr",49,12,40,af),
	HX_("visitVariableExpr",fc,d3,8e,9c),
	HX_("visitUnaryExpr",39,d7,67,ab),
	HX_("visitStringExpr",51,58,a3,22),
	HX_("visitArrayExpr",23,2c,31,0c),
	HX_("visitIndexExpr",1c,0a,cd,7e),
	HX_("visitCallExpr",de,61,b5,bb),
	HX_("visitBooleanExpr",f2,33,2c,ac),
	HX_("visitNullExpr",47,90,8d,70),
	HX_("visitFunctionExpr",d8,0a,a8,62),
	HX_("visitMapExpr",66,ff,34,f0),
	::String(null()) };

::hx::Class PyCompiler_obj::__mClass;

void PyCompiler_obj::__register()
{
	PyCompiler_obj _hx_dummy;
	PyCompiler_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("src.compiler.PyCompiler",cd,14,b0,c4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PyCompiler_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PyCompiler_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PyCompiler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PyCompiler_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace src
} // end namespace compiler
