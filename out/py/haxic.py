# Generated by Haxe 4.3.7
# coding: utf-8
import sys

import math as python_lib_Math
import math as Math
import inspect as python_lib_Inspect
import sys as python_lib_Sys
import builtins as python_lib_Builtins
import functools as python_lib_Functools
import re as python_lib_Re
import subprocess as python_lib_Subprocess
import time as python_lib_Time
import traceback as python_lib_Traceback
from io import StringIO as python_lib_io_StringIO


class _hx_AnonObject:
    _hx_disable_getattr = False
    def __init__(self, fields):
        self.__dict__ = fields
    def __repr__(self):
        return repr(self.__dict__)
    def __contains__(self, item):
        return item in self.__dict__
    def __getitem__(self, item):
        return self.__dict__[item]
    def __getattr__(self, name):
        if (self._hx_disable_getattr):
            raise AttributeError('field does not exist')
        else:
            return None
    def _hx_hasattr(self,field):
        self._hx_disable_getattr = True
        try:
            getattr(self, field)
            self._hx_disable_getattr = False
            return True
        except AttributeError:
            self._hx_disable_getattr = False
            return False



class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            return self.tag + '(' + (', '.join(str(v) for v in self.params)) + ')'

Enum._hx_class = Enum


class Class: pass


class EReg:
    _hx_class_name = "EReg"
    __slots__ = ("pattern", "matchObj", "_hx_global")
    _hx_fields = ["pattern", "matchObj", "global"]

    def __init__(self,r,opt):
        self.matchObj = None
        self._hx_global = False
        options = 0
        _g = 0
        _g1 = len(opt)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            c = (-1 if ((i >= len(opt))) else ord(opt[i]))
            if (c == 109):
                options = (options | python_lib_Re.M)
            if (c == 105):
                options = (options | python_lib_Re.I)
            if (c == 115):
                options = (options | python_lib_Re.S)
            if (c == 117):
                options = (options | python_lib_Re.U)
            if (c == 103):
                self._hx_global = True
        self.pattern = python_lib_Re.compile(r,options)

EReg._hx_class = EReg


class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field"]

    @staticmethod
    def field(o,field):
        return python_Boot.field(o,field)
Reflect._hx_class = Reflect


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["isOfType", "string", "shortenPossibleNumber", "parseFloat"]

    @staticmethod
    def isOfType(v,t):
        if ((v is None) and ((t is None))):
            return False
        if (t is None):
            return False
        if ((type(t) == type) and (t == Dynamic)):
            return (v is not None)
        isBool = isinstance(v,bool)
        if (((type(t) == type) and (t == Bool)) and isBool):
            return True
        if ((((not isBool) and (not ((type(t) == type) and (t == Bool)))) and ((type(t) == type) and (t == Int))) and isinstance(v,int)):
            return True
        vIsFloat = isinstance(v,float)
        tmp = None
        tmp1 = None
        if (((not isBool) and vIsFloat) and ((type(t) == type) and (t == Int))):
            f = v
            tmp1 = (((f != Math.POSITIVE_INFINITY) and ((f != Math.NEGATIVE_INFINITY))) and (not python_lib_Math.isnan(f)))
        else:
            tmp1 = False
        if tmp1:
            tmp1 = None
            try:
                tmp1 = int(v)
            except BaseException as _g:
                None
                tmp1 = None
            tmp = (v == tmp1)
        else:
            tmp = False
        if ((tmp and ((v <= 2147483647))) and ((v >= -2147483648))):
            return True
        if (((not isBool) and ((type(t) == type) and (t == Float))) and isinstance(v,(float, int))):
            return True
        if ((type(t) == type) and (t == str)):
            return isinstance(v,str)
        isEnumType = ((type(t) == type) and (t == Enum))
        if ((isEnumType and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_constructs")):
            return True
        if isEnumType:
            return False
        isClassType = ((type(t) == type) and (t == Class))
        if ((((isClassType and (not isinstance(v,Enum))) and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_class_name")) and (not hasattr(v,"_hx_constructs"))):
            return True
        if isClassType:
            return False
        tmp = None
        try:
            tmp = isinstance(v,t)
        except BaseException as _g:
            None
            tmp = False
        if tmp:
            return True
        if python_lib_Inspect.isclass(t):
            cls = t
            loop = None
            def _hx_local_1(intf):
                f = (intf._hx_interfaces if (hasattr(intf,"_hx_interfaces")) else [])
                if (f is not None):
                    _g = 0
                    while (_g < len(f)):
                        i = (f[_g] if _g >= 0 and _g < len(f) else None)
                        _g = (_g + 1)
                        if (i == cls):
                            return True
                        else:
                            l = loop(i)
                            if l:
                                return True
                    return False
                else:
                    return False
            loop = _hx_local_1
            currentClass = v.__class__
            result = False
            while (currentClass is not None):
                if loop(currentClass):
                    result = True
                    break
                currentClass = python_Boot.getSuperClass(currentClass)
            return result
        else:
            return False

    @staticmethod
    def string(s):
        return python_Boot.toString1(s,"")

    @staticmethod
    def shortenPossibleNumber(x):
        r = ""
        _g = 0
        _g1 = len(x)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            c = ("" if (((i < 0) or ((i >= len(x))))) else x[i])
            _g2 = HxString.charCodeAt(c,0)
            if (_g2 is None):
                break
            else:
                _g3 = _g2
                if (((((((((((_g3 == 57) or ((_g3 == 56))) or ((_g3 == 55))) or ((_g3 == 54))) or ((_g3 == 53))) or ((_g3 == 52))) or ((_g3 == 51))) or ((_g3 == 50))) or ((_g3 == 49))) or ((_g3 == 48))) or ((_g3 == 46))):
                    r = (("null" if r is None else r) + ("null" if c is None else c))
                else:
                    break
        return r

    @staticmethod
    def parseFloat(x):
        try:
            return float(x)
        except BaseException as _g:
            None
            if (x is not None):
                r1 = Std.shortenPossibleNumber(x)
                if (r1 != x):
                    return Std.parseFloat(r1)
            return Math.NaN
Std._hx_class = Std


class Float: pass


class Int: pass


class Bool: pass


class Dynamic: pass


class StringBuf:
    _hx_class_name = "StringBuf"
    __slots__ = ("b",)
    _hx_fields = ["b"]

    def __init__(self):
        self.b = python_lib_io_StringIO()

StringBuf._hx_class = StringBuf


class Sys:
    _hx_class_name = "Sys"
    __slots__ = ()
    _hx_statics = ["args", "systemName", "command", "stdin", "stdout"]

    @staticmethod
    def args():
        argv = python_lib_Sys.argv
        return argv[1:None]

    @staticmethod
    def systemName():
        _g = python_lib_Sys.platform
        x = _g
        if x.startswith("linux"):
            return "Linux"
        else:
            _g1 = _g
            _hx_local_0 = len(_g1)
            if (_hx_local_0 == 5):
                if (_g1 == "win32"):
                    return "Windows"
                else:
                    raise haxe_Exception.thrown("not supported platform")
            elif (_hx_local_0 == 6):
                if (_g1 == "cygwin"):
                    return "Windows"
                elif (_g1 == "darwin"):
                    return "Mac"
                else:
                    raise haxe_Exception.thrown("not supported platform")
            else:
                raise haxe_Exception.thrown("not supported platform")

    @staticmethod
    def command(cmd,args = None):
        if (args is None):
            return python_lib_Subprocess.call(cmd,**python__KwArgs_KwArgs_Impl_.fromT(_hx_AnonObject({'shell': True})))
        else:
            return python_lib_Subprocess.call(([cmd] + args))

    @staticmethod
    def stdin():
        return python_io_IoTools.createFileInputFromText(python_lib_Sys.stdin)

    @staticmethod
    def stdout():
        return python_io_IoTools.createFileOutputFromText(python_lib_Sys.stdout)
Sys._hx_class = Sys


class Type:
    _hx_class_name = "Type"
    __slots__ = ()
    _hx_statics = ["getClass", "getClassName"]

    @staticmethod
    def getClass(o):
        if (o is None):
            return None
        o1 = o
        if ((o1 is not None) and ((HxOverrides.eq(o1,str) or python_lib_Inspect.isclass(o1)))):
            return None
        if isinstance(o,_hx_AnonObject):
            return None
        if hasattr(o,"_hx_class"):
            return o._hx_class
        if hasattr(o,"__class__"):
            return o.__class__
        else:
            return None

    @staticmethod
    def getClassName(c):
        if hasattr(c,"_hx_class_name"):
            return c._hx_class_name
        else:
            if (c == list):
                return "Array"
            if (c == Math):
                return "Math"
            if (c == str):
                return "String"
            try:
                return c.__name__
            except BaseException as _g:
                None
                return None
Type._hx_class = Type

class haxe_StackItem(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.StackItem"
    _hx_constructs = ["CFunction", "Module", "FilePos", "Method", "LocalFunction"]

    @staticmethod
    def Module(m):
        return haxe_StackItem("Module", 1, (m,))

    @staticmethod
    def FilePos(s,file,line,column = None):
        return haxe_StackItem("FilePos", 2, (s,file,line,column))

    @staticmethod
    def Method(classname,method):
        return haxe_StackItem("Method", 3, (classname,method))

    @staticmethod
    def LocalFunction(v = None):
        return haxe_StackItem("LocalFunction", 4, (v,))
haxe_StackItem.CFunction = haxe_StackItem("CFunction", 0, ())
haxe_StackItem._hx_class = haxe_StackItem


class haxe__CallStack_CallStack_Impl_:
    _hx_class_name = "haxe._CallStack.CallStack_Impl_"
    __slots__ = ()
    _hx_statics = ["toString", "subtract", "equalItems", "itemToString"]

    @staticmethod
    def toString(stack):
        b = StringBuf()
        _g = 0
        _g1 = stack
        while (_g < len(_g1)):
            s = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            b.b.write("\nCalled from ")
            haxe__CallStack_CallStack_Impl_.itemToString(b,s)
        return b.b.getvalue()

    @staticmethod
    def subtract(this1,stack):
        startIndex = -1
        i = -1
        while True:
            i = (i + 1)
            tmp = i
            if (not ((tmp < len(this1)))):
                break
            _g = 0
            _g1 = len(stack)
            while (_g < _g1):
                j = _g
                _g = (_g + 1)
                if haxe__CallStack_CallStack_Impl_.equalItems((this1[i] if i >= 0 and i < len(this1) else None),python_internal_ArrayImpl._get(stack, j)):
                    if (startIndex < 0):
                        startIndex = i
                    i = (i + 1)
                    if (i >= len(this1)):
                        break
                else:
                    startIndex = -1
            if (not ((startIndex < 0))):
                break
        if (startIndex >= 0):
            return this1[0:startIndex]
        else:
            return this1

    @staticmethod
    def equalItems(item1,item2):
        if (item1 is None):
            if (item2 is None):
                return True
            else:
                return False
        else:
            tmp = item1.index
            if (tmp == 0):
                if (item2 is None):
                    return False
                elif (item2.index == 0):
                    return True
                else:
                    return False
            elif (tmp == 1):
                if (item2 is None):
                    return False
                elif (item2.index == 1):
                    m2 = item2.params[0]
                    m1 = item1.params[0]
                    return (m1 == m2)
                else:
                    return False
            elif (tmp == 2):
                if (item2 is None):
                    return False
                elif (item2.index == 2):
                    item21 = item2.params[0]
                    file2 = item2.params[1]
                    line2 = item2.params[2]
                    col2 = item2.params[3]
                    col1 = item1.params[3]
                    line1 = item1.params[2]
                    file1 = item1.params[1]
                    item11 = item1.params[0]
                    if (((file1 == file2) and ((line1 == line2))) and ((col1 == col2))):
                        return haxe__CallStack_CallStack_Impl_.equalItems(item11,item21)
                    else:
                        return False
                else:
                    return False
            elif (tmp == 3):
                if (item2 is None):
                    return False
                elif (item2.index == 3):
                    class2 = item2.params[0]
                    method2 = item2.params[1]
                    method1 = item1.params[1]
                    class1 = item1.params[0]
                    if (class1 == class2):
                        return (method1 == method2)
                    else:
                        return False
                else:
                    return False
            elif (tmp == 4):
                if (item2 is None):
                    return False
                elif (item2.index == 4):
                    v2 = item2.params[0]
                    v1 = item1.params[0]
                    return (v1 == v2)
                else:
                    return False
            else:
                pass

    @staticmethod
    def itemToString(b,s):
        tmp = s.index
        if (tmp == 0):
            b.b.write("a C function")
        elif (tmp == 1):
            m = s.params[0]
            b.b.write("module ")
            s1 = Std.string(m)
            b.b.write(s1)
        elif (tmp == 2):
            s1 = s.params[0]
            file = s.params[1]
            line = s.params[2]
            col = s.params[3]
            if (s1 is not None):
                haxe__CallStack_CallStack_Impl_.itemToString(b,s1)
                b.b.write(" (")
            s2 = Std.string(file)
            b.b.write(s2)
            b.b.write(" line ")
            s2 = Std.string(line)
            b.b.write(s2)
            if (col is not None):
                b.b.write(" column ")
                s2 = Std.string(col)
                b.b.write(s2)
            if (s1 is not None):
                b.b.write(")")
        elif (tmp == 3):
            cname = s.params[0]
            meth = s.params[1]
            s1 = Std.string(("<unknown>" if ((cname is None)) else cname))
            b.b.write(s1)
            b.b.write(".")
            s1 = Std.string(meth)
            b.b.write(s1)
        elif (tmp == 4):
            n = s.params[0]
            b.b.write("local function #")
            s = Std.string(n)
            b.b.write(s)
        else:
            pass
haxe__CallStack_CallStack_Impl_._hx_class = haxe__CallStack_CallStack_Impl_


class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()
haxe_IMap._hx_class = haxe_IMap


class haxe_Exception(Exception):
    _hx_class_name = "haxe.Exception"
    __slots__ = ("_hx___exceptionStack", "_hx___nativeStack", "_hx___skipStack", "_hx___nativeException", "_hx___previousException")
    _hx_fields = ["__exceptionStack", "__nativeStack", "__skipStack", "__nativeException", "__previousException"]
    _hx_methods = ["unwrap", "toString", "details", "__shiftStack", "get_message", "get_previous", "get_native", "get_stack"]
    _hx_statics = ["caught", "thrown"]
    _hx_interfaces = []
    _hx_super = Exception


    def __init__(self,message,previous = None,native = None):
        self._hx___previousException = None
        self._hx___nativeException = None
        self._hx___nativeStack = None
        self._hx___exceptionStack = None
        self._hx___skipStack = 0
        super().__init__(message)
        self._hx___previousException = previous
        if ((native is not None) and Std.isOfType(native,BaseException)):
            self._hx___nativeException = native
            self._hx___nativeStack = haxe_NativeStackTrace.exceptionStack()
        else:
            self._hx___nativeException = self
            infos = python_lib_Traceback.extract_stack()
            if (len(infos) != 0):
                infos.pop()
            infos.reverse()
            self._hx___nativeStack = infos

    def unwrap(self):
        return self._hx___nativeException

    def toString(self):
        return self.get_message()

    def details(self):
        if (self.get_previous() is None):
            tmp = ("Exception: " + HxOverrides.stringOrNull(self.toString()))
            tmp1 = self.get_stack()
            return (("null" if tmp is None else tmp) + HxOverrides.stringOrNull((("null" if ((tmp1 is None)) else haxe__CallStack_CallStack_Impl_.toString(tmp1)))))
        else:
            result = ""
            e = self
            prev = None
            while (e is not None):
                if (prev is None):
                    result1 = ("Exception: " + HxOverrides.stringOrNull(e.get_message()))
                    tmp = e.get_stack()
                    result = ((("null" if result1 is None else result1) + HxOverrides.stringOrNull((("null" if ((tmp is None)) else haxe__CallStack_CallStack_Impl_.toString(tmp))))) + ("null" if result is None else result))
                else:
                    prevStack = haxe__CallStack_CallStack_Impl_.subtract(e.get_stack(),prev.get_stack())
                    result = (((("Exception: " + HxOverrides.stringOrNull(e.get_message())) + HxOverrides.stringOrNull((("null" if ((prevStack is None)) else haxe__CallStack_CallStack_Impl_.toString(prevStack))))) + "\n\nNext ") + ("null" if result is None else result))
                prev = e
                e = e.get_previous()
            return result

    def _hx___shiftStack(self):
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0._hx___skipStack
        _hx_local_0._hx___skipStack = (_hx_local_1 + 1)
        _hx_local_1

    def get_message(self):
        return str(self)

    def get_previous(self):
        return self._hx___previousException

    def get_native(self):
        return self._hx___nativeException

    def get_stack(self):
        _g = self._hx___exceptionStack
        if (_g is None):
            def _hx_local_1():
                def _hx_local_0():
                    self._hx___exceptionStack = haxe_NativeStackTrace.toHaxe(self._hx___nativeStack,self._hx___skipStack)
                    return self._hx___exceptionStack
                return _hx_local_0()
            return _hx_local_1()
        else:
            s = _g
            return s

    @staticmethod
    def caught(value):
        if Std.isOfType(value,haxe_Exception):
            return value
        elif Std.isOfType(value,BaseException):
            return haxe_Exception(str(value),None,value)
        else:
            return haxe_ValueException(value,None,value)

    @staticmethod
    def thrown(value):
        if Std.isOfType(value,haxe_Exception):
            return value.get_native()
        elif Std.isOfType(value,BaseException):
            return value
        else:
            e = haxe_ValueException(value)
            e._hx___skipStack = (e._hx___skipStack + 1)
            return e

haxe_Exception._hx_class = haxe_Exception


class haxe_NativeStackTrace:
    _hx_class_name = "haxe.NativeStackTrace"
    __slots__ = ()
    _hx_statics = ["saveStack", "exceptionStack", "toHaxe"]

    @staticmethod
    def saveStack(exception):
        pass

    @staticmethod
    def exceptionStack():
        exc = python_lib_Sys.exc_info()
        if (exc[2] is not None):
            infos = python_lib_Traceback.extract_tb(exc[2])
            infos.reverse()
            return infos
        else:
            return []

    @staticmethod
    def toHaxe(native,skip = None):
        if (skip is None):
            skip = 0
        stack = []
        _g = 0
        _g1 = len(native)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            if (skip > i):
                continue
            elem = (native[i] if i >= 0 and i < len(native) else None)
            x = haxe_StackItem.FilePos(haxe_StackItem.Method(None,elem[2]),elem[0],elem[1])
            stack.append(x)
        return stack
haxe_NativeStackTrace._hx_class = haxe_NativeStackTrace


class haxe_ValueException(haxe_Exception):
    _hx_class_name = "haxe.ValueException"
    __slots__ = ("value",)
    _hx_fields = ["value"]
    _hx_methods = ["unwrap"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_Exception


    def __init__(self,value,previous = None,native = None):
        self.value = None
        super().__init__(("null" if ((value is None)) else Std.string(value)),previous,native)
        self.value = value
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0._hx___skipStack
        _hx_local_0._hx___skipStack = (_hx_local_1 + 1)
        _hx_local_1

    def unwrap(self):
        return self.value

haxe_ValueException._hx_class = haxe_ValueException


class haxe_ds_StringMap:
    _hx_class_name = "haxe.ds.StringMap"
    __slots__ = ("h",)
    _hx_fields = ["h"]
    _hx_methods = ["keys"]
    _hx_interfaces = [haxe_IMap]

    def __init__(self):
        self.h = dict()

    def keys(self):
        return python_HaxeIterator(iter(self.h.keys()))

haxe_ds_StringMap._hx_class = haxe_ds_StringMap


class haxe_exceptions_PosException(haxe_Exception):
    _hx_class_name = "haxe.exceptions.PosException"
    __slots__ = ("posInfos",)
    _hx_fields = ["posInfos"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_Exception


    def __init__(self,message,previous = None,pos = None):
        self.posInfos = None
        super().__init__(message,previous)
        if (pos is None):
            self.posInfos = _hx_AnonObject({'fileName': "(unknown)", 'lineNumber': 0, 'className': "(unknown)", 'methodName': "(unknown)"})
        else:
            self.posInfos = pos
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0._hx___skipStack
        _hx_local_0._hx___skipStack = (_hx_local_1 + 1)
        _hx_local_1

    def toString(self):
        return ((((((((("" + HxOverrides.stringOrNull(super().toString())) + " in ") + HxOverrides.stringOrNull(self.posInfos.className)) + ".") + HxOverrides.stringOrNull(self.posInfos.methodName)) + " at ") + HxOverrides.stringOrNull(self.posInfos.fileName)) + ":") + Std.string(self.posInfos.lineNumber))

haxe_exceptions_PosException._hx_class = haxe_exceptions_PosException


class haxe_exceptions_NotImplementedException(haxe_exceptions_PosException):
    _hx_class_name = "haxe.exceptions.NotImplementedException"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_exceptions_PosException


    def __init__(self,message = None,previous = None,pos = None):
        if (message is None):
            message = "Not implemented"
        super().__init__(message,previous,pos)
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0._hx___skipStack
        _hx_local_0._hx___skipStack = (_hx_local_1 + 1)
        _hx_local_1
haxe_exceptions_NotImplementedException._hx_class = haxe_exceptions_NotImplementedException


class haxe_io_Bytes:
    _hx_class_name = "haxe.io.Bytes"
    __slots__ = ("length", "b")
    _hx_fields = ["length", "b"]
    _hx_methods = ["getString", "toString"]
    _hx_statics = ["ofString"]

    def __init__(self,length,b):
        self.length = length
        self.b = b

    def getString(self,pos,_hx_len,encoding = None):
        tmp = (encoding is None)
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > self.length))):
            raise haxe_Exception.thrown(haxe_io_Error.OutsideBounds)
        return self.b[pos:pos+_hx_len].decode('UTF-8','replace')

    def toString(self):
        return self.getString(0,self.length)

    @staticmethod
    def ofString(s,encoding = None):
        b = bytearray(s,"UTF-8")
        return haxe_io_Bytes(len(b),b)

haxe_io_Bytes._hx_class = haxe_io_Bytes


class haxe_io_BytesBuffer:
    _hx_class_name = "haxe.io.BytesBuffer"
    __slots__ = ("b",)
    _hx_fields = ["b"]
    _hx_methods = ["getBytes"]

    def __init__(self):
        self.b = bytearray()

    def getBytes(self):
        _hx_bytes = haxe_io_Bytes(len(self.b),self.b)
        self.b = None
        return _hx_bytes

haxe_io_BytesBuffer._hx_class = haxe_io_BytesBuffer

class haxe_io_Encoding(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.io.Encoding"
    _hx_constructs = ["UTF8", "RawNative"]
haxe_io_Encoding.UTF8 = haxe_io_Encoding("UTF8", 0, ())
haxe_io_Encoding.RawNative = haxe_io_Encoding("RawNative", 1, ())
haxe_io_Encoding._hx_class = haxe_io_Encoding


class haxe_io_Eof:
    _hx_class_name = "haxe.io.Eof"
    __slots__ = ()
    _hx_methods = ["toString"]

    def __init__(self):
        pass

    def toString(self):
        return "Eof"

haxe_io_Eof._hx_class = haxe_io_Eof

class haxe_io_Error(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.io.Error"
    _hx_constructs = ["Blocked", "Overflow", "OutsideBounds", "Custom"]

    @staticmethod
    def Custom(e):
        return haxe_io_Error("Custom", 3, (e,))
haxe_io_Error.Blocked = haxe_io_Error("Blocked", 0, ())
haxe_io_Error.Overflow = haxe_io_Error("Overflow", 1, ())
haxe_io_Error.OutsideBounds = haxe_io_Error("OutsideBounds", 2, ())
haxe_io_Error._hx_class = haxe_io_Error


class haxe_io_Input:
    _hx_class_name = "haxe.io.Input"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["readByte", "set_bigEndian", "readLine"]

    def readByte(self):
        raise haxe_exceptions_NotImplementedException(None,None,_hx_AnonObject({'fileName': "haxe/io/Input.hx", 'lineNumber': 53, 'className': "haxe.io.Input", 'methodName': "readByte"}))

    def set_bigEndian(self,b):
        self.bigEndian = b
        return b

    def readLine(self):
        buf = haxe_io_BytesBuffer()
        last = None
        s = None
        try:
            while True:
                last = self.readByte()
                if (not ((last != 10))):
                    break
                buf.b.append(last)
            s = buf.getBytes().toString()
            if (HxString.charCodeAt(s,(len(s) - 1)) == 13):
                s = HxString.substr(s,0,-1)
        except BaseException as _g:
            None
            _g1 = haxe_Exception.caught(_g).unwrap()
            if Std.isOfType(_g1,haxe_io_Eof):
                e = _g1
                s = buf.getBytes().toString()
                if (len(s) == 0):
                    raise haxe_Exception.thrown(e)
            else:
                raise _g
        return s

haxe_io_Input._hx_class = haxe_io_Input


class haxe_io_Output:
    _hx_class_name = "haxe.io.Output"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["writeByte", "writeBytes", "flush", "set_bigEndian", "write", "writeFullBytes", "writeString"]

    def writeByte(self,c):
        raise haxe_exceptions_NotImplementedException(None,None,_hx_AnonObject({'fileName': "haxe/io/Output.hx", 'lineNumber': 47, 'className': "haxe.io.Output", 'methodName': "writeByte"}))

    def writeBytes(self,s,pos,_hx_len):
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > s.length))):
            raise haxe_Exception.thrown(haxe_io_Error.OutsideBounds)
        b = s.b
        k = _hx_len
        while (k > 0):
            self.writeByte(b[pos])
            pos = (pos + 1)
            k = (k - 1)
        return _hx_len

    def flush(self):
        pass

    def set_bigEndian(self,b):
        self.bigEndian = b
        return b

    def write(self,s):
        l = s.length
        p = 0
        while (l > 0):
            k = self.writeBytes(s,p,l)
            if (k == 0):
                raise haxe_Exception.thrown(haxe_io_Error.Blocked)
            p = (p + k)
            l = (l - k)

    def writeFullBytes(self,s,pos,_hx_len):
        while (_hx_len > 0):
            k = self.writeBytes(s,pos,_hx_len)
            pos = (pos + k)
            _hx_len = (_hx_len - k)

    def writeString(self,s,encoding = None):
        b = haxe_io_Bytes.ofString(s,encoding)
        self.writeFullBytes(b,0,b.length)

haxe_io_Output._hx_class = haxe_io_Output


class haxe_iterators_ArrayIterator:
    _hx_class_name = "haxe.iterators.ArrayIterator"
    __slots__ = ("array", "current")
    _hx_fields = ["array", "current"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,array):
        self.current = 0
        self.array = array

    def hasNext(self):
        return (self.current < len(self.array))

    def next(self):
        def _hx_local_3():
            def _hx_local_2():
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.current
                _hx_local_0.current = (_hx_local_1 + 1)
                return _hx_local_1
            return python_internal_ArrayImpl._get(self.array, _hx_local_2())
        return _hx_local_3()

haxe_iterators_ArrayIterator._hx_class = haxe_iterators_ArrayIterator


class haxe_iterators_ArrayKeyValueIterator:
    _hx_class_name = "haxe.iterators.ArrayKeyValueIterator"
    __slots__ = ("current", "array")
    _hx_fields = ["current", "array"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,array):
        self.current = 0
        self.array = array

    def hasNext(self):
        return (self.current < len(self.array))

    def next(self):
        def _hx_local_3():
            def _hx_local_2():
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.current
                _hx_local_0.current = (_hx_local_1 + 1)
                return _hx_local_1
            return _hx_AnonObject({'value': python_internal_ArrayImpl._get(self.array, self.current), 'key': _hx_local_2()})
        return _hx_local_3()

haxe_iterators_ArrayKeyValueIterator._hx_class = haxe_iterators_ArrayKeyValueIterator


class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if (isinstance(o,int) and (not isinstance(o,bool))):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except BaseException as _g:
                None
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g = 0
            _g1 = l
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except BaseException as _g:
            None
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except BaseException as _g:
                    None
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o1 = o
                l = len(o1.params)
                hasParams = (l > 0)
                if hasParams:
                    paramsStr = ""
                    _g = 0
                    _g1 = l
                    while (_g < _g1):
                        i = _g
                        _g = (_g + 1)
                        prefix = ""
                        if (i > 0):
                            prefix = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1(o1.params[i],s))))))
                    return (((HxOverrides.stringOrNull(o1.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o1.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields = python_Boot.getInstanceFields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " )")
                    return toStr
                else:
                    fields = python_Boot.getClassFields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " )")
                    return toStr
            if ((type(o) == type) and (o == str)):
                return "#String"
            if ((type(o) == type) and (o == list)):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except BaseException as _g:
                None
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                fields = o._hx_fields
                if (fields is not None):
                    return list(fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    if (k != '_hx_disable_getattr'):
                        a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d = o.__dict__
                keys1 = d.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def field(o,field):
        if (field is None):
            return None
        if isinstance(o,str):
            field1 = field
            _hx_local_0 = len(field1)
            if (_hx_local_0 == 10):
                if (field1 == "charCodeAt"):
                    return python_internal_MethodClosure(o,HxString.charCodeAt)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 11):
                if (field1 == "lastIndexOf"):
                    return python_internal_MethodClosure(o,HxString.lastIndexOf)
                elif (field1 == "toLowerCase"):
                    return python_internal_MethodClosure(o,HxString.toLowerCase)
                elif (field1 == "toUpperCase"):
                    return python_internal_MethodClosure(o,HxString.toUpperCase)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 9):
                if (field1 == "substring"):
                    return python_internal_MethodClosure(o,HxString.substring)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 5):
                if (field1 == "split"):
                    return python_internal_MethodClosure(o,HxString.split)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 7):
                if (field1 == "indexOf"):
                    return python_internal_MethodClosure(o,HxString.indexOf)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 8):
                if (field1 == "toString"):
                    return python_internal_MethodClosure(o,HxString.toString)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 6):
                if (field1 == "charAt"):
                    return python_internal_MethodClosure(o,HxString.charAt)
                elif (field1 == "length"):
                    return len(o)
                elif (field1 == "substr"):
                    return python_internal_MethodClosure(o,HxString.substr)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            else:
                field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                return (getattr(o,field1) if (hasattr(o,field1)) else None)
        elif isinstance(o,list):
            field1 = field
            _hx_local_1 = len(field1)
            if (_hx_local_1 == 11):
                if (field1 == "lastIndexOf"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.lastIndexOf)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 4):
                if (field1 == "copy"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.copy)
                elif (field1 == "join"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.join)
                elif (field1 == "push"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.push)
                elif (field1 == "sort"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.sort)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 5):
                if (field1 == "shift"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.shift)
                elif (field1 == "slice"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.slice)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 7):
                if (field1 == "indexOf"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.indexOf)
                elif (field1 == "reverse"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.reverse)
                elif (field1 == "unshift"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.unshift)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 3):
                if (field1 == "map"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.map)
                elif (field1 == "pop"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.pop)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 8):
                if (field1 == "contains"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.contains)
                elif (field1 == "iterator"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.iterator)
                elif (field1 == "toString"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.toString)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 16):
                if (field1 == "keyValueIterator"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.keyValueIterator)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 6):
                if (field1 == "concat"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.concat)
                elif (field1 == "filter"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.filter)
                elif (field1 == "insert"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.insert)
                elif (field1 == "length"):
                    return len(o)
                elif (field1 == "remove"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.remove)
                elif (field1 == "splice"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.splice)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            else:
                field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                return (getattr(o,field1) if (hasattr(o,field1)) else None)
        else:
            field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
            return (getattr(o,field1) if (hasattr(o,field1)) else None)

    @staticmethod
    def getInstanceFields(c):
        f = (list(c._hx_fields) if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except BaseException as _g:
            None
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if (real in python_Boot.keywords):
                return real
        return name
python_Boot._hx_class = python_Boot


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except BaseException as _g:
                None
                if Std.isOfType(haxe_Exception.caught(_g).unwrap(),StopIteration):
                    self.has = False
                    self.x = None
                else:
                    raise _g
            self.checked = True
        return self.has

python_HaxeIterator._hx_class = python_HaxeIterator


class python__KwArgs_KwArgs_Impl_:
    _hx_class_name = "python._KwArgs.KwArgs_Impl_"
    __slots__ = ()
    _hx_statics = ["fromT"]

    @staticmethod
    def fromT(d):
        return python_Lib.anonAsDict(d)
python__KwArgs_KwArgs_Impl_._hx_class = python__KwArgs_KwArgs_Impl_


class python_Lib:
    _hx_class_name = "python.Lib"
    __slots__ = ()
    _hx_statics = ["anonToDict", "anonAsDict"]

    @staticmethod
    def anonToDict(o):
        if isinstance(o,_hx_AnonObject):
            return o.__dict__.copy()
        else:
            return None

    @staticmethod
    def anonAsDict(o):
        if isinstance(o,_hx_AnonObject):
            return o.__dict__
        else:
            return None
python_Lib._hx_class = python_Lib


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["concat", "copy", "iterator", "keyValueIterator", "indexOf", "lastIndexOf", "join", "toString", "pop", "push", "unshift", "remove", "contains", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get"]

    @staticmethod
    def concat(a1,a2):
        return (a1 + a2)

    @staticmethod
    def copy(x):
        return list(x)

    @staticmethod
    def iterator(x):
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def keyValueIterator(x):
        return haxe_iterators_ArrayKeyValueIterator(x)

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        if (l < 0):
            l = 0
        _g = l
        _g1 = _hx_len
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            if HxOverrides.eq(a[i],x):
                return i
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        if (l > _hx_len):
            l = _hx_len
        while True:
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            if HxOverrides.eq(a[l],x):
                return l
        return -1

    @staticmethod
    def join(x,sep):
        return sep.join([python_Boot.toString1(x1,'') for x1 in x])

    @staticmethod
    def toString(x):
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        x.append(e)
        return len(x)

    @staticmethod
    def unshift(x,e):
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        try:
            x.remove(e)
            return True
        except BaseException as _g:
            None
            return False

    @staticmethod
    def contains(x,e):
        return (e in x)

    @staticmethod
    def shift(x):
        if (len(x) == 0):
            return None
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        if (pos < 0):
            pos = (len(x) + pos)
        if (pos < 0):
            pos = 0
        res = x[pos:(pos + _hx_len)]
        del x[pos:(pos + _hx_len)]
        return res

    @staticmethod
    def map(x,f):
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        a.reverse()

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None
python_internal_ArrayImpl._hx_class = python_internal_ArrayImpl


class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull", "mapKwArgs"]

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s

    @staticmethod
    def mapKwArgs(a,v):
        a1 = _hx_AnonObject(python_Lib.anonToDict(a))
        k = python_HaxeIterator(iter(v.keys()))
        while k.hasNext():
            k1 = k.next()
            val = v.get(k1)
            if a1._hx_hasattr(k1):
                x = getattr(a1,k1)
                setattr(a1,val,x)
                delattr(a1,k1)
        return a1
HxOverrides._hx_class = HxOverrides


class python_internal_MethodClosure:
    _hx_class_name = "python.internal.MethodClosure"
    __slots__ = ("obj", "func")
    _hx_fields = ["obj", "func"]
    _hx_methods = ["__call__"]

    def __init__(self,obj,func):
        self.obj = obj
        self.func = func

    def __call__(self,*args):
        return self.func(self.obj,*args)

python_internal_MethodClosure._hx_class = python_internal_MethodClosure


class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "indexOfImpl", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        elif (_hx_str == ""):
            length = len(s)
            if (startIndex < 0):
                startIndex = (length + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            if (startIndex > length):
                return length
            else:
                return startIndex
        else:
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            check = s.find(_hx_str, startLeft, len(s))
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return HxString.indexOfImpl(s,_hx_str,startIndex)

    @staticmethod
    def indexOfImpl(s,_hx_str,startIndex):
        if (_hx_str == ""):
            length = len(s)
            if (startIndex < 0):
                startIndex = (length + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            if (startIndex > length):
                return length
            else:
                return startIndex
        return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        if (startIndex < 0):
            startIndex = 0
        if (endIndex is None):
            return s[startIndex:]
        else:
            if (endIndex < 0):
                endIndex = 0
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            if (startIndex < 0):
                startIndex = (len(s) + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            return s[startIndex:(startIndex + _hx_len)]
HxString._hx_class = HxString


class python_io_NativeInput(haxe_io_Input):
    _hx_class_name = "python.io.NativeInput"
    __slots__ = ("stream", "wasEof")
    _hx_fields = ["stream", "wasEof"]
    _hx_methods = ["throwEof"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_io_Input


    def __init__(self,s):
        self.wasEof = None
        self.stream = s
        self.set_bigEndian(False)
        self.wasEof = False
        if (not self.stream.readable()):
            raise haxe_Exception.thrown("Write-only stream")

    def throwEof(self):
        self.wasEof = True
        raise haxe_Exception.thrown(haxe_io_Eof())

python_io_NativeInput._hx_class = python_io_NativeInput


class python_io_IInput:
    _hx_class_name = "python.io.IInput"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["set_bigEndian", "readByte", "readLine"]
python_io_IInput._hx_class = python_io_IInput


class python_io_IFileInput:
    _hx_class_name = "python.io.IFileInput"
    __slots__ = ()
    _hx_interfaces = [python_io_IInput]
python_io_IFileInput._hx_class = python_io_IFileInput


class python_io_NativeOutput(haxe_io_Output):
    _hx_class_name = "python.io.NativeOutput"
    __slots__ = ("stream",)
    _hx_fields = ["stream"]
    _hx_methods = ["close", "flush"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_io_Output


    def __init__(self,stream):
        self.stream = None
        self.set_bigEndian(False)
        self.stream = stream
        if (not stream.writable()):
            raise haxe_Exception.thrown("Read only stream")

    def close(self):
        self.stream.close()

    def flush(self):
        self.stream.flush()

python_io_NativeOutput._hx_class = python_io_NativeOutput


class python_io_NativeBytesOutput(python_io_NativeOutput):
    _hx_class_name = "python.io.NativeBytesOutput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["writeByte", "writeBytes"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = python_io_NativeOutput


    def __init__(self,stream):
        super().__init__(stream)

    def writeByte(self,c):
        self.stream.write(bytearray([c]))

    def writeBytes(self,s,pos,_hx_len):
        return self.stream.write(s.b[pos:(pos + _hx_len)])

python_io_NativeBytesOutput._hx_class = python_io_NativeBytesOutput


class python_io_IOutput:
    _hx_class_name = "python.io.IOutput"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["set_bigEndian", "writeByte", "writeBytes", "flush", "close", "write", "writeFullBytes", "writeString"]
python_io_IOutput._hx_class = python_io_IOutput


class python_io_IFileOutput:
    _hx_class_name = "python.io.IFileOutput"
    __slots__ = ()
    _hx_interfaces = [python_io_IOutput]
python_io_IFileOutput._hx_class = python_io_IFileOutput


class python_io_FileBytesOutput(python_io_NativeBytesOutput):
    _hx_class_name = "python.io.FileBytesOutput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = [python_io_IFileOutput]
    _hx_super = python_io_NativeBytesOutput


    def __init__(self,stream):
        super().__init__(stream)
python_io_FileBytesOutput._hx_class = python_io_FileBytesOutput


class python_io_NativeTextInput(python_io_NativeInput):
    _hx_class_name = "python.io.NativeTextInput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["readByte"]
    _hx_statics = []
    _hx_interfaces = [python_io_IInput]
    _hx_super = python_io_NativeInput


    def __init__(self,stream):
        super().__init__(stream)

    def readByte(self):
        ret = self.stream.buffer.read(1)
        if (len(ret) == 0):
            self.throwEof()
        return ret[0]

python_io_NativeTextInput._hx_class = python_io_NativeTextInput


class python_io_FileTextInput(python_io_NativeTextInput):
    _hx_class_name = "python.io.FileTextInput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = [python_io_IFileInput]
    _hx_super = python_io_NativeTextInput


    def __init__(self,stream):
        super().__init__(stream)
python_io_FileTextInput._hx_class = python_io_FileTextInput


class python_io_NativeTextOutput(python_io_NativeOutput):
    _hx_class_name = "python.io.NativeTextOutput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["writeBytes", "writeByte"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = python_io_NativeOutput


    def __init__(self,stream):
        super().__init__(stream)
        if (not stream.writable()):
            raise haxe_Exception.thrown("Read only stream")

    def writeBytes(self,s,pos,_hx_len):
        return self.stream.buffer.write(s.b[pos:(pos + _hx_len)])

    def writeByte(self,c):
        self.stream.write("".join(map(chr,[c])))

python_io_NativeTextOutput._hx_class = python_io_NativeTextOutput


class python_io_FileTextOutput(python_io_NativeTextOutput):
    _hx_class_name = "python.io.FileTextOutput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = [python_io_IFileOutput]
    _hx_super = python_io_NativeTextOutput


    def __init__(self,stream):
        super().__init__(stream)
python_io_FileTextOutput._hx_class = python_io_FileTextOutput


class python_io_IoTools:
    _hx_class_name = "python.io.IoTools"
    __slots__ = ()
    _hx_statics = ["createFileInputFromText", "createFileOutputFromText", "createFileOutputFromBytes"]

    @staticmethod
    def createFileInputFromText(t):
        return sys_io_FileInput(python_io_FileTextInput(t))

    @staticmethod
    def createFileOutputFromText(t):
        return sys_io_FileOutput(python_io_FileTextOutput(t))

    @staticmethod
    def createFileOutputFromBytes(t):
        return sys_io_FileOutput(python_io_FileBytesOutput(t))
python_io_IoTools._hx_class = python_io_IoTools


class src_Environment:
    _hx_class_name = "src.Environment"
    __slots__ = ("values", "parent")
    _hx_fields = ["values", "parent"]
    _hx_methods = ["define", "assign", "get", "exists"]

    def __init__(self,parent = None):
        self.parent = parent
        self.values = haxe_ds_StringMap()

    def define(self,name,value):
        self.values.h[name] = value

    def assign(self,name,value):
        if (name in self.values.h):
            self.values.h[name] = value
            return
        if (self.parent is not None):
            self.parent.assign(name,value)
            return
        raise haxe_Exception.thrown((("Undefined variable '" + ("null" if name is None else name)) + "'"))

    def get(self,name):
        if (name in self.values.h):
            return self.values.h.get(name,None)
        if (self.parent is not None):
            return self.parent.get(name)
        raise haxe_Exception.thrown((("Undefined variable '" + ("null" if name is None else name)) + "'"))

    def exists(self,name):
        if (name in self.values.h):
            return True
        if (self.parent is not None):
            return self.parent.exists(name)
        return False

src_Environment._hx_class = src_Environment


class src_Return(haxe_Exception):
    _hx_class_name = "src.Return"
    __slots__ = ("value",)
    _hx_fields = ["value"]
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_Exception


    def __init__(self,value):
        self.value = None
        super().__init__("Return")
        self.value = value
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0._hx___skipStack
        _hx_local_0._hx___skipStack = (_hx_local_1 + 1)
        _hx_local_1

src_Return._hx_class = src_Return


class src_Interpreter:
    _hx_class_name = "src.Interpreter"
    __slots__ = ("environment",)
    _hx_fields = ["environment"]
    _hx_methods = ["visit", "visitPrintStmt", "visitInputStmt", "visitLetStmt", "visitIfStmt", "visitWhileStmt", "visitForeachStmt", "visitBlockStmt", "visitExprStmt", "visitReturnStmt", "visitFunctionStmt", "visitStmt", "visitExpr", "visitUnaryExpr", "visitBinaryExpr", "visitNumberExpr", "visitVariableExpr", "visitStringExpr", "visitCallExpr", "visitNullExpr", "visitBooleanExpr", "visitArrayExpr", "visitIndexExpr", "visitMapExpr", "visitFunctionExpr", "loadFunctions"]

    def __init__(self):
        self.environment = src_Environment()
        self.environment.define("pi",src_types_Value.VNumber(Math.PI))
        self.environment.define("e",src_types_Value.VNumber((0.0 if ((1 == Math.NEGATIVE_INFINITY)) else (Math.POSITIVE_INFINITY if ((1 == Math.POSITIVE_INFINITY)) else Reflect.field(Math,"exp")(1)))))
        self.environment.define("inf",src_types_Value.VNumber(Math.POSITIVE_INFINITY))
        self.environment.define("nan",src_types_Value.VNumber(Math.NaN))
        self.loadFunctions()

    def visit(self,ast):
        _g = 0
        while (_g < len(ast)):
            stmt = (ast[_g] if _g >= 0 and _g < len(ast) else None)
            _g = (_g + 1)
            if (stmt is not None):
                self.visitStmt(stmt)

    def visitPrintStmt(self,stmt):
        value = self.visitExpr(stmt.expr)
        src_Utils.print(src_Utils.stringify(value))

    def visitInputStmt(self,stmt):
        input = Sys.stdin().readLine()
        num = Std.parseFloat(input)
        final_val = (src_types_Value.VString(input) if ((num == Math.NaN)) else src_types_Value.VNumber(num))
        self.environment.define(stmt.target.name,final_val)

    def visitLetStmt(self,stmt):
        value = None
        if (stmt.value is not None):
            value = self.visitExpr(stmt.value)
        _g = 0
        _g1 = stmt.bindings
        while (_g < len(_g1)):
            v = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            self.environment.define(v.name,value)

    def visitIfStmt(self,stmt):
        condition = self.visitExpr(stmt.condition)
        if src_types_V.isTruthy(condition):
            self.visitBlockStmt(stmt.thenBranch)
        elif (stmt.elseBranch is not None):
            self.visitBlockStmt(stmt.elseBranch)

    def visitWhileStmt(self,stmt):
        condition = self.visitExpr(stmt.condition)
        while src_types_V.isTruthy(condition):
            self.visitBlockStmt(stmt.body)
            condition = self.visitExpr(stmt.condition)

    def visitForeachStmt(self,stmt):
        iterable = self.visitExpr(stmt.target)
        varName = stmt.variable.name
        if Std.isOfType(iterable,list):
            _g = 0
            _g1 = src_types_V.toArray(iterable)
            while (_g < len(_g1)):
                item = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                _g = (_g + 1)
                self.environment.define(varName,item)
                self.visitStmt(stmt.body)
        elif Std.isOfType(iterable,str):
            _g = 0
            _g1 = len(src_types_V.toString(iterable))
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                tmp = self.environment
                _this = src_types_V.toString(iterable)
                tmp.define(varName,src_types_Value.VString(("" if (((i < 0) or ((i >= len(_this))))) else _this[i])))
                self.visitStmt(stmt.body)
        else:
            raise haxe_Exception.thrown(((((("Foreach target" + Std.string(iterable)) + " must be an array or string at line ") + Std.string(stmt.line)) + ", column ") + Std.string(stmt.column)))

    def visitBlockStmt(self,stmt):
        _g = 0
        _g1 = stmt.statements
        while (_g < len(_g1)):
            s = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            self.visitStmt(s)

    def visitExprStmt(self,stmt):
        self.visitExpr(stmt.expr)

    def visitReturnStmt(self,stmt):
        value = None
        if (stmt.value is not None):
            value = self.visitExpr(stmt.value)
        raise src_Return(value)

    def visitFunctionStmt(self,stmt):
        functionObj = src_types_Function(stmt.name,stmt.params,stmt.body)
        self.environment.define(stmt.name,src_types_Value.VFunc(functionObj))

    def visitStmt(self,stmt):
        if Std.isOfType(stmt,src_ast_PrintStmt):
            self.visitPrintStmt(stmt)
        elif Std.isOfType(stmt,src_ast_InputStmt):
            self.visitInputStmt(stmt)
        elif Std.isOfType(stmt,src_ast_LetStmt):
            self.visitLetStmt(stmt)
        elif Std.isOfType(stmt,src_ast_IfStmt):
            self.visitIfStmt(stmt)
        elif Std.isOfType(stmt,src_ast_BlockStmt):
            self.visitBlockStmt(stmt)
        elif Std.isOfType(stmt,src_ast_ExprStmt):
            self.visitExprStmt(stmt)
        elif Std.isOfType(stmt,src_ast_WhileStmt):
            self.visitWhileStmt(stmt)
        elif Std.isOfType(stmt,src_ast_ForeachStmt):
            self.visitForeachStmt(stmt)
        elif Std.isOfType(stmt,src_ast_ReturnStmt):
            self.visitReturnStmt(stmt)
        elif Std.isOfType(stmt,src_ast_FunctionStmt):
            self.visitFunctionStmt(stmt)
        else:
            raise haxe_Exception.thrown(("Unknown statement type: " + Std.string(stmt)))

    def visitExpr(self,expr):
        if Std.isOfType(expr,src_ast_BinaryExpr):
            return self.visitBinaryExpr(expr)
        elif Std.isOfType(expr,src_ast_NumberExpr):
            return self.visitNumberExpr(expr)
        elif Std.isOfType(expr,src_ast_VariableExpr):
            return self.visitVariableExpr(expr)
        elif Std.isOfType(expr,src_ast_UnaryExpr):
            return self.visitUnaryExpr(expr)
        elif Std.isOfType(expr,src_ast_StringExpr):
            return self.visitStringExpr(expr)
        elif Std.isOfType(expr,src_ast_CallExpr):
            return self.visitCallExpr(expr)
        elif Std.isOfType(expr,src_ast_BooleanExpr):
            return self.visitBooleanExpr(expr)
        elif Std.isOfType(expr,src_ast_NullExpr):
            return self.visitNullExpr(expr)
        elif Std.isOfType(expr,src_ast_ArrayExpr):
            return self.visitArrayExpr(expr)
        elif Std.isOfType(expr,src_ast_IndexExpr):
            return self.visitIndexExpr(expr)
        elif Std.isOfType(expr,src_ast_MapExpr):
            return self.visitMapExpr(expr)
        elif Std.isOfType(expr,src_ast_FunctionExpr):
            return self.visitFunctionExpr(expr)
        else:
            raise haxe_Exception.thrown(("Unknown expression type: " + Std.string(expr)))

    def visitUnaryExpr(self,expr):
        right = self.visitExpr(expr.right)
        tmp = expr.oper.type.index
        if (tmp == 5):
            return src_types_Value.VNumber(-src_types_V.toNumber(right))
        elif (tmp == 25):
            return src_types_Value.VBool((not src_types_V.isTruthy(right)))
        else:
            raise haxe_Exception.thrown(((((("Unknown unary operator " + HxOverrides.stringOrNull((("null" if ((expr.oper.value is None)) else Std.string(expr.oper.value))))) + " at line ") + Std.string(expr.oper.line)) + ", column ") + Std.string(expr.oper.column)))

    def visitBinaryExpr(self,expr):
        left = self.visitExpr(expr.left)
        right = self.visitExpr(expr.right)
        tmp = expr.oper.type.index
        if (tmp == 4):
            if (Std.isOfType(left,list) and Std.isOfType(right,list)):
                return src_types_Value.VArray((src_types_V.toArray(left) + src_types_V.toArray(right)))
            elif (Std.isOfType(left,haxe_ds_StringMap) and Std.isOfType(right,haxe_ds_StringMap)):
                result = haxe_ds_StringMap()
                key = src_types_V.toMap(left).keys()
                while key.hasNext():
                    key1 = key.next()
                    value = src_types_V.toMap(left).h.get(key1,None)
                    result.h[key1] = value
                key = src_types_V.toMap(right).keys()
                while key.hasNext():
                    key1 = key.next()
                    value = src_types_V.toMap(right).h.get(key1,None)
                    result.h[key1] = value
                return src_types_Value.VMap(result)
            elif (Std.isOfType(left,str) or Std.isOfType(right,str)):
                return src_types_Value.VString((Std.string(left) + Std.string(right)))
            else:
                return src_types_Value.VNumber((src_types_V.toNumber(left) + src_types_V.toNumber(right)))
        elif (tmp == 5):
            return src_types_Value.VNumber((src_types_V.toNumber(left) - src_types_V.toNumber(right)))
        elif (tmp == 6):
            return src_types_Value.VNumber((src_types_V.toNumber(left) * src_types_V.toNumber(right)))
        elif (tmp == 7):
            return src_types_Value.VNumber((src_types_V.toNumber(left) / src_types_V.toNumber(right)))
        elif (tmp == 19):
            return src_types_Value.VBool((src_types_V.toNumber(left) == src_types_V.toNumber(right)))
        elif (tmp == 20):
            return src_types_Value.VBool((src_types_V.toNumber(left) != src_types_V.toNumber(right)))
        elif (tmp == 21):
            return src_types_Value.VBool((src_types_V.toNumber(left) > src_types_V.toNumber(right)))
        elif (tmp == 22):
            return src_types_Value.VBool((src_types_V.toNumber(left) >= src_types_V.toNumber(right)))
        elif (tmp == 23):
            return src_types_Value.VBool((src_types_V.toNumber(left) < src_types_V.toNumber(right)))
        elif (tmp == 24):
            return src_types_Value.VBool((src_types_V.toNumber(left) <= src_types_V.toNumber(right)))
        else:
            raise haxe_Exception.thrown(((((("Unknown operator " + HxOverrides.stringOrNull((("null" if ((expr.oper.value is None)) else Std.string(expr.oper.value))))) + " at line ") + Std.string(expr.oper.line)) + ", column ") + Std.string(expr.oper.column)))

    def visitNumberExpr(self,expr):
        return src_types_Value.VNumber(expr.value)

    def visitVariableExpr(self,expr):
        if self.environment.exists(expr.name):
            return self.environment.get(expr.name)
        raise haxe_Exception.thrown(((((("Undefined variable '" + HxOverrides.stringOrNull(expr.name)) + "' at line ") + Std.string(expr.line)) + ", column ") + Std.string(expr.column)))

    def visitStringExpr(self,expr):
        return src_types_Value.VString(expr.value)

    def visitCallExpr(self,expr):
        callee = self.visitExpr(expr.callee)
        args = []
        _g = 0
        _g1 = expr.arguments
        while (_g < len(_g1)):
            arg = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            x = self.visitExpr(arg)
            args.append(x)
        tmp = callee.index
        if (tmp == 6):
            func = callee.params[0]
            try:
                func.call(args,self)
            except BaseException as _g:
                _g1 = haxe_Exception.caught(_g)
                if Std.isOfType(_g1,src_Return):
                    e = _g1
                    return e.value
                else:
                    raise _g
            return None
        elif (tmp == 7):
            func = callee.params[0]
            return func.call(args,self)
        else:
            raise haxe_Exception.thrown(((((("Attempted to call non-function object " + Std.string(callee)) + " at line ") + Std.string(expr.line)) + ", column ") + Std.string(expr.column)))

    def visitNullExpr(self,expr):
        return src_types_Value.VNull

    def visitBooleanExpr(self,expr):
        return src_types_Value.VBool(expr.value)

    def visitArrayExpr(self,expr):
        elements = []
        _g = 0
        _g1 = expr.elements
        while (_g < len(_g1)):
            el = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            x = self.visitExpr(el)
            elements.append(x)
        return src_types_Value.VArray(elements)

    def visitIndexExpr(self,expr):
        target = self.visitExpr(expr.target)
        index = self.visitExpr(expr.index)
        tmp = target.index
        if (tmp == 3):
            _hx_str = target.params[0]
            if (index.index == 0):
                idx = index.params[0]
                if ((idx < 0) or ((idx >= len(_hx_str)))):
                    raise haxe_Exception.thrown(((((("String index " + Std.string(idx)) + " out of bounds at line ") + Std.string(expr.line)) + ", column ") + Std.string(expr.column)))
                index1 = None
                try:
                    index1 = int(idx)
                except BaseException as _g:
                    None
                    index1 = None
                index2 = index1
                return src_types_Value.VString(("" if (((index2 < 0) or ((index2 >= len(_hx_str))))) else _hx_str[index2]))
            else:
                raise haxe_Exception.thrown(((((("String index " + Std.string(index)) + " must be an integer at line ") + Std.string(expr.line)) + ", column ") + Std.string(expr.column)))
        elif (tmp == 4):
            arr = target.params[0]
            if (index.index == 0):
                idx = index.params[0]
                if ((idx < 0) or ((idx >= len(arr)))):
                    raise haxe_Exception.thrown(((((("Array index " + Std.string(idx)) + " out of bounds at line ") + Std.string(expr.line)) + ", column ") + Std.string(expr.column)))
                tmp = None
                try:
                    tmp = int(idx)
                except BaseException as _g:
                    None
                    tmp = None
                return python_internal_ArrayImpl._get(arr, tmp)
            else:
                raise haxe_Exception.thrown(((((("Array index " + Std.string(index)) + " must be an integer at line ") + Std.string(expr.line)) + ", column ") + Std.string(expr.column)))
        elif (tmp == 5):
            _hx_map = target.params[0]
            if (index.index == 3):
                key = index.params[0]
                if (not (key in _hx_map.h)):
                    raise haxe_Exception.thrown(((((("Map key '" + ("null" if key is None else key)) + "' does not exist at line ") + Std.string(expr.line)) + ", column ") + Std.string(expr.column)))
                return _hx_map.h.get(key,None)
            else:
                raise haxe_Exception.thrown(((((("Map key " + Std.string(index)) + " must be a string at line ") + Std.string(expr.line)) + ", column ") + Std.string(expr.column)))
        else:
            raise haxe_Exception.thrown(((((("Attempted to index non-iterable " + Std.string(target)) + " at line ") + Std.string(expr.line)) + ", column ") + Std.string(expr.column)))

    def visitMapExpr(self,expr):
        result = haxe_ds_StringMap()
        _g = 0
        _g1 = expr.pairs
        while (_g < len(_g1)):
            pair = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            key = pair.key
            value = self.visitExpr(pair.value)
            result.h[key] = value
        return src_types_Value.VMap(result)

    def visitFunctionExpr(self,expr):
        return src_types_Value.VFunc(src_types_Function(expr.name,expr.params,expr.body))

    def loadFunctions(self):
        _gthis = self
        def _hx_local_0(env):
            return src_types_Value.VNumber(python_lib_Time.time())
        self.environment.define("clock",src_types_Value.VNative(src_types_NativeFunction("clock",[],_hx_local_0)))
        def _hx_local_2(env):
            item = env.get("item")
            if Std.isOfType(item,str):
                return src_types_Value.VNumber(len(src_types_V.toString(item)))
            elif Std.isOfType(item,list):
                return src_types_Value.VNumber(len(src_types_V.toArray(item)))
            elif Std.isOfType(item,haxe_ds_StringMap):
                count = 0
                key = src_types_V.toMap(item).keys()
                while key.hasNext():
                    key1 = key.next()
                    count = (count + 1)
                return src_types_Value.VNumber(count)
            elif Std.isOfType(item,src_types_Function):
                return src_types_Value.VNumber(len(src_types_V.toFunc(item).params))
            elif Std.isOfType(item,src_types_NativeFunction):
                return src_types_Value.VNumber(len(src_types_V.toNativeFunc(item).params))
            else:
                raise haxe_Exception.thrown("length() argument must be a string, array, map or function")
        self.environment.define("length",src_types_Value.VNative(src_types_NativeFunction("length",[src_ast_Parameter("item",None,0,0)],_hx_local_2)))
        def _hx_local_3(env):
            item = env.get("item")
            if (item == src_types_Value.VNull):
                return src_types_Value.VString("null")
            if Std.isOfType(item,src_types_Value.VBool):
                return src_types_Value.VString("bool")
            if Std.isOfType(item,src_types_Value.VNumber):
                return src_types_Value.VString("number")
            if Std.isOfType(item,src_types_Value.VString):
                return src_types_Value.VString("string")
            if Std.isOfType(item,src_types_Value.VArray):
                return src_types_Value.VString("array")
            if (Std.isOfType(item,src_types_Value.VFunc) or Std.isOfType(item,src_types_NativeFunction)):
                return src_types_Value.VString("function")
            return src_types_Value.VString("object")
        self.environment.define("typeof",src_types_Value.VNative(src_types_NativeFunction("typeof",[src_ast_Parameter("item",None,0,0)],_hx_local_3)))
        def _hx_local_6(env):
            start = env.get("start")
            end = env.get("end")
            step = env.get("step")
            if (((not Std.isOfType(start,Float)) or (not Std.isOfType(end,Float))) or (not Std.isOfType(step,Float))):
                raise haxe_Exception.thrown("range() arguments must be numbers")
            result = []
            i = src_types_V.toNumber(start)
            if (src_types_V.toNumber(step) == 0):
                raise haxe_Exception.thrown("range() step argument must not be zero")
            if (src_types_V.toNumber(step) > 0):
                while (i < src_types_V.toNumber(end)):
                    result.append(src_types_Value.VNumber(i))
                    i = (i + src_types_V.toNumber(step))
            else:
                while (i > src_types_V.toNumber(end)):
                    result.append(src_types_Value.VNumber(i))
                    i = (i + src_types_V.toNumber(step))
            return src_types_Value.VArray(result)
        self.environment.define("range",src_types_Value.VNative(src_types_NativeFunction("range",[src_ast_Parameter("start",None,0,0), src_ast_Parameter("end",None,0,0), src_ast_Parameter("step",src_ast_NumberExpr(1,0,0),0,0)],_hx_local_6)))
        def _hx_local_7(env):
            _this = Sys.systemName().lower()
            startIndex = None
            if (((_this.find("windows") if ((startIndex is None)) else HxString.indexOfImpl(_this,"windows",startIndex))) != -1):
                Sys.command("cls")
            else:
                Sys.command("clear")
            return src_types_Value.VNull
        self.environment.define("clear",src_types_Value.VNative(src_types_NativeFunction("clear",[],_hx_local_7)))
        def _hx_local_9(env):
            arr = env.get("arr")
            func = env.get("func")
            if (not Std.isOfType(arr,list)):
                raise haxe_Exception.thrown("map() first argument must be an array")
            if (not ((Std.isOfType(func,src_types_Function) or Std.isOfType(func,src_types_NativeFunction)))):
                raise haxe_Exception.thrown("map() second argument must be a function")
            result = []
            _g = 0
            _g1 = src_types_V.toArray(arr)
            while (_g < len(_g1)):
                item = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                _g = (_g + 1)
                if Std.isOfType(func,src_types_Function):
                    try:
                        src_types_V.toFunc(func).call([item],_gthis)
                    except BaseException as _g2:
                        _g3 = haxe_Exception.caught(_g2)
                        if Std.isOfType(_g3,src_Return):
                            e = _g3
                            x = e.value
                            result.append(x)
                        else:
                            raise _g2
                elif Std.isOfType(func,src_types_NativeFunction):
                    x1 = src_types_V.toNativeFunc(func).call([item],_gthis)
                    result.append(x1)
            return src_types_Value.VArray(result)
        self.environment.define("map",src_types_Value.VNative(src_types_NativeFunction("map",[src_ast_Parameter("arr",None,0,0), src_ast_Parameter("func",None,0,0)],_hx_local_9)))
        def _hx_local_10(env):
            item = env.get("item")
            return src_types_Value.VString(src_Utils.stringify(item))
        self.environment.define("toString",src_types_Value.VNative(src_types_NativeFunction("toString",[src_ast_Parameter("item",None,0,0)],_hx_local_10)))
        self.environment.define("math",src_types_Value.VMap(haxe_ds_StringMap()))
        _this = src_types_V.toMap(self.environment.get("math"))
        def _hx_local_11(env):
            v = src_types_V.toNumber(env.get("num"))
            return src_types_Value.VNumber((Math.NaN if ((v < 0)) else python_lib_Math.sqrt(v)))
        value = src_types_Value.VNative(src_types_NativeFunction("sqrt",[src_ast_Parameter("num",None,0,0)],_hx_local_11))
        _this.h["sqrt"] = value
        _this = src_types_V.toMap(self.environment.get("math"))
        def _hx_local_12(env):
            v = src_types_V.toNumber(env.get("x"))
            return src_types_Value.VNumber((Math.NaN if (((v == Math.POSITIVE_INFINITY) or ((v == Math.NEGATIVE_INFINITY)))) else python_lib_Math.cos(v)))
        value = src_types_Value.VNative(src_types_NativeFunction("sin",[src_ast_Parameter("x",None,0,0)],_hx_local_12))
        _this.h["sin"] = value
        _this = src_types_V.toMap(self.environment.get("math"))
        def _hx_local_13(env):
            v = src_types_V.toNumber(env.get("x"))
            return src_types_Value.VNumber((Math.NaN if (((v == Math.POSITIVE_INFINITY) or ((v == Math.NEGATIVE_INFINITY)))) else python_lib_Math.cos(v)))
        value = src_types_Value.VNative(src_types_NativeFunction("cos",[src_ast_Parameter("x",None,0,0)],_hx_local_13))
        _this.h["cos"] = value
        _this = src_types_V.toMap(self.environment.get("math"))
        def _hx_local_14(env):
            return src_types_Value.VNumber(Math.tan(src_types_V.toNumber(env.get("x"))))
        value = src_types_Value.VNative(src_types_NativeFunction("tan",[src_ast_Parameter("x",None,0,0)],_hx_local_14))
        _this.h["tan"] = value
        _this = src_types_V.toMap(self.environment.get("math"))
        def _hx_local_15(env):
            return src_types_Value.VNumber(Math.pow(src_types_V.toNumber(env.get("x")),src_types_V.toNumber(env.get("y"))))
        value = src_types_Value.VNative(src_types_NativeFunction("pow",[src_ast_Parameter("x",None,0,0), src_ast_Parameter("y",src_ast_NumberExpr(1,0,0),0,0)],_hx_local_15))
        _this.h["pow"] = value

src_Interpreter._hx_class = src_Interpreter


class src_Lexer:
    _hx_class_name = "src.Lexer"
    __slots__ = ("source", "position", "current", "line", "column")
    _hx_fields = ["source", "position", "current", "line", "column"]
    _hx_methods = ["advance", "peek", "isEof", "skipWhitespace", "skipComments", "tokenize", "isKeyword"]

    def __init__(self,source):
        self.position = 0
        self.source = source
        self.position = -1
        self.current = ""
        self.line = 1
        self.column = 0
        self.advance()

    def advance(self):
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.position
        _hx_local_0.position = (_hx_local_1 + 1)
        _hx_local_1
        _hx_local_2 = self
        _hx_local_3 = _hx_local_2.column
        _hx_local_2.column = (_hx_local_3 + 1)
        _hx_local_3
        if (self.position < len(self.source)):
            _this = self.source
            index = self.position
            self.current = ("" if (((index < 0) or ((index >= len(_this))))) else _this[index])
            if (self.current == "\n"):
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.line
                _hx_local_4.line = (_hx_local_5 + 1)
                _hx_local_5
                self.column = 0
        else:
            self.current = ""

    def peek(self):
        if (self.position < len(self.source)):
            _this = self.source
            index = self.position
            if ((index < 0) or ((index >= len(_this)))):
                return ""
            else:
                return _this[index]
        else:
            return ""

    def isEof(self):
        return (self.position >= len(self.source))

    def skipWhitespace(self):
        while ((not self.isEof()) and (((((self.current == " ") or ((self.current == "\t"))) or ((self.current == "\n"))) or ((self.current == "\r"))))):
            self.advance()

    def skipComments(self):
        if (self.current == "#"):
            while ((not self.isEof()) and ((self.current != "\n"))):
                self.advance()
            self.advance()

    def tokenize(self):
        tokens = []
        while (not self.isEof()):
            self.skipWhitespace()
            self.skipComments()
            if self.isEof():
                break
            _g = self.current
            if (_g == "!"):
                if (self.peek() == "="):
                    x = src_Token(src_TokenType.NOTEQ,"!=",self.line,self.column)
                    tokens.append(x)
                    self.advance()
                    self.advance()
                else:
                    x1 = src_Token(src_TokenType.BANG,self.current,self.line,self.column)
                    tokens.append(x1)
                    self.advance()
            elif (_g == "\""):
                start = (self.position + 1)
                self.advance()
                while ((not self.isEof()) and ((self.current != "\""))):
                    self.advance()
                if self.isEof():
                    raise haxe_Exception.thrown(((("Unterminated string literal at line " + Std.string(self.line)) + ", column ") + Std.string(self.column)))
                strValue = HxString.substring(self.source,start,self.position)
                x2 = src_Token(src_TokenType.STRING,strValue,self.line,(self.column - (((self.position - start) + 1))))
                tokens.append(x2)
                self.advance()
            elif (_g == "("):
                x3 = src_Token(src_TokenType.LPAREN,self.current,self.line,self.column)
                tokens.append(x3)
                self.advance()
            elif (_g == ")"):
                x4 = src_Token(src_TokenType.RPAREN,self.current,self.line,self.column)
                tokens.append(x4)
                self.advance()
            elif (_g == "*"):
                x5 = src_Token(src_TokenType.STAR,self.current,self.line,self.column)
                tokens.append(x5)
                self.advance()
            elif (_g == "+"):
                x6 = src_Token(src_TokenType.PLUS,self.current,self.line,self.column)
                tokens.append(x6)
                self.advance()
            elif (_g == ","):
                x7 = src_Token(src_TokenType.COMMA,self.current,self.line,self.column)
                tokens.append(x7)
                self.advance()
            elif (_g == "-"):
                x8 = src_Token(src_TokenType.MINUS,self.current,self.line,self.column)
                tokens.append(x8)
                self.advance()
            elif (_g == "."):
                x9 = src_Token(src_TokenType.PERIOD,self.current,self.line,self.column)
                tokens.append(x9)
                self.advance()
            elif (_g == "/"):
                x10 = src_Token(src_TokenType.SLASH,self.current,self.line,self.column)
                tokens.append(x10)
                self.advance()
            elif (_g == ";"):
                x11 = src_Token(src_TokenType.SEMICOLON,self.current,self.line,self.column)
                tokens.append(x11)
                self.advance()
            elif (_g == "<"):
                if (self.peek() == "="):
                    x12 = src_Token(src_TokenType.LTEQ,"<=",self.line,self.column)
                    tokens.append(x12)
                    self.advance()
                    self.advance()
                else:
                    x13 = src_Token(src_TokenType.LT,self.current,self.line,self.column)
                    tokens.append(x13)
                    self.advance()
            elif (_g == "="):
                self.advance()
                if (self.peek() == "="):
                    x14 = src_Token(src_TokenType.EQEQ,"==",self.line,self.column)
                    tokens.append(x14)
                    self.advance()
                elif (self.peek() == ">"):
                    x15 = src_Token(src_TokenType.ARROW,"=>",self.line,self.column)
                    tokens.append(x15)
                    self.advance()
                else:
                    x16 = src_Token(src_TokenType.EQUALS,self.current,self.line,self.column)
                    tokens.append(x16)
            elif (_g == ">"):
                if (self.peek() == "="):
                    x17 = src_Token(src_TokenType.GTEQ,">=",self.line,self.column)
                    tokens.append(x17)
                    self.advance()
                    self.advance()
                else:
                    x18 = src_Token(src_TokenType.GT,self.current,self.line,self.column)
                    tokens.append(x18)
                    self.advance()
            elif (_g == "["):
                x19 = src_Token(src_TokenType.LBRACK,self.current,self.line,self.column)
                tokens.append(x19)
                self.advance()
            elif (_g == "]"):
                x20 = src_Token(src_TokenType.RBRACK,self.current,self.line,self.column)
                tokens.append(x20)
                self.advance()
            elif (_g == "{"):
                x21 = src_Token(src_TokenType.LBRACE,self.current,self.line,self.column)
                tokens.append(x21)
                self.advance()
            elif (_g == "}"):
                x22 = src_Token(src_TokenType.RBRACE,self.current,self.line,self.column)
                tokens.append(x22)
                self.advance()
            else:
                _this = EReg("[a-zA-Z_$$]","")
                _this.matchObj = python_lib_Re.search(_this.pattern,self.current)
                if (_this.matchObj is not None):
                    start1 = self.position
                    while True:
                        tmp = None
                        if (not self.isEof()):
                            _this1 = EReg("[a-zA-Z0-9_$$]","")
                            _this1.matchObj = python_lib_Re.search(_this1.pattern,self.current)
                            tmp = (_this1.matchObj is not None)
                        else:
                            tmp = False
                        if (not tmp):
                            break
                        self.advance()
                    identifier = HxString.substring(self.source,start1,self.position)
                    _hx_type = (src_TokenType.KEYWORD if (self.isKeyword(identifier)) else src_TokenType.IDENTIFIER)
                    x23 = src_Token(_hx_type,identifier,self.line,self.column)
                    tokens.append(x23)
                else:
                    _this2 = EReg("[0-9]","")
                    _this2.matchObj = python_lib_Re.search(_this2.pattern,self.current)
                    if (_this2.matchObj is not None):
                        start2 = self.position
                        while True:
                            tmp1 = None
                            if (not self.isEof()):
                                _this3 = EReg("[0-9]","")
                                _this3.matchObj = python_lib_Re.search(_this3.pattern,self.current)
                                tmp1 = (_this3.matchObj is not None)
                            else:
                                tmp1 = False
                            if (not tmp1):
                                break
                            self.advance()
                        if (self.current == "."):
                            self.advance()
                            while True:
                                tmp2 = None
                                if (not self.isEof()):
                                    _this4 = EReg("[0-9]","")
                                    _this4.matchObj = python_lib_Re.search(_this4.pattern,self.current)
                                    tmp2 = (_this4.matchObj is not None)
                                else:
                                    tmp2 = False
                                if (not tmp2):
                                    break
                                self.advance()
                        numberStr = HxString.substring(self.source,start2,self.position)
                        x24 = src_Token(src_TokenType.NUMBER,numberStr,self.line,(self.column - ((self.position - start2))))
                        tokens.append(x24)
                    else:
                        raise haxe_Exception.thrown(((((("Unknown character: " + HxOverrides.stringOrNull(self.current)) + " at line ") + Std.string(self.line)) + ", column ") + Std.string(self.column)))
        return tokens

    def isKeyword(self,identifier):
        keywords = ["print", "input", "let", "if", "then", "else", "while", "do", "end", "true", "false", "inc", "dec", "func", "return", "null", "for", "in", "as"]
        return (python_internal_ArrayImpl.indexOf(keywords,identifier.lower(),None) != -1)

src_Lexer._hx_class = src_Lexer


class src_Main:
    _hx_class_name = "src.Main"
    __slots__ = ()
    _hx_statics = ["main"]

    @staticmethod
    def main():
        if (len(Sys.args()) >= 1):
            filename = python_internal_ArrayImpl._get(Sys.args(), 0)
            content = sys_io_File.getContent(filename)
            lexer = src_Lexer(content)
            tokens = lexer.tokenize()
            parser = src_Parser(tokens)
            ast = parser.parse()
            if ("-py" in Sys.args()):
                out_idx = (python_internal_ArrayImpl.indexOf(Sys.args(),"-py",None) + 1)
                filename = python_internal_ArrayImpl._get(Sys.args(), out_idx)
                out_f = sys_io_File.write(filename)
                codegen = src_compiler_PyCompiler()
                codegen.visit(ast)
                out_f.writeString(codegen.getCode())
                out_f.close()
            else:
                interp = src_Interpreter()
                interp.visit(ast)
            return
        interpreter = src_Interpreter()
        src_Utils.print("Haxic REPL v1.1, Haxic version 1.0 beta 3. Type Ctrl+C to exit.")
        while True:
            src_Utils.print("haxic >> ",False)
            Sys.stdout().flush()
            line = Sys.stdin().readLine()
            if (line is None):
                continue
            try:
                lexer = src_Lexer(line)
                tokens = lexer.tokenize()
                parser = src_Parser(tokens)
                ast = parser.parse()
                compiler = src_compiler_PyCompiler()
                interpreter.visit(ast)
            except BaseException as _g:
                err = haxe_Exception.caught(_g)
                src_Utils.print(("Error: " + HxOverrides.stringOrNull(err.details())))
src_Main._hx_class = src_Main

class src_ScopeState(Enum):
    __slots__ = ()
    _hx_class_name = "src.ScopeState"
    _hx_constructs = ["Global", "Function", "Loop"]
src_ScopeState.Global = src_ScopeState("Global", 0, ())
src_ScopeState.Function = src_ScopeState("Function", 1, ())
src_ScopeState.Loop = src_ScopeState("Loop", 2, ())
src_ScopeState._hx_class = src_ScopeState


class src_Parser:
    _hx_class_name = "src.Parser"
    __slots__ = ("tokens", "position", "scopeStates")
    _hx_fields = ["tokens", "position", "scopeStates"]
    _hx_methods = ["parse", "parsePrintStatement", "parseInputStatement", "parseLetStatement", "parseWhileStatement", "parseForeachStatement", "parseIfStatement", "parseIncStatement", "parseDecStatement", "parseReturnStatement", "parseFunctionStatement", "parseParameters", "parseBlockWithTerminators", "statement", "comparison", "expr", "term", "unary", "call", "factor", "match", "consume", "check", "advance", "isAtEnd", "peek", "previous"]

    def __init__(self,tokens):
        self.position = 0
        self.tokens = tokens
        self.scopeStates = [src_ScopeState.Global]

    def parse(self):
        statements = []
        while (not self.isAtEnd()):
            x = self.statement()
            statements.append(x)
        return statements

    def parsePrintStatement(self):
        self.advance()
        expr = self.comparison()
        self.consume(src_TokenType.SEMICOLON,"Expected ';' after value.")
        return src_ast_PrintStmt(expr,self.previous().line,self.previous().column)

    def parseInputStatement(self):
        self.advance()
        name = self.consume(src_TokenType.IDENTIFIER,"Expected variable after 'input'.")
        self.consume(src_TokenType.SEMICOLON,"Expected ';' after value.")
        return src_ast_InputStmt(src_ast_VariableExpr(name.value,name.line,name.column),name.line,name.column)

    def parseLetStatement(self):
        self.advance()
        bindings = []
        while True:
            name = self.consume(src_TokenType.IDENTIFIER,"Expected variable name in let statement.")
            x = src_ast_VariableExpr(name.value,name.line,name.column)
            bindings.append(x)
            if (not (self.match(src_TokenType.COMMA))):
                break
        if self.check(src_TokenType.EQUALS):
            self.consume(src_TokenType.EQUALS,"Expected '=' after variable names in let statement.")
            value = self.comparison()
            self.consume(src_TokenType.SEMICOLON,"Expected ';' after value.")
            return src_ast_LetStmt(bindings,value,self.previous().line,self.previous().column)
        else:
            self.consume(src_TokenType.SEMICOLON,"Expected ';' after variable names.")
            return src_ast_LetStmt(bindings,None,self.previous().line,self.previous().column)

    def parseWhileStatement(self):
        self.advance()
        condition = self.comparison()
        self.consume(src_TokenType.KEYWORD,"Expected 'do' after condition.")
        if (self.previous().value != "do"):
            raise haxe_Exception.thrown("Expected 'do' after condition.")
        _this = self.scopeStates
        _this.append(src_ScopeState.Loop)
        body = self.parseBlockWithTerminators(["end"],self.previous().line,self.previous().column)
        kwEnd = self.consume(src_TokenType.KEYWORD,"Expected 'end' after while statement.")
        if (kwEnd.value != "end"):
            raise haxe_Exception.thrown("Expected 'end' after while statement.")
        _this = self.scopeStates
        if (len(_this) != 0):
            _this.pop()
        return src_ast_WhileStmt(condition,body,condition.line,condition.column)

    def parseForeachStatement(self):
        self.advance()
        name = self.consume(src_TokenType.IDENTIFIER,"Expected loop variable after 'for'.")
        self.consume(src_TokenType.KEYWORD,"Expected 'in' after loop variable.")
        if (self.previous().value != "in"):
            raise haxe_Exception.thrown("Expected 'in' after loop variable.")
        iterable = self.comparison()
        self.consume(src_TokenType.KEYWORD,"Expected 'do' after iterable.")
        if (self.previous().value != "do"):
            raise haxe_Exception.thrown("Expected 'do' after iterable.")
        _this = self.scopeStates
        _this.append(src_ScopeState.Loop)
        body = self.parseBlockWithTerminators(["end"],self.previous().line,self.previous().column)
        kwEnd = self.consume(src_TokenType.KEYWORD,"Expected 'end' after for statement.")
        if (kwEnd.value != "end"):
            raise haxe_Exception.thrown("Expected 'end' after for statement.")
        _this = self.scopeStates
        if (len(_this) != 0):
            _this.pop()
        return src_ast_ForeachStmt(src_ast_VariableExpr(name.value,name.line,name.column),iterable,body,name.line,name.column)

    def parseIfStatement(self):
        self.advance()
        condition = self.comparison()
        self.consume(src_TokenType.KEYWORD,"Expected 'then' after condition.")
        if (self.previous().value != "then"):
            raise haxe_Exception.thrown("Expected 'then' after condition.")
        thenBranch = self.parseBlockWithTerminators(["else", "end"],self.previous().line,self.previous().column)
        elseBranch = None
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "else"))):
            self.advance()
            elseBranch = self.parseBlockWithTerminators(["end"],self.previous().line,self.previous().column)
        kwEnd = self.consume(src_TokenType.KEYWORD,"Expected 'end' after if statement.")
        if (kwEnd.value != "end"):
            raise haxe_Exception.thrown("Expected 'end' after if statement.")
        return src_ast_IfStmt(condition,thenBranch,elseBranch,condition.line,condition.column)

    def parseIncStatement(self):
        self.advance()
        name = self.consume(src_TokenType.IDENTIFIER,"Expected variable after 'inc'.")
        self.consume(src_TokenType.SEMICOLON,"Expected ';' after variable.")
        varExpr = src_ast_VariableExpr(name.value,name.line,name.column)
        one = src_ast_NumberExpr(1,name.line,name.column)
        binary = src_ast_BinaryExpr(varExpr,src_Token(src_TokenType.PLUS,"+",name.line,name.column),one,name.line,name.column)
        return src_ast_LetStmt([src_ast_VariableExpr(("null" if ((name.value is None)) else Std.string(name.value)),name.line,name.column)],binary,name.line,name.column)

    def parseDecStatement(self):
        self.advance()
        name = self.consume(src_TokenType.IDENTIFIER,"Expected variable after 'dec'.")
        self.consume(src_TokenType.SEMICOLON,"Expected ';' after variable.")
        varExpr = src_ast_VariableExpr(name.value,name.line,name.column)
        one = src_ast_NumberExpr(1,name.line,name.column)
        binary = src_ast_BinaryExpr(varExpr,src_Token(src_TokenType.MINUS,"-",name.line,name.column),one,name.line,name.column)
        return src_ast_LetStmt([src_ast_VariableExpr(("null" if ((name.value is None)) else Std.string(name.value)),name.line,name.column)],binary,name.line,name.column)

    def parseReturnStatement(self):
        if (python_internal_ArrayImpl._get(self.scopeStates, (len(self.scopeStates) - 1)) == src_ScopeState.Function):
            self.advance()
            expr = src_ast_NullExpr(self.previous().line,self.previous().column)
            if (not self.check(src_TokenType.SEMICOLON)):
                expr = self.comparison()
            self.consume(src_TokenType.SEMICOLON,"Expected ';'.")
            return src_ast_ReturnStmt(expr,self.previous().line,self.previous().column)
        else:
            raise haxe_Exception.thrown(((("Return statement not allowed outside of function at line " + Std.string(self.peek().line)) + ", column ") + Std.string(self.peek().column)))

    def parseFunctionStatement(self):
        self.advance()
        nameToken = self.consume(src_TokenType.IDENTIFIER,"Expected function name after 'func'.")
        name = nameToken.value
        self.consume(src_TokenType.LPAREN,"Expected '(' after function name.")
        params = self.parseParameters()
        self.consume(src_TokenType.RPAREN,"Expected ')' after parameters.")
        _this = self.scopeStates
        _this.append(src_ScopeState.Function)
        body = self.parseBlockWithTerminators(["end"],self.previous().line,self.previous().column)
        kwEnd = self.consume(src_TokenType.KEYWORD,"Expected 'end' after function body.")
        if (kwEnd.value != "end"):
            raise haxe_Exception.thrown("Expected 'end' after function body.")
        _this = self.scopeStates
        if (len(_this) != 0):
            _this.pop()
        return src_ast_FunctionStmt(name,params,body,nameToken.line,nameToken.column)

    def parseParameters(self):
        params = []
        if (not self.check(src_TokenType.RPAREN)):
            while True:
                name = self.consume(src_TokenType.IDENTIFIER,"Expected parameter name.")
                defaultValue = None
                if self.match(src_TokenType.EQUALS):
                    defaultValue = self.expr()
                x = src_ast_Parameter(name.value,defaultValue,name.line,name.column)
                params.append(x)
                if (not (self.match(src_TokenType.COMMA))):
                    break
        return params

    def parseBlockWithTerminators(self,terminators,line,column):
        statements = []
        while ((not self.isAtEnd()) and (not ((self.check(src_TokenType.KEYWORD) and ((python_internal_ArrayImpl.indexOf(terminators,self.peek().value,None) != -1)))))):
            x = self.statement()
            statements.append(x)
        return src_ast_BlockStmt(statements,line,column)

    def statement(self):
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "print"))):
            return self.parsePrintStatement()
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "input"))):
            return self.parseInputStatement()
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "let"))):
            return self.parseLetStatement()
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "if"))):
            return self.parseIfStatement()
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "while"))):
            return self.parseWhileStatement()
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "for"))):
            return self.parseForeachStatement()
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "inc"))):
            return self.parseIncStatement()
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "dec"))):
            return self.parseDecStatement()
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "return"))):
            return self.parseReturnStatement()
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "func"))):
            return self.parseFunctionStatement()
        val = self.comparison()
        self.consume(src_TokenType.SEMICOLON,"Expected ';' after expression.")
        return src_ast_ExprStmt(val,val.line,val.column)

    def comparison(self):
        left = self.expr()
        while (((((self.match(src_TokenType.GT) or self.match(src_TokenType.GTEQ)) or self.match(src_TokenType.LT)) or self.match(src_TokenType.LTEQ)) or self.match(src_TokenType.EQEQ)) or self.match(src_TokenType.NOTEQ)):
            oper = self.previous()
            right = self.term()
            left = src_ast_BinaryExpr(left,oper,right,oper.line,oper.column)
        return left

    def expr(self):
        left = self.term()
        while (self.match(src_TokenType.PLUS) or self.match(src_TokenType.MINUS)):
            oper = self.previous()
            right = self.term()
            left = src_ast_BinaryExpr(left,oper,right,oper.line,oper.column)
        return left

    def term(self):
        left = self.unary()
        while (self.match(src_TokenType.STAR) or self.match(src_TokenType.SLASH)):
            oper = self.previous()
            right = self.unary()
            left = src_ast_BinaryExpr(left,oper,right,oper.line,oper.column)
        return left

    def unary(self):
        if (self.check(src_TokenType.BANG) or self.check(src_TokenType.MINUS)):
            oper = self.advance()
            right = self.unary()
            return src_ast_UnaryExpr(oper,right,oper.line,oper.column)
        return self.call()

    def call(self):
        expr = self.factor()
        while True:
            if self.match(src_TokenType.LPAREN):
                args = []
                if (not self.check(src_TokenType.RPAREN)):
                    while True:
                        x = self.comparison()
                        args.append(x)
                        if (not (self.match(src_TokenType.COMMA))):
                            break
                paren = self.consume(src_TokenType.RPAREN,"Expected ')' after arguments.")
                expr = src_ast_CallExpr(expr,args,paren.line,paren.column)
            elif self.match(src_TokenType.LBRACK):
                indexExpr = self.comparison()
                rbrack = self.consume(src_TokenType.RBRACK,"Expected ']' after array index.")
                expr = src_ast_IndexExpr(expr,indexExpr,rbrack.line,rbrack.column)
            elif self.match(src_TokenType.PERIOD):
                name = self.consume(src_TokenType.IDENTIFIER,"Expected identifier after period.")
                expr = src_ast_IndexExpr(expr,src_ast_StringExpr(("null" if ((name.value is None)) else Std.string(name.value)),name.line,name.column),name.line,name.column)
            else:
                break
        return expr

    def factor(self):
        if self.match(src_TokenType.NUMBER):
            return src_ast_NumberExpr(Std.parseFloat(self.previous().value),self.previous().line,self.previous().column)
        if self.match(src_TokenType.LPAREN):
            expr = self.expr()
            self.consume(src_TokenType.RPAREN,"Expected ')' after expression.")
            return expr
        if self.match(src_TokenType.IDENTIFIER):
            return src_ast_VariableExpr(self.previous().value,self.previous().line,self.previous().column)
        if self.match(src_TokenType.STRING):
            return src_ast_StringExpr(self.previous().value,self.previous().line,self.previous().column)
        if (self.check(src_TokenType.KEYWORD) and (((self.peek().value == "true") or ((self.peek().value == "false"))))):
            kw = self.advance()
            return src_ast_BooleanExpr((kw.value == "true"),kw.line,kw.column)
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "null"))):
            kw = self.advance()
            return src_ast_NullExpr(kw.line,kw.column)
        if self.check(src_TokenType.LBRACK):
            self.advance()
            elements = []
            if (not self.check(src_TokenType.RBRACK)):
                while True:
                    x = self.comparison()
                    elements.append(x)
                    if (not (self.match(src_TokenType.COMMA))):
                        break
            self.consume(src_TokenType.RBRACK,"Expected ']' after array elements.")
            return src_ast_ArrayExpr(elements,self.previous().line,self.previous().column)
        if self.check(src_TokenType.LBRACE):
            self.advance()
            pairs = []
            if (not self.check(src_TokenType.RBRACE)):
                while True:
                    keyToken = self.consume(src_TokenType.IDENTIFIER,"Expected key in map literal.")
                    self.consume(src_TokenType.ARROW,"Expected '=>' after key in map literal.")
                    valueExpr = self.comparison()
                    x = _hx_AnonObject({'key': keyToken.value, 'value': valueExpr, 'line': keyToken.line, 'column': keyToken.column})
                    pairs.append(x)
                    if (not (self.match(src_TokenType.COMMA))):
                        break
            self.consume(src_TokenType.RBRACE,"Expected '}' after map literal.")
            return src_ast_MapExpr(pairs,self.previous().line,self.previous().column)
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "func"))):
            kw = self.advance()
            self.consume(src_TokenType.LPAREN,"Expected '(' after 'func'.")
            params = self.parseParameters()
            self.consume(src_TokenType.RPAREN,"Expected ')' after parameters.")
            _this = self.scopeStates
            _this.append(src_ScopeState.Function)
            body = self.parseBlockWithTerminators(["end"],self.previous().line,self.previous().column)
            kwEnd = self.consume(src_TokenType.KEYWORD,"Expected 'end' after function body.")
            if (kwEnd.value != "end"):
                raise haxe_Exception.thrown("Expected 'end' after function body.")
            _this = self.scopeStates
            if (len(_this) != 0):
                _this.pop()
            return src_ast_FunctionExpr("<lambda>",params,body,kw.line,kw.column)
        raise haxe_Exception.thrown(("Unexpected token in factor: " + Std.string(self.peek())))

    def match(self,_hx_type):
        if self.check(_hx_type):
            self.advance()
            return True
        return False

    def consume(self,_hx_type,message):
        if self.check(_hx_type):
            return self.advance()
        raise haxe_Exception.thrown(((("null" if message is None else message) + " -- Found: ") + Std.string(self.peek())))

    def check(self,_hx_type):
        if self.isAtEnd():
            return False
        return (self.peek().type == _hx_type)

    def advance(self):
        if (not self.isAtEnd()):
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.position
            _hx_local_0.position = (_hx_local_1 + 1)
            _hx_local_1
        return self.previous()

    def isAtEnd(self):
        return (self.position >= len(self.tokens))

    def peek(self):
        if self.isAtEnd():
            return None
        else:
            return python_internal_ArrayImpl._get(self.tokens, self.position)

    def previous(self):
        if (self.position > 0):
            return python_internal_ArrayImpl._get(self.tokens, (self.position - 1))
        else:
            return None

src_Parser._hx_class = src_Parser


class src_Token:
    _hx_class_name = "src.Token"
    __slots__ = ("type", "value", "line", "column")
    _hx_fields = ["type", "value", "line", "column"]
    _hx_methods = ["toString"]

    def __init__(self,_hx_type,value,line,column):
        self.type = _hx_type
        self.value = value
        self.line = line
        self.column = column

    def toString(self):
        return (((((((((("Token(type:" + Std.string(self.type)) + ", value:'") + HxOverrides.stringOrNull((("null" if ((self.value is None)) else Std.string(self.value))))) + "'(") + HxOverrides.stringOrNull(Type.getClassName(Type.getClass(self.value)))) + "), line:") + Std.string(self.line)) + ", column:") + Std.string(self.column)) + ")")

src_Token._hx_class = src_Token

class src_TokenType(Enum):
    __slots__ = ()
    _hx_class_name = "src.TokenType"
    _hx_constructs = ["IDENTIFIER", "KEYWORD", "NUMBER", "STRING", "PLUS", "MINUS", "STAR", "SLASH", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "LBRACE", "RBRACE", "SEMICOLON", "EQUALS", "COMMA", "PERIOD", "ARROW", "EQEQ", "NOTEQ", "GT", "GTEQ", "LT", "LTEQ", "BANG"]
src_TokenType.IDENTIFIER = src_TokenType("IDENTIFIER", 0, ())
src_TokenType.KEYWORD = src_TokenType("KEYWORD", 1, ())
src_TokenType.NUMBER = src_TokenType("NUMBER", 2, ())
src_TokenType.STRING = src_TokenType("STRING", 3, ())
src_TokenType.PLUS = src_TokenType("PLUS", 4, ())
src_TokenType.MINUS = src_TokenType("MINUS", 5, ())
src_TokenType.STAR = src_TokenType("STAR", 6, ())
src_TokenType.SLASH = src_TokenType("SLASH", 7, ())
src_TokenType.LPAREN = src_TokenType("LPAREN", 8, ())
src_TokenType.RPAREN = src_TokenType("RPAREN", 9, ())
src_TokenType.LBRACK = src_TokenType("LBRACK", 10, ())
src_TokenType.RBRACK = src_TokenType("RBRACK", 11, ())
src_TokenType.LBRACE = src_TokenType("LBRACE", 12, ())
src_TokenType.RBRACE = src_TokenType("RBRACE", 13, ())
src_TokenType.SEMICOLON = src_TokenType("SEMICOLON", 14, ())
src_TokenType.EQUALS = src_TokenType("EQUALS", 15, ())
src_TokenType.COMMA = src_TokenType("COMMA", 16, ())
src_TokenType.PERIOD = src_TokenType("PERIOD", 17, ())
src_TokenType.ARROW = src_TokenType("ARROW", 18, ())
src_TokenType.EQEQ = src_TokenType("EQEQ", 19, ())
src_TokenType.NOTEQ = src_TokenType("NOTEQ", 20, ())
src_TokenType.GT = src_TokenType("GT", 21, ())
src_TokenType.GTEQ = src_TokenType("GTEQ", 22, ())
src_TokenType.LT = src_TokenType("LT", 23, ())
src_TokenType.LTEQ = src_TokenType("LTEQ", 24, ())
src_TokenType.BANG = src_TokenType("BANG", 25, ())
src_TokenType._hx_class = src_TokenType


class src_Utils:
    _hx_class_name = "src.Utils"
    __slots__ = ()
    _hx_statics = ["print", "stringify"]

    @staticmethod
    def print(value,writeNewLine = None):
        if (writeNewLine is None):
            writeNewLine = True
        Sys.stdout().write(haxe_io_Bytes.ofString((("null" if value is None else value) + HxOverrides.stringOrNull((("\n" if writeNewLine else ""))))))

    @staticmethod
    def stringify(value):
        tmp = value.index
        if (tmp == 0):
            n = value.params[0]
            return Std.string(n)
        elif (tmp == 1):
            b = value.params[0]
            return Std.string(b)
        elif (tmp == 2):
            return "null"
        elif (tmp == 3):
            s = value.params[0]
            return s
        elif (tmp == 4):
            arr = value.params[0]
            _this = list(map(src_Utils.stringify,arr))
            return (("[" + HxOverrides.stringOrNull(", ".join([python_Boot.toString1(x1,'') for x1 in _this]))) + "]")
        elif (tmp == 5):
            _hx_map = value.params[0]
            items = []
            key = _hx_map.keys()
            while key.hasNext():
                key1 = key.next()
                x = ((("null" if key1 is None else key1) + " => ") + HxOverrides.stringOrNull(src_Utils.stringify(_hx_map.h.get(key1,None))))
                items.append(x)
            return (("{" + HxOverrides.stringOrNull(", ".join([python_Boot.toString1(x1,'') for x1 in items]))) + "}")
        elif (tmp == 6):
            fn = value.params[0]
            return Std.string(fn)
        elif (tmp == 7):
            fn = value.params[0]
            return Std.string(fn)
        else:
            pass
src_Utils._hx_class = src_Utils


class src_ast_Node:
    _hx_class_name = "src.ast.Node"
    __slots__ = ("line", "column")
    _hx_fields = ["line", "column"]
    _hx_methods = ["toString"]

    def __init__(self,line,column):
        self.line = line
        self.column = column

    def toString(self):
        return "Node"

src_ast_Node._hx_class = src_ast_Node


class src_ast_Expr(src_ast_Node):
    _hx_class_name = "src.ast.Expr"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Node


    def __init__(self,line,column):
        super().__init__(line,column)

    def toString(self):
        return "Expr"

src_ast_Expr._hx_class = src_ast_Expr


class src_ast_ArrayExpr(src_ast_Expr):
    _hx_class_name = "src.ast.ArrayExpr"
    __slots__ = ("elements",)
    _hx_fields = ["elements"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Expr


    def __init__(self,elements,line,column):
        self.elements = None
        super().__init__(line,column)
        self.elements = elements

    def toString(self):
        def _hx_local_0(e):
            return e.toString()
        _this = list(map(_hx_local_0,self.elements))
        return (("Array(" + HxOverrides.stringOrNull(", ".join([python_Boot.toString1(x1,'') for x1 in _this]))) + ")")

src_ast_ArrayExpr._hx_class = src_ast_ArrayExpr


class src_ast_BinaryExpr(src_ast_Expr):
    _hx_class_name = "src.ast.BinaryExpr"
    __slots__ = ("left", "oper", "right")
    _hx_fields = ["left", "oper", "right"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Expr


    def __init__(self,left,oper,right,line,column):
        self.right = None
        self.oper = None
        self.left = None
        super().__init__(line,column)
        self.left = left
        self.oper = oper
        self.right = right

    def toString(self):
        return (((((("(" + HxOverrides.stringOrNull(self.left.toString())) + " ") + HxOverrides.stringOrNull((("null" if ((self.oper.value is None)) else Std.string(self.oper.value))))) + " ") + HxOverrides.stringOrNull(self.right.toString())) + ")")

src_ast_BinaryExpr._hx_class = src_ast_BinaryExpr


class src_ast_Stmt(src_ast_Node):
    _hx_class_name = "src.ast.Stmt"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Node


    def __init__(self,line,column):
        super().__init__(line,column)

    def toString(self):
        return "Stmt"

src_ast_Stmt._hx_class = src_ast_Stmt


class src_ast_BlockStmt(src_ast_Stmt):
    _hx_class_name = "src.ast.BlockStmt"
    __slots__ = ("statements",)
    _hx_fields = ["statements"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Stmt


    def __init__(self,statements,line,column):
        self.statements = None
        super().__init__(line,column)
        self.statements = statements

    def toString(self):
        _this = self.statements
        return (("Block(" + HxOverrides.stringOrNull(", ".join([python_Boot.toString1(x1,'') for x1 in _this]))) + ")")

src_ast_BlockStmt._hx_class = src_ast_BlockStmt


class src_ast_BooleanExpr(src_ast_Expr):
    _hx_class_name = "src.ast.BooleanExpr"
    __slots__ = ("value",)
    _hx_fields = ["value"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Expr


    def __init__(self,value,line,column):
        self.value = None
        super().__init__(line,column)
        self.value = value

    def toString(self):
        return (("Boolean(" + Std.string(self.value)) + ")")

src_ast_BooleanExpr._hx_class = src_ast_BooleanExpr


class src_ast_CallExpr(src_ast_Expr):
    _hx_class_name = "src.ast.CallExpr"
    __slots__ = ("callee", "arguments")
    _hx_fields = ["callee", "arguments"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Expr


    def __init__(self,callee,arguments,line,column):
        self.arguments = None
        self.callee = None
        super().__init__(line,column)
        self.callee = callee
        self.arguments = arguments

    def toString(self):
        tmp = (("Call(callee=" + HxOverrides.stringOrNull(self.callee.toString())) + ", args=[")
        def _hx_local_0(arg):
            return arg.toString()
        _this = list(map(_hx_local_0,self.arguments))
        return ((("null" if tmp is None else tmp) + HxOverrides.stringOrNull(", ".join([python_Boot.toString1(x1,'') for x1 in _this]))) + "])")

src_ast_CallExpr._hx_class = src_ast_CallExpr


class src_ast_ExprStmt(src_ast_Stmt):
    _hx_class_name = "src.ast.ExprStmt"
    __slots__ = ("expr",)
    _hx_fields = ["expr"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Stmt


    def __init__(self,expr,line,column):
        self.expr = None
        super().__init__(line,column)
        self.expr = expr

    def toString(self):
        return (("Expr(" + HxOverrides.stringOrNull(self.expr.toString())) + ")")

src_ast_ExprStmt._hx_class = src_ast_ExprStmt


class src_ast_ForeachStmt(src_ast_Stmt):
    _hx_class_name = "src.ast.ForeachStmt"
    __slots__ = ("target", "variable", "body")
    _hx_fields = ["target", "variable", "body"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Stmt


    def __init__(self,variable,target,body,line,column):
        self.body = None
        self.variable = None
        self.target = None
        super().__init__(line,column)
        self.variable = variable
        self.target = target
        self.body = body

    def toString(self):
        return (((((("Foreach(variable=" + HxOverrides.stringOrNull(self.variable.toString())) + ", target=") + HxOverrides.stringOrNull(self.target.toString())) + ", body=") + HxOverrides.stringOrNull(self.body.toString())) + ")")

src_ast_ForeachStmt._hx_class = src_ast_ForeachStmt


class src_ast_FunctionExpr(src_ast_Expr):
    _hx_class_name = "src.ast.FunctionExpr"
    __slots__ = ("name", "params", "body")
    _hx_fields = ["name", "params", "body"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Expr


    def __init__(self,name,params,body,line,column):
        self.body = None
        self.params = None
        self.name = None
        super().__init__(line,column)
        self.name = name
        self.params = params
        self.body = body

    def toString(self):
        _this = self.params
        return (((((("Function(name=" + HxOverrides.stringOrNull(self.name)) + ", args=[") + HxOverrides.stringOrNull(", ".join([python_Boot.toString1(x1,'') for x1 in _this]))) + "], body=") + HxOverrides.stringOrNull(self.body.toString())) + ")")

src_ast_FunctionExpr._hx_class = src_ast_FunctionExpr


class src_ast_FunctionStmt(src_ast_Stmt):
    _hx_class_name = "src.ast.FunctionStmt"
    __slots__ = ("name", "params", "body")
    _hx_fields = ["name", "params", "body"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Stmt


    def __init__(self,name,params,body,line,column):
        self.body = None
        self.params = None
        self.name = None
        super().__init__(line,column)
        self.name = name
        self.params = params
        self.body = body

    def toString(self):
        _this = self.params
        return (((((("Function(name=" + HxOverrides.stringOrNull(self.name)) + ", args=[") + HxOverrides.stringOrNull(", ".join([python_Boot.toString1(x1,'') for x1 in _this]))) + "], body=") + HxOverrides.stringOrNull(self.body.toString())) + ")")

src_ast_FunctionStmt._hx_class = src_ast_FunctionStmt


class src_ast_IfStmt(src_ast_Stmt):
    _hx_class_name = "src.ast.IfStmt"
    __slots__ = ("condition", "thenBranch", "elseBranch")
    _hx_fields = ["condition", "thenBranch", "elseBranch"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Stmt


    def __init__(self,condition,thenBranch,elseBranch = None,line = None,column = None):
        self.elseBranch = None
        self.thenBranch = None
        self.condition = None
        super().__init__(line,column)
        self.condition = condition
        self.thenBranch = thenBranch
        self.elseBranch = elseBranch

    def toString(self):
        return ((((("If(cond=" + HxOverrides.stringOrNull(self.condition.toString())) + ", then=") + HxOverrides.stringOrNull(self.thenBranch.toString())) + HxOverrides.stringOrNull((((", else=" + HxOverrides.stringOrNull(self.elseBranch.toString())) if ((self.elseBranch is not None)) else "")))) + ")")

src_ast_IfStmt._hx_class = src_ast_IfStmt


class src_ast_IndexExpr(src_ast_Expr):
    _hx_class_name = "src.ast.IndexExpr"
    __slots__ = ("target", "index")
    _hx_fields = ["target", "index"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Expr


    def __init__(self,target,index,line,column):
        self.index = None
        self.target = None
        super().__init__(line,column)
        self.target = target
        self.index = index

    def toString(self):
        return (((("Index(target=" + HxOverrides.stringOrNull(self.target.toString())) + ", index=") + HxOverrides.stringOrNull(self.index.toString())) + ")")

src_ast_IndexExpr._hx_class = src_ast_IndexExpr


class src_ast_InputStmt(src_ast_Stmt):
    _hx_class_name = "src.ast.InputStmt"
    __slots__ = ("target",)
    _hx_fields = ["target"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Stmt


    def __init__(self,target,line,column):
        self.target = None
        super().__init__(line,column)
        self.target = target

    def toString(self):
        return (("Input(" + HxOverrides.stringOrNull(self.target.toString())) + ")")

src_ast_InputStmt._hx_class = src_ast_InputStmt


class src_ast_LetStmt(src_ast_Stmt):
    _hx_class_name = "src.ast.LetStmt"
    __slots__ = ("bindings", "value")
    _hx_fields = ["bindings", "value"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Stmt


    def __init__(self,bindings,value,line,column):
        self.value = None
        self.bindings = None
        super().__init__(line,column)
        self.bindings = bindings
        self.value = value

    def toString(self):
        return (((("LetStmt(" + Std.string(self.bindings)) + ", ") + Std.string(self.value)) + ")")

src_ast_LetStmt._hx_class = src_ast_LetStmt


class src_ast_MapExpr(src_ast_Expr):
    _hx_class_name = "src.ast.MapExpr"
    __slots__ = ("pairs",)
    _hx_fields = ["pairs"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Expr


    def __init__(self,pairs,line,column):
        self.pairs = None
        super().__init__(line,column)
        self.pairs = pairs

    def toString(self):
        def _hx_local_0(pair):
            return ((Std.string(pair.key) + " => ") + Std.string(pair.value))
        _this = list(map(_hx_local_0,self.pairs))
        pairsStr = ", ".join([python_Boot.toString1(x1,'') for x1 in _this])
        return (("{" + ("null" if pairsStr is None else pairsStr)) + "}")

src_ast_MapExpr._hx_class = src_ast_MapExpr


class src_ast_NullExpr(src_ast_Expr):
    _hx_class_name = "src.ast.NullExpr"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Expr


    def __init__(self,line,column):
        super().__init__(line,column)

    def toString(self):
        return "null"

src_ast_NullExpr._hx_class = src_ast_NullExpr


class src_ast_NumberExpr(src_ast_Expr):
    _hx_class_name = "src.ast.NumberExpr"
    __slots__ = ("value",)
    _hx_fields = ["value"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Expr


    def __init__(self,value,line,column):
        self.value = None
        super().__init__(line,column)
        self.value = value

    def toString(self):
        return (("Num(" + Std.string(self.value)) + ")")

src_ast_NumberExpr._hx_class = src_ast_NumberExpr


class src_ast_Parameter:
    _hx_class_name = "src.ast.Parameter"
    __slots__ = ("name", "defaultValue", "line", "column")
    _hx_fields = ["name", "defaultValue", "line", "column"]
    _hx_methods = ["toString"]

    def __init__(self,name,defaultValue,line,column):
        self.name = name
        self.defaultValue = defaultValue
        self.line = line
        self.column = column

    def toString(self):
        return ((("Parameter(" + HxOverrides.stringOrNull(self.name)) + HxOverrides.stringOrNull((((", default=" + Std.string(self.defaultValue)) if ((self.defaultValue is not None)) else "")))) + ")")

src_ast_Parameter._hx_class = src_ast_Parameter


class src_ast_PrintStmt(src_ast_Stmt):
    _hx_class_name = "src.ast.PrintStmt"
    __slots__ = ("expr",)
    _hx_fields = ["expr"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Stmt


    def __init__(self,expr,line,column):
        self.expr = None
        super().__init__(line,column)
        self.expr = expr

    def toString(self):
        return (("Print(" + HxOverrides.stringOrNull(self.expr.toString())) + ")")

src_ast_PrintStmt._hx_class = src_ast_PrintStmt


class src_ast_ReturnStmt(src_ast_Stmt):
    _hx_class_name = "src.ast.ReturnStmt"
    __slots__ = ("value",)
    _hx_fields = ["value"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Stmt


    def __init__(self,value,line,column):
        self.value = None
        super().__init__(line,column)
        self.value = value

    def toString(self):
        return (("Return(" + HxOverrides.stringOrNull(self.value.toString())) + ")")

src_ast_ReturnStmt._hx_class = src_ast_ReturnStmt


class src_ast_StringExpr(src_ast_Expr):
    _hx_class_name = "src.ast.StringExpr"
    __slots__ = ("value",)
    _hx_fields = ["value"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Expr


    def __init__(self,value,line,column):
        self.value = None
        super().__init__(line,column)
        self.value = value

    def toString(self):
        return (("\"" + HxOverrides.stringOrNull(self.value)) + "\"")

src_ast_StringExpr._hx_class = src_ast_StringExpr


class src_ast_UnaryExpr(src_ast_Expr):
    _hx_class_name = "src.ast.UnaryExpr"
    __slots__ = ("oper", "right")
    _hx_fields = ["oper", "right"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Expr


    def __init__(self,oper,right,line,column):
        self.right = None
        self.oper = None
        super().__init__(line,column)
        self.oper = oper
        self.right = right

    def toString(self):
        return (((("Unary(" + HxOverrides.stringOrNull((("null" if ((self.oper.value is None)) else Std.string(self.oper.value))))) + ", ") + HxOverrides.stringOrNull(self.right.toString())) + ")")

src_ast_UnaryExpr._hx_class = src_ast_UnaryExpr


class src_ast_VariableExpr(src_ast_Expr):
    _hx_class_name = "src.ast.VariableExpr"
    __slots__ = ("name",)
    _hx_fields = ["name"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Expr


    def __init__(self,name,line,column):
        self.name = None
        super().__init__(line,column)
        self.name = name

    def toString(self):
        return (("Var(" + HxOverrides.stringOrNull(self.name)) + ")")

src_ast_VariableExpr._hx_class = src_ast_VariableExpr


class src_ast_WhileStmt(src_ast_Stmt):
    _hx_class_name = "src.ast.WhileStmt"
    __slots__ = ("condition", "body")
    _hx_fields = ["condition", "body"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Stmt


    def __init__(self,condition,body,line,column):
        self.body = None
        self.condition = None
        super().__init__(line,column)
        self.condition = condition
        self.body = body

    def toString(self):
        return (((("While(condition=" + HxOverrides.stringOrNull(self.condition.toString())) + ", body=") + HxOverrides.stringOrNull(self.body.toString())) + ")")

src_ast_WhileStmt._hx_class = src_ast_WhileStmt


class src_compiler_PyCompiler:
    _hx_class_name = "src.compiler.PyCompiler"
    __slots__ = ("code", "head", "indent", "lambda_idx")
    _hx_fields = ["code", "head", "indent", "lambda_idx"]
    _hx_methods = ["new_lambda_id", "writeHeader", "writeIndent", "write", "write_head", "getCode", "visit", "visitStmt", "visitExpr", "visitPrintStmt", "visitInputStmt", "visitLetStmt", "visitIfStmt", "visitForeachStmt", "visitWhileStmt", "visitBlockStmt", "visitExprStmt", "visitFunctionStmt", "visitReturnStmt", "visitBinaryExpr", "visitNumberExpr", "visitVariableExpr", "visitUnaryExpr", "visitStringExpr", "visitArrayExpr", "visitIndexExpr", "visitCallExpr", "visitBooleanExpr", "visitNullExpr", "visitFunctionExpr", "visitMapExpr"]

    def __init__(self):
        self.code = ""
        self.head = ""
        self.indent = 0
        self.lambda_idx = 0
        self.writeHeader()

    def new_lambda_id(self):
        def _hx_local_3():
            def _hx_local_2():
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.lambda_idx
                _hx_local_0.lambda_idx = (_hx_local_1 + 1)
                return _hx_local_1
            return ("$lambda" + Std.string(_hx_local_2()))
        return _hx_local_3()

    def writeHeader(self):
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.head
        _hx_local_0.head = (("null" if _hx_local_1 is None else _hx_local_1) + "import haxic_std\n\n")
        _hx_local_0.head

    def writeIndent(self):
        _g = 0
        _g1 = self.indent
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            self.write("\t")

    def write(self,text):
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.code
        _hx_local_0.code = (("null" if _hx_local_1 is None else _hx_local_1) + ("null" if text is None else text))
        _hx_local_0.code

    def write_head(self,text):
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.head
        _hx_local_0.head = (("null" if _hx_local_1 is None else _hx_local_1) + ("null" if text is None else text))
        _hx_local_0.head

    def getCode(self):
        return (HxOverrides.stringOrNull(self.head) + HxOverrides.stringOrNull(self.code))

    def visit(self,ast):
        _g = 0
        while (_g < len(ast)):
            stmt = (ast[_g] if _g >= 0 and _g < len(ast) else None)
            _g = (_g + 1)
            if (stmt is not None):
                self.visitStmt(stmt)

    def visitStmt(self,stmt):
        self.writeIndent()
        if Std.isOfType(stmt,src_ast_PrintStmt):
            self.visitPrintStmt(stmt)
        elif Std.isOfType(stmt,src_ast_InputStmt):
            self.visitInputStmt(stmt)
        elif Std.isOfType(stmt,src_ast_LetStmt):
            self.visitLetStmt(stmt)
        elif Std.isOfType(stmt,src_ast_IfStmt):
            self.visitIfStmt(stmt)
        elif Std.isOfType(stmt,src_ast_BlockStmt):
            self.visitBlockStmt(stmt)
        elif Std.isOfType(stmt,src_ast_ExprStmt):
            self.visitExprStmt(stmt)
        elif Std.isOfType(stmt,src_ast_WhileStmt):
            self.visitWhileStmt(stmt)
        elif Std.isOfType(stmt,src_ast_ForeachStmt):
            self.visitForeachStmt(stmt)
        elif Std.isOfType(stmt,src_ast_ReturnStmt):
            self.visitReturnStmt(stmt)
        elif Std.isOfType(stmt,src_ast_FunctionStmt):
            self.visitFunctionStmt(stmt)
        else:
            raise haxe_Exception.thrown(("Unknown statement type: " + Std.string(stmt)))

    def visitExpr(self,expr):
        if Std.isOfType(expr,src_ast_BinaryExpr):
            self.visitBinaryExpr(expr)
        elif Std.isOfType(expr,src_ast_NumberExpr):
            self.visitNumberExpr(expr)
        elif Std.isOfType(expr,src_ast_VariableExpr):
            self.visitVariableExpr(expr)
        elif Std.isOfType(expr,src_ast_UnaryExpr):
            self.visitUnaryExpr(expr)
        elif Std.isOfType(expr,src_ast_StringExpr):
            self.visitStringExpr(expr)
        elif Std.isOfType(expr,src_ast_CallExpr):
            self.visitCallExpr(expr)
        elif Std.isOfType(expr,src_ast_BooleanExpr):
            self.visitBooleanExpr(expr)
        elif Std.isOfType(expr,src_ast_NullExpr):
            self.visitNullExpr(expr)
        elif Std.isOfType(expr,src_ast_ArrayExpr):
            self.visitArrayExpr(expr)
        elif Std.isOfType(expr,src_ast_IndexExpr):
            self.visitIndexExpr(expr)
        elif Std.isOfType(expr,src_ast_MapExpr):
            self.visitMapExpr(expr)
        elif Std.isOfType(expr,src_ast_FunctionExpr):
            self.visitFunctionExpr(expr)
        else:
            raise haxe_Exception.thrown(("Unknown expression type: " + Std.string(expr)))

    def visitPrintStmt(self,stmt):
        self.write("print(")
        self.visitExpr(stmt.expr)
        self.write(")\n")

    def visitInputStmt(self,stmt):
        self.visitVariableExpr(stmt.target)
        self.write(" = input()\ntry: ")
        self.visitVariableExpr(stmt.target)
        self.write(" = float(")
        self.visitVariableExpr(stmt.target)
        self.write(")\nexcept ValueError: pass\n")

    def visitLetStmt(self,stmt):
        bind_idx = 0
        _g = 0
        _g1 = stmt.bindings
        while (_g < len(_g1)):
            bind = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            self.visitVariableExpr(bind)
            if (bind_idx < ((len(stmt.bindings) - 1))):
                self.write(", ")
        self.write(" = ")
        self.visitExpr(stmt.value)
        self.write("\n")

    def visitIfStmt(self,stmt):
        self.write("if ")
        self.visitExpr(stmt.condition)
        self.write(":\n")
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.indent
        _hx_local_0.indent = (_hx_local_1 + 1)
        _hx_local_1
        self.visitStmt(stmt.thenBranch)
        _hx_local_2 = self
        _hx_local_3 = _hx_local_2.indent
        _hx_local_2.indent = (_hx_local_3 - 1)
        _hx_local_3
        if (stmt.elseBranch is not None):
            self.writeIndent()
            self.write("else:")
            _hx_local_4 = self
            _hx_local_5 = _hx_local_4.indent
            _hx_local_4.indent = (_hx_local_5 + 1)
            _hx_local_5
            self.visitStmt(stmt.elseBranch)
            _hx_local_6 = self
            _hx_local_7 = _hx_local_6.indent
            _hx_local_6.indent = (_hx_local_7 - 1)
            _hx_local_7

    def visitForeachStmt(self,stmt):
        self.write("for ")
        self.visitVariableExpr(stmt.variable)
        self.write(" in ")
        self.visitExpr(stmt.target)
        self.write(":\n")
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.indent
        _hx_local_0.indent = (_hx_local_1 + 1)
        _hx_local_1
        self.visitStmt(stmt.body)
        _hx_local_2 = self
        _hx_local_3 = _hx_local_2.indent
        _hx_local_2.indent = (_hx_local_3 - 1)
        _hx_local_3

    def visitWhileStmt(self,stmt):
        self.write("while ")
        self.visitExpr(stmt.condition)
        self.write(":\n")
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.indent
        _hx_local_0.indent = (_hx_local_1 + 1)
        _hx_local_1
        self.visitStmt(stmt.body)
        _hx_local_2 = self
        _hx_local_3 = _hx_local_2.indent
        _hx_local_2.indent = (_hx_local_3 - 1)
        _hx_local_3

    def visitBlockStmt(self,stmt):
        _g = 0
        _g1 = stmt.statements
        while (_g < len(_g1)):
            st = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            self.visitStmt(st)

    def visitExprStmt(self,stmt):
        self.visitExpr(stmt.expr)
        self.write("\n")

    def visitFunctionStmt(self,stmt):
        self.write((("def " + HxOverrides.stringOrNull(stmt.name)) + "("))
        param_idx = 0
        _g = 0
        _g1 = stmt.params
        while (_g < len(_g1)):
            param = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            self.write(param.name)
            if (param.defaultValue is not None):
                self.write(" = ")
                self.visitExpr(param.defaultValue)
            if (param_idx < len(stmt.params)):
                self.write(", ")
        self.write("):\n")
        _hx_local_1 = self
        _hx_local_2 = _hx_local_1.indent
        _hx_local_1.indent = (_hx_local_2 + 1)
        _hx_local_2
        self.visitStmt(stmt.body)
        _hx_local_3 = self
        _hx_local_4 = _hx_local_3.indent
        _hx_local_3.indent = (_hx_local_4 - 1)
        _hx_local_4

    def visitReturnStmt(self,stmt):
        self.write("return ")
        self.visitExpr(stmt.value)
        self.write("\n")

    def visitBinaryExpr(self,expr):
        self.write("(")
        self.visitExpr(expr.left)
        self.write(((" " + HxOverrides.stringOrNull((("null" if ((expr.oper.value is None)) else Std.string(expr.oper.value))))) + " "))
        self.visitExpr(expr.right)
        self.write(")")

    def visitNumberExpr(self,expr):
        self.write(Std.string(expr.value))

    def visitVariableExpr(self,expr):
        self.write(expr.name)

    def visitUnaryExpr(self,expr):
        self.write("(")
        self.write(("null" if ((expr.oper.value is None)) else Std.string(expr.oper.value)))
        self.visitExpr(expr.right)
        self.write(")")

    def visitStringExpr(self,expr):
        self.write((("\"" + HxOverrides.stringOrNull(expr.value)) + "\""))

    def visitArrayExpr(self,expr):
        self.write("[")
        expr_idx = 0
        _g = 0
        _g1 = expr.elements
        while (_g < len(_g1)):
            value = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            self.visitExpr(value)
            if (expr_idx < ((len(expr.elements) - 1))):
                self.write(", ")
        self.write("]")

    def visitIndexExpr(self,expr):
        self.visitExpr(expr.target)
        self.write("[")
        self.visitExpr(expr.index)
        self.write("]")

    def visitCallExpr(self,expr):
        self.visitExpr(expr.callee)
        self.write("(")
        expr_idx = 0
        _g = 0
        _g1 = expr.arguments
        while (_g < len(_g1)):
            value = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            self.visitExpr(value)
            if (expr_idx < ((len(expr.arguments) - 1))):
                self.write(", ")
        self.write(")")

    def visitBooleanExpr(self,expr):
        self.write(("True" if (expr.value) else "False"))

    def visitNullExpr(self,expr):
        self.write("None")

    def visitFunctionExpr(self,expr):
        l_id = self.new_lambda_id()
        self.write_head((("def " + ("null" if l_id is None else l_id)) + "("))
        param_idx = 0
        _g = 0
        _g1 = expr.params
        while (_g < len(_g1)):
            param = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            self.write_head(param.name)
            if (param.defaultValue is not None):
                self.write_head(" = ")
                self.visitExpr(param.defaultValue)
            if (param_idx < len(expr.params)):
                self.write_head(", ")
        self.write_head("):\n")
        _hx_local_1 = self
        _hx_local_2 = _hx_local_1.indent
        _hx_local_1.indent = (_hx_local_2 + 1)
        _hx_local_2
        self.visitStmt(expr.body)
        _hx_local_3 = self
        _hx_local_4 = _hx_local_3.indent
        _hx_local_3.indent = (_hx_local_4 - 1)
        _hx_local_4
        self.write_head("\n")
        self.write(l_id)

    def visitMapExpr(self,expr):
        self.write("{")
        pair_idx = 0
        _g = 0
        _g1 = expr.pairs
        while (_g < len(_g1)):
            pair = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            self.write((HxOverrides.stringOrNull(pair.key) + ": "))
            self.visitExpr(pair.value)
            if (pair_idx < ((len(expr.pairs) - 1))):
                self.write(", ")
        self.write("}")

src_compiler_PyCompiler._hx_class = src_compiler_PyCompiler


class src_types_Function:
    _hx_class_name = "src.types.Function"
    __slots__ = ("name", "params", "body")
    _hx_fields = ["name", "params", "body"]
    _hx_methods = ["toString", "call"]

    def __init__(self,name,params,body):
        self.name = name
        self.params = params
        self.body = body

    def toString(self):
        return (((("<Function " + HxOverrides.stringOrNull(self.name)) + ":") + Std.string(len(self.params))) + ">")

    def call(self,args,interp):
        previousEnv = interp.environment
        interp.environment = src_Environment(previousEnv)
        _g = 0
        _g1 = len(self.params)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            param = (self.params[i] if i >= 0 and i < len(self.params) else None)
            value = None
            if (i < len(args)):
                value = (args[i] if i >= 0 and i < len(args) else None)
            elif (param.defaultValue is not None):
                value = interp.visitExpr(param.defaultValue)
            else:
                raise haxe_Exception.thrown((("Missing argument for parameter '" + HxOverrides.stringOrNull(param.name)) + "'"))
            interp.environment.define(param.name,value)
        interp.visitStmt(self.body)
        interp.environment = previousEnv

src_types_Function._hx_class = src_types_Function


class src_types_NativeFunction:
    _hx_class_name = "src.types.NativeFunction"
    __slots__ = ("name", "params", "body")
    _hx_fields = ["name", "params", "body"]
    _hx_methods = ["toString", "call"]

    def __init__(self,name,params,body):
        self.name = name
        self.params = params
        self.body = body

    def toString(self):
        return (((("<Native function " + HxOverrides.stringOrNull(self.name)) + ":") + Std.string(len(self.params))) + ">")

    def call(self,args,interp):
        previousEnv = interp.environment
        interp.environment = src_Environment(previousEnv)
        _g = 0
        _g1 = len(self.params)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            param = (self.params[i] if i >= 0 and i < len(self.params) else None)
            value = None
            if (i < len(args)):
                value = (args[i] if i >= 0 and i < len(args) else None)
            elif (param.defaultValue is not None):
                value = interp.visitExpr(param.defaultValue)
            else:
                raise haxe_Exception.thrown((("Missing argument for parameter '" + HxOverrides.stringOrNull(param.name)) + "'"))
            interp.environment.define(param.name,value)
        value = self.body(interp.environment)
        interp.environment = previousEnv
        return value

src_types_NativeFunction._hx_class = src_types_NativeFunction


class src_types_V:
    _hx_class_name = "src.types.V"
    __slots__ = ()
    _hx_statics = ["toNumber", "isTruthy", "toString", "toArray", "toMap", "toFunc", "toNativeFunc"]

    @staticmethod
    def toNumber(v):
        tmp = v.index
        if (tmp == 0):
            x = v.params[0]
            return x
        elif (tmp == 1):
            b = v.params[0]
            if b:
                return 1.0
            else:
                return 0.0
        elif (tmp == 2):
            return 0.0
        elif (tmp == 3):
            s = v.params[0]
            return Std.parseFloat(s)
        else:
            raise haxe_Exception.thrown(("Cannot convert to number: " + Std.string(v)))

    @staticmethod
    def isTruthy(v):
        tmp = v.index
        if (tmp == 0):
            n = v.params[0]
            return (n != 0)
        elif (tmp == 1):
            b = v.params[0]
            return b
        elif (tmp == 2):
            return False
        elif (tmp == 3):
            s = v.params[0]
            return (len(s) > 0)
        elif (tmp == 4):
            a = v.params[0]
            return (len(a) > 0)
        elif (tmp == 5):
            m = v.params[0]
            return m.keys().hasNext()
        else:
            return True

    @staticmethod
    def toString(v):
        tmp = v.index
        if (tmp == 0):
            n = v.params[0]
            return Std.string(n)
        elif (tmp == 1):
            b = v.params[0]
            if b:
                return "true"
            else:
                return "false"
        elif (tmp == 2):
            return "null"
        elif (tmp == 3):
            s = v.params[0]
            return s
        elif (tmp == 4):
            a = v.params[0]
            parts = []
            _g = 0
            while (_g < len(a)):
                x = (a[_g] if _g >= 0 and _g < len(a) else None)
                _g = (_g + 1)
                x1 = src_types_V.toString(x)
                parts.append(x1)
            return (("[" + HxOverrides.stringOrNull(", ".join([python_Boot.toString1(x1,'') for x1 in parts]))) + "]")
        elif (tmp == 5):
            m = v.params[0]
            parts = []
            k = m.keys()
            while k.hasNext():
                k1 = k.next()
                x = ((("null" if k1 is None else k1) + " => ") + HxOverrides.stringOrNull(src_types_V.toString(m.h.get(k1,None))))
                parts.append(x)
            return (("{" + HxOverrides.stringOrNull(", ".join([python_Boot.toString1(x1,'') for x1 in parts]))) + "}")
        elif (tmp == 6):
            f = v.params[0]
            return (((("<Function " + HxOverrides.stringOrNull(f.name)) + ":") + Std.string(len(f.params))) + ">")
        elif (tmp == 7):
            n = v.params[0]
            return (((("<Native function " + HxOverrides.stringOrNull(n.name)) + ":") + Std.string(len(n.params))) + ">")
        else:
            pass

    @staticmethod
    def toArray(v):
        if (v.index == 4):
            a = v.params[0]
            return a
        else:
            raise haxe_Exception.thrown(("Cannot convert to array: " + Std.string(v)))

    @staticmethod
    def toMap(v):
        if (v.index == 5):
            m = v.params[0]
            return m
        else:
            raise haxe_Exception.thrown(("Cannot convert to map: " + Std.string(v)))

    @staticmethod
    def toFunc(v):
        if (v.index == 6):
            f = v.params[0]
            return f
        else:
            raise haxe_Exception.thrown(("Cannot convert to map: " + Std.string(v)))

    @staticmethod
    def toNativeFunc(v):
        if (v.index == 7):
            f = v.params[0]
            return f
        else:
            raise haxe_Exception.thrown(("Cannot convert to map: " + Std.string(v)))
src_types_V._hx_class = src_types_V

class src_types_Value(Enum):
    __slots__ = ()
    _hx_class_name = "src.types.Value"
    _hx_constructs = ["VNumber", "VBool", "VNull", "VString", "VArray", "VMap", "VFunc", "VNative"]

    @staticmethod
    def VNumber(value):
        return src_types_Value("VNumber", 0, (value,))

    @staticmethod
    def VBool(value):
        return src_types_Value("VBool", 1, (value,))

    @staticmethod
    def VString(value):
        return src_types_Value("VString", 3, (value,))

    @staticmethod
    def VArray(items):
        return src_types_Value("VArray", 4, (items,))

    @staticmethod
    def VMap(map):
        return src_types_Value("VMap", 5, (map,))

    @staticmethod
    def VFunc(fn):
        return src_types_Value("VFunc", 6, (fn,))

    @staticmethod
    def VNative(native):
        return src_types_Value("VNative", 7, (native,))
src_types_Value.VNull = src_types_Value("VNull", 2, ())
src_types_Value._hx_class = src_types_Value


class sys_io_File:
    _hx_class_name = "sys.io.File"
    __slots__ = ()
    _hx_statics = ["getContent", "write"]

    @staticmethod
    def getContent(path):
        f = python_lib_Builtins.open(path,"r",-1,"utf-8",None,"")
        content = f.read(-1)
        f.close()
        return content

    @staticmethod
    def write(path,binary = None):
        if (binary is None):
            binary = True
        mode = ("wb" if binary else "w")
        f = python_lib_Builtins.open(path,mode,-1,None,None,(None if binary else ""))
        if binary:
            return python_io_IoTools.createFileOutputFromBytes(f)
        else:
            return python_io_IoTools.createFileOutputFromText(f)
sys_io_File._hx_class = sys_io_File


class sys_io_FileInput(haxe_io_Input):
    _hx_class_name = "sys.io.FileInput"
    __slots__ = ("impl",)
    _hx_fields = ["impl"]
    _hx_methods = ["set_bigEndian", "readByte", "readLine"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_io_Input


    def __init__(self,impl):
        self.impl = impl

    def set_bigEndian(self,b):
        return self.impl.set_bigEndian(b)

    def readByte(self):
        return self.impl.readByte()

    def readLine(self):
        return self.impl.readLine()

sys_io_FileInput._hx_class = sys_io_FileInput


class sys_io_FileOutput(haxe_io_Output):
    _hx_class_name = "sys.io.FileOutput"
    __slots__ = ("impl",)
    _hx_fields = ["impl"]
    _hx_methods = ["set_bigEndian", "writeByte", "writeBytes", "flush", "close", "write", "writeFullBytes", "writeString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_io_Output


    def __init__(self,impl):
        self.impl = impl

    def set_bigEndian(self,b):
        return self.impl.set_bigEndian(b)

    def writeByte(self,c):
        self.impl.writeByte(c)

    def writeBytes(self,s,pos,_hx_len):
        return self.impl.writeBytes(s,pos,_hx_len)

    def flush(self):
        self.impl.flush()

    def close(self):
        self.impl.close()

    def write(self,s):
        self.impl.write(s)

    def writeFullBytes(self,s,pos,_hx_len):
        self.impl.writeFullBytes(s,pos,_hx_len)

    def writeString(self,s,encoding = None):
        self.impl.writeString(s)

sys_io_FileOutput._hx_class = sys_io_FileOutput

Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi

python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")

src_Main.main()
