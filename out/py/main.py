# Generated by Haxe 4.3.7
# coding: utf-8
import sys

import math as python_lib_Math
import math as Math
import inspect as python_lib_Inspect
import sys as python_lib_Sys
import builtins as python_lib_Builtins
import functools as python_lib_Functools
import re as python_lib_Re
import traceback as python_lib_Traceback


class _hx_AnonObject:
    _hx_disable_getattr = False
    def __init__(self, fields):
        self.__dict__ = fields
    def __repr__(self):
        return repr(self.__dict__)
    def __contains__(self, item):
        return item in self.__dict__
    def __getitem__(self, item):
        return self.__dict__[item]
    def __getattr__(self, name):
        if (self._hx_disable_getattr):
            raise AttributeError('field does not exist')
        else:
            return None
    def _hx_hasattr(self,field):
        self._hx_disable_getattr = True
        try:
            getattr(self, field)
            self._hx_disable_getattr = False
            return True
        except AttributeError:
            self._hx_disable_getattr = False
            return False



class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            return self.tag + '(' + (', '.join(str(v) for v in self.params)) + ')'

Enum._hx_class = Enum


class Class: pass


class EReg:
    _hx_class_name = "EReg"
    __slots__ = ("pattern", "matchObj", "_hx_global")
    _hx_fields = ["pattern", "matchObj", "global"]

    def __init__(self,r,opt):
        self.matchObj = None
        self._hx_global = False
        options = 0
        _g = 0
        _g1 = len(opt)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            c = (-1 if ((i >= len(opt))) else ord(opt[i]))
            if (c == 109):
                options = (options | python_lib_Re.M)
            if (c == 105):
                options = (options | python_lib_Re.I)
            if (c == 115):
                options = (options | python_lib_Re.S)
            if (c == 117):
                options = (options | python_lib_Re.U)
            if (c == 103):
                self._hx_global = True
        self.pattern = python_lib_Re.compile(r,options)

EReg._hx_class = EReg


class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field"]

    @staticmethod
    def field(o,field):
        return python_Boot.field(o,field)
Reflect._hx_class = Reflect


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["isOfType", "string", "shortenPossibleNumber", "parseFloat"]

    @staticmethod
    def isOfType(v,t):
        if ((v is None) and ((t is None))):
            return False
        if (t is None):
            return False
        if ((type(t) == type) and (t == Dynamic)):
            return (v is not None)
        isBool = isinstance(v,bool)
        if (((type(t) == type) and (t == Bool)) and isBool):
            return True
        if ((((not isBool) and (not ((type(t) == type) and (t == Bool)))) and ((type(t) == type) and (t == Int))) and isinstance(v,int)):
            return True
        vIsFloat = isinstance(v,float)
        tmp = None
        tmp1 = None
        if (((not isBool) and vIsFloat) and ((type(t) == type) and (t == Int))):
            f = v
            tmp1 = (((f != Math.POSITIVE_INFINITY) and ((f != Math.NEGATIVE_INFINITY))) and (not python_lib_Math.isnan(f)))
        else:
            tmp1 = False
        if tmp1:
            tmp1 = None
            try:
                tmp1 = int(v)
            except BaseException as _g:
                None
                tmp1 = None
            tmp = (v == tmp1)
        else:
            tmp = False
        if ((tmp and ((v <= 2147483647))) and ((v >= -2147483648))):
            return True
        if (((not isBool) and ((type(t) == type) and (t == Float))) and isinstance(v,(float, int))):
            return True
        if ((type(t) == type) and (t == str)):
            return isinstance(v,str)
        isEnumType = ((type(t) == type) and (t == Enum))
        if ((isEnumType and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_constructs")):
            return True
        if isEnumType:
            return False
        isClassType = ((type(t) == type) and (t == Class))
        if ((((isClassType and (not isinstance(v,Enum))) and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_class_name")) and (not hasattr(v,"_hx_constructs"))):
            return True
        if isClassType:
            return False
        tmp = None
        try:
            tmp = isinstance(v,t)
        except BaseException as _g:
            None
            tmp = False
        if tmp:
            return True
        if python_lib_Inspect.isclass(t):
            cls = t
            loop = None
            def _hx_local_1(intf):
                f = (intf._hx_interfaces if (hasattr(intf,"_hx_interfaces")) else [])
                if (f is not None):
                    _g = 0
                    while (_g < len(f)):
                        i = (f[_g] if _g >= 0 and _g < len(f) else None)
                        _g = (_g + 1)
                        if (i == cls):
                            return True
                        else:
                            l = loop(i)
                            if l:
                                return True
                    return False
                else:
                    return False
            loop = _hx_local_1
            currentClass = v.__class__
            result = False
            while (currentClass is not None):
                if loop(currentClass):
                    result = True
                    break
                currentClass = python_Boot.getSuperClass(currentClass)
            return result
        else:
            return False

    @staticmethod
    def string(s):
        return python_Boot.toString1(s,"")

    @staticmethod
    def shortenPossibleNumber(x):
        r = ""
        _g = 0
        _g1 = len(x)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            c = ("" if (((i < 0) or ((i >= len(x))))) else x[i])
            _g2 = HxString.charCodeAt(c,0)
            if (_g2 is None):
                break
            else:
                _g3 = _g2
                if (((((((((((_g3 == 57) or ((_g3 == 56))) or ((_g3 == 55))) or ((_g3 == 54))) or ((_g3 == 53))) or ((_g3 == 52))) or ((_g3 == 51))) or ((_g3 == 50))) or ((_g3 == 49))) or ((_g3 == 48))) or ((_g3 == 46))):
                    r = (("null" if r is None else r) + ("null" if c is None else c))
                else:
                    break
        return r

    @staticmethod
    def parseFloat(x):
        try:
            return float(x)
        except BaseException as _g:
            None
            if (x is not None):
                r1 = Std.shortenPossibleNumber(x)
                if (r1 != x):
                    return Std.parseFloat(r1)
            return Math.NaN
Std._hx_class = Std


class Float: pass


class Int: pass


class Bool: pass


class Dynamic: pass


class Sys:
    _hx_class_name = "Sys"
    __slots__ = ()
    _hx_statics = ["args", "stdin", "stdout"]

    @staticmethod
    def args():
        argv = python_lib_Sys.argv
        return argv[1:None]

    @staticmethod
    def stdin():
        return python_io_IoTools.createFileInputFromText(python_lib_Sys.stdin)

    @staticmethod
    def stdout():
        return python_io_IoTools.createFileOutputFromText(python_lib_Sys.stdout)
Sys._hx_class = Sys


class Type:
    _hx_class_name = "Type"
    __slots__ = ()
    _hx_statics = ["getClass", "getClassName"]

    @staticmethod
    def getClass(o):
        if (o is None):
            return None
        o1 = o
        if ((o1 is not None) and ((HxOverrides.eq(o1,str) or python_lib_Inspect.isclass(o1)))):
            return None
        if isinstance(o,_hx_AnonObject):
            return None
        if hasattr(o,"_hx_class"):
            return o._hx_class
        if hasattr(o,"__class__"):
            return o.__class__
        else:
            return None

    @staticmethod
    def getClassName(c):
        if hasattr(c,"_hx_class_name"):
            return c._hx_class_name
        else:
            if (c == list):
                return "Array"
            if (c == Math):
                return "Math"
            if (c == str):
                return "String"
            try:
                return c.__name__
            except BaseException as _g:
                None
                return None
Type._hx_class = Type


class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()
haxe_IMap._hx_class = haxe_IMap


class haxe_Exception(Exception):
    _hx_class_name = "haxe.Exception"
    __slots__ = ("_hx___nativeStack", "_hx___skipStack", "_hx___nativeException", "_hx___previousException")
    _hx_fields = ["__nativeStack", "__skipStack", "__nativeException", "__previousException"]
    _hx_methods = ["unwrap", "toString", "get_message", "get_native"]
    _hx_statics = ["caught", "thrown"]
    _hx_interfaces = []
    _hx_super = Exception


    def __init__(self,message,previous = None,native = None):
        self._hx___previousException = None
        self._hx___nativeException = None
        self._hx___nativeStack = None
        self._hx___skipStack = 0
        super().__init__(message)
        self._hx___previousException = previous
        if ((native is not None) and Std.isOfType(native,BaseException)):
            self._hx___nativeException = native
            self._hx___nativeStack = haxe_NativeStackTrace.exceptionStack()
        else:
            self._hx___nativeException = self
            infos = python_lib_Traceback.extract_stack()
            if (len(infos) != 0):
                infos.pop()
            infos.reverse()
            self._hx___nativeStack = infos

    def unwrap(self):
        return self._hx___nativeException

    def toString(self):
        return self.get_message()

    def get_message(self):
        return str(self)

    def get_native(self):
        return self._hx___nativeException

    @staticmethod
    def caught(value):
        if Std.isOfType(value,haxe_Exception):
            return value
        elif Std.isOfType(value,BaseException):
            return haxe_Exception(str(value),None,value)
        else:
            return haxe_ValueException(value,None,value)

    @staticmethod
    def thrown(value):
        if Std.isOfType(value,haxe_Exception):
            return value.get_native()
        elif Std.isOfType(value,BaseException):
            return value
        else:
            e = haxe_ValueException(value)
            e._hx___skipStack = (e._hx___skipStack + 1)
            return e

haxe_Exception._hx_class = haxe_Exception


class haxe_NativeStackTrace:
    _hx_class_name = "haxe.NativeStackTrace"
    __slots__ = ()
    _hx_statics = ["saveStack", "exceptionStack"]

    @staticmethod
    def saveStack(exception):
        pass

    @staticmethod
    def exceptionStack():
        exc = python_lib_Sys.exc_info()
        if (exc[2] is not None):
            infos = python_lib_Traceback.extract_tb(exc[2])
            infos.reverse()
            return infos
        else:
            return []
haxe_NativeStackTrace._hx_class = haxe_NativeStackTrace


class haxe_ValueException(haxe_Exception):
    _hx_class_name = "haxe.ValueException"
    __slots__ = ("value",)
    _hx_fields = ["value"]
    _hx_methods = ["unwrap"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_Exception


    def __init__(self,value,previous = None,native = None):
        self.value = None
        super().__init__(("null" if ((value is None)) else Std.string(value)),previous,native)
        self.value = value

    def unwrap(self):
        return self.value

haxe_ValueException._hx_class = haxe_ValueException


class haxe_ds_StringMap:
    _hx_class_name = "haxe.ds.StringMap"
    __slots__ = ("h",)
    _hx_fields = ["h"]
    _hx_interfaces = [haxe_IMap]

    def __init__(self):
        self.h = dict()

haxe_ds_StringMap._hx_class = haxe_ds_StringMap


class haxe_exceptions_PosException(haxe_Exception):
    _hx_class_name = "haxe.exceptions.PosException"
    __slots__ = ("posInfos",)
    _hx_fields = ["posInfos"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_Exception


    def __init__(self,message,previous = None,pos = None):
        self.posInfos = None
        super().__init__(message,previous)
        if (pos is None):
            self.posInfos = _hx_AnonObject({'fileName': "(unknown)", 'lineNumber': 0, 'className': "(unknown)", 'methodName': "(unknown)"})
        else:
            self.posInfos = pos

    def toString(self):
        return ((((((((("" + HxOverrides.stringOrNull(super().toString())) + " in ") + HxOverrides.stringOrNull(self.posInfos.className)) + ".") + HxOverrides.stringOrNull(self.posInfos.methodName)) + " at ") + HxOverrides.stringOrNull(self.posInfos.fileName)) + ":") + Std.string(self.posInfos.lineNumber))

haxe_exceptions_PosException._hx_class = haxe_exceptions_PosException


class haxe_exceptions_NotImplementedException(haxe_exceptions_PosException):
    _hx_class_name = "haxe.exceptions.NotImplementedException"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_exceptions_PosException


    def __init__(self,message = None,previous = None,pos = None):
        if (message is None):
            message = "Not implemented"
        super().__init__(message,previous,pos)
haxe_exceptions_NotImplementedException._hx_class = haxe_exceptions_NotImplementedException


class haxe_io_Bytes:
    _hx_class_name = "haxe.io.Bytes"
    __slots__ = ("length", "b")
    _hx_fields = ["length", "b"]
    _hx_methods = ["getString", "toString"]
    _hx_statics = ["ofString"]

    def __init__(self,length,b):
        self.length = length
        self.b = b

    def getString(self,pos,_hx_len,encoding = None):
        tmp = (encoding is None)
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > self.length))):
            raise haxe_Exception.thrown(haxe_io_Error.OutsideBounds)
        return self.b[pos:pos+_hx_len].decode('UTF-8','replace')

    def toString(self):
        return self.getString(0,self.length)

    @staticmethod
    def ofString(s,encoding = None):
        b = bytearray(s,"UTF-8")
        return haxe_io_Bytes(len(b),b)

haxe_io_Bytes._hx_class = haxe_io_Bytes


class haxe_io_BytesBuffer:
    _hx_class_name = "haxe.io.BytesBuffer"
    __slots__ = ("b",)
    _hx_fields = ["b"]
    _hx_methods = ["getBytes"]

    def __init__(self):
        self.b = bytearray()

    def getBytes(self):
        _hx_bytes = haxe_io_Bytes(len(self.b),self.b)
        self.b = None
        return _hx_bytes

haxe_io_BytesBuffer._hx_class = haxe_io_BytesBuffer

class haxe_io_Encoding(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.io.Encoding"
    _hx_constructs = ["UTF8", "RawNative"]
haxe_io_Encoding.UTF8 = haxe_io_Encoding("UTF8", 0, ())
haxe_io_Encoding.RawNative = haxe_io_Encoding("RawNative", 1, ())
haxe_io_Encoding._hx_class = haxe_io_Encoding


class haxe_io_Eof:
    _hx_class_name = "haxe.io.Eof"
    __slots__ = ()
    _hx_methods = ["toString"]

    def __init__(self):
        pass

    def toString(self):
        return "Eof"

haxe_io_Eof._hx_class = haxe_io_Eof

class haxe_io_Error(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.io.Error"
    _hx_constructs = ["Blocked", "Overflow", "OutsideBounds", "Custom"]

    @staticmethod
    def Custom(e):
        return haxe_io_Error("Custom", 3, (e,))
haxe_io_Error.Blocked = haxe_io_Error("Blocked", 0, ())
haxe_io_Error.Overflow = haxe_io_Error("Overflow", 1, ())
haxe_io_Error.OutsideBounds = haxe_io_Error("OutsideBounds", 2, ())
haxe_io_Error._hx_class = haxe_io_Error


class haxe_io_Input:
    _hx_class_name = "haxe.io.Input"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["readByte", "set_bigEndian", "readLine"]

    def readByte(self):
        raise haxe_exceptions_NotImplementedException(None,None,_hx_AnonObject({'fileName': "haxe/io/Input.hx", 'lineNumber': 53, 'className': "haxe.io.Input", 'methodName': "readByte"}))

    def set_bigEndian(self,b):
        self.bigEndian = b
        return b

    def readLine(self):
        buf = haxe_io_BytesBuffer()
        last = None
        s = None
        try:
            while True:
                last = self.readByte()
                if (not ((last != 10))):
                    break
                buf.b.append(last)
            s = buf.getBytes().toString()
            if (HxString.charCodeAt(s,(len(s) - 1)) == 13):
                s = HxString.substr(s,0,-1)
        except BaseException as _g:
            None
            _g1 = haxe_Exception.caught(_g).unwrap()
            if Std.isOfType(_g1,haxe_io_Eof):
                e = _g1
                s = buf.getBytes().toString()
                if (len(s) == 0):
                    raise haxe_Exception.thrown(e)
            else:
                raise _g
        return s

haxe_io_Input._hx_class = haxe_io_Input


class haxe_io_Output:
    _hx_class_name = "haxe.io.Output"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["writeByte", "writeBytes", "flush", "set_bigEndian", "write"]

    def writeByte(self,c):
        raise haxe_exceptions_NotImplementedException(None,None,_hx_AnonObject({'fileName': "haxe/io/Output.hx", 'lineNumber': 47, 'className': "haxe.io.Output", 'methodName': "writeByte"}))

    def writeBytes(self,s,pos,_hx_len):
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > s.length))):
            raise haxe_Exception.thrown(haxe_io_Error.OutsideBounds)
        b = s.b
        k = _hx_len
        while (k > 0):
            self.writeByte(b[pos])
            pos = (pos + 1)
            k = (k - 1)
        return _hx_len

    def flush(self):
        pass

    def set_bigEndian(self,b):
        self.bigEndian = b
        return b

    def write(self,s):
        l = s.length
        p = 0
        while (l > 0):
            k = self.writeBytes(s,p,l)
            if (k == 0):
                raise haxe_Exception.thrown(haxe_io_Error.Blocked)
            p = (p + k)
            l = (l - k)

haxe_io_Output._hx_class = haxe_io_Output


class haxe_iterators_ArrayIterator:
    _hx_class_name = "haxe.iterators.ArrayIterator"
    __slots__ = ("array", "current")
    _hx_fields = ["array", "current"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,array):
        self.current = 0
        self.array = array

    def hasNext(self):
        return (self.current < len(self.array))

    def next(self):
        def _hx_local_3():
            def _hx_local_2():
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.current
                _hx_local_0.current = (_hx_local_1 + 1)
                return _hx_local_1
            return python_internal_ArrayImpl._get(self.array, _hx_local_2())
        return _hx_local_3()

haxe_iterators_ArrayIterator._hx_class = haxe_iterators_ArrayIterator


class haxe_iterators_ArrayKeyValueIterator:
    _hx_class_name = "haxe.iterators.ArrayKeyValueIterator"
    __slots__ = ("current", "array")
    _hx_fields = ["current", "array"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,array):
        self.current = 0
        self.array = array

    def hasNext(self):
        return (self.current < len(self.array))

    def next(self):
        def _hx_local_3():
            def _hx_local_2():
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.current
                _hx_local_0.current = (_hx_local_1 + 1)
                return _hx_local_1
            return _hx_AnonObject({'value': python_internal_ArrayImpl._get(self.array, self.current), 'key': _hx_local_2()})
        return _hx_local_3()

haxe_iterators_ArrayKeyValueIterator._hx_class = haxe_iterators_ArrayKeyValueIterator


class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "_add_dynamic", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def _add_dynamic(a,b):
        if (isinstance(a,str) and isinstance(b,str)):
            return (a + b)
        if (isinstance(a,str) or isinstance(b,str)):
            return (python_Boot.toString1(a,"") + python_Boot.toString1(b,""))
        return (a + b)

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if (isinstance(o,int) and (not isinstance(o,bool))):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except BaseException as _g:
                None
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g = 0
            _g1 = l
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except BaseException as _g:
            None
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except BaseException as _g:
                    None
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o1 = o
                l = len(o1.params)
                hasParams = (l > 0)
                if hasParams:
                    paramsStr = ""
                    _g = 0
                    _g1 = l
                    while (_g < _g1):
                        i = _g
                        _g = (_g + 1)
                        prefix = ""
                        if (i > 0):
                            prefix = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1(o1.params[i],s))))))
                    return (((HxOverrides.stringOrNull(o1.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o1.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields = python_Boot.getInstanceFields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " )")
                    return toStr
                else:
                    fields = python_Boot.getClassFields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " )")
                    return toStr
            if ((type(o) == type) and (o == str)):
                return "#String"
            if ((type(o) == type) and (o == list)):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except BaseException as _g:
                None
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                fields = o._hx_fields
                if (fields is not None):
                    return list(fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    if (k != '_hx_disable_getattr'):
                        a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d = o.__dict__
                keys1 = d.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def field(o,field):
        if (field is None):
            return None
        if isinstance(o,str):
            field1 = field
            _hx_local_0 = len(field1)
            if (_hx_local_0 == 10):
                if (field1 == "charCodeAt"):
                    return python_internal_MethodClosure(o,HxString.charCodeAt)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 11):
                if (field1 == "lastIndexOf"):
                    return python_internal_MethodClosure(o,HxString.lastIndexOf)
                elif (field1 == "toLowerCase"):
                    return python_internal_MethodClosure(o,HxString.toLowerCase)
                elif (field1 == "toUpperCase"):
                    return python_internal_MethodClosure(o,HxString.toUpperCase)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 9):
                if (field1 == "substring"):
                    return python_internal_MethodClosure(o,HxString.substring)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 5):
                if (field1 == "split"):
                    return python_internal_MethodClosure(o,HxString.split)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 7):
                if (field1 == "indexOf"):
                    return python_internal_MethodClosure(o,HxString.indexOf)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 8):
                if (field1 == "toString"):
                    return python_internal_MethodClosure(o,HxString.toString)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_0 == 6):
                if (field1 == "charAt"):
                    return python_internal_MethodClosure(o,HxString.charAt)
                elif (field1 == "length"):
                    return len(o)
                elif (field1 == "substr"):
                    return python_internal_MethodClosure(o,HxString.substr)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            else:
                field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                return (getattr(o,field1) if (hasattr(o,field1)) else None)
        elif isinstance(o,list):
            field1 = field
            _hx_local_1 = len(field1)
            if (_hx_local_1 == 11):
                if (field1 == "lastIndexOf"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.lastIndexOf)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 4):
                if (field1 == "copy"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.copy)
                elif (field1 == "join"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.join)
                elif (field1 == "push"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.push)
                elif (field1 == "sort"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.sort)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 5):
                if (field1 == "shift"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.shift)
                elif (field1 == "slice"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.slice)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 7):
                if (field1 == "indexOf"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.indexOf)
                elif (field1 == "reverse"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.reverse)
                elif (field1 == "unshift"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.unshift)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 3):
                if (field1 == "map"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.map)
                elif (field1 == "pop"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.pop)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 8):
                if (field1 == "contains"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.contains)
                elif (field1 == "iterator"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.iterator)
                elif (field1 == "toString"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.toString)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 16):
                if (field1 == "keyValueIterator"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.keyValueIterator)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            elif (_hx_local_1 == 6):
                if (field1 == "concat"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.concat)
                elif (field1 == "filter"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.filter)
                elif (field1 == "insert"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.insert)
                elif (field1 == "length"):
                    return len(o)
                elif (field1 == "remove"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.remove)
                elif (field1 == "splice"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.splice)
                else:
                    field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field1) if (hasattr(o,field1)) else None)
            else:
                field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                return (getattr(o,field1) if (hasattr(o,field1)) else None)
        else:
            field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
            return (getattr(o,field1) if (hasattr(o,field1)) else None)

    @staticmethod
    def getInstanceFields(c):
        f = (list(c._hx_fields) if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except BaseException as _g:
            None
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if (real in python_Boot.keywords):
                return real
        return name
python_Boot._hx_class = python_Boot


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except BaseException as _g:
                None
                if Std.isOfType(haxe_Exception.caught(_g).unwrap(),StopIteration):
                    self.has = False
                    self.x = None
                else:
                    raise _g
            self.checked = True
        return self.has

python_HaxeIterator._hx_class = python_HaxeIterator


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["concat", "copy", "iterator", "keyValueIterator", "indexOf", "lastIndexOf", "join", "toString", "pop", "push", "unshift", "remove", "contains", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get"]

    @staticmethod
    def concat(a1,a2):
        return (a1 + a2)

    @staticmethod
    def copy(x):
        return list(x)

    @staticmethod
    def iterator(x):
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def keyValueIterator(x):
        return haxe_iterators_ArrayKeyValueIterator(x)

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        if (l < 0):
            l = 0
        _g = l
        _g1 = _hx_len
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            if HxOverrides.eq(a[i],x):
                return i
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        if (l > _hx_len):
            l = _hx_len
        while True:
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            if HxOverrides.eq(a[l],x):
                return l
        return -1

    @staticmethod
    def join(x,sep):
        return sep.join([python_Boot.toString1(x1,'') for x1 in x])

    @staticmethod
    def toString(x):
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        x.append(e)
        return len(x)

    @staticmethod
    def unshift(x,e):
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        try:
            x.remove(e)
            return True
        except BaseException as _g:
            None
            return False

    @staticmethod
    def contains(x,e):
        return (e in x)

    @staticmethod
    def shift(x):
        if (len(x) == 0):
            return None
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        if (pos < 0):
            pos = (len(x) + pos)
        if (pos < 0):
            pos = 0
        res = x[pos:(pos + _hx_len)]
        del x[pos:(pos + _hx_len)]
        return res

    @staticmethod
    def map(x,f):
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        a.reverse()

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None
python_internal_ArrayImpl._hx_class = python_internal_ArrayImpl


class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull"]

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s
HxOverrides._hx_class = HxOverrides


class python_internal_MethodClosure:
    _hx_class_name = "python.internal.MethodClosure"
    __slots__ = ("obj", "func")
    _hx_fields = ["obj", "func"]
    _hx_methods = ["__call__"]

    def __init__(self,obj,func):
        self.obj = obj
        self.func = func

    def __call__(self,*args):
        return self.func(self.obj,*args)

python_internal_MethodClosure._hx_class = python_internal_MethodClosure


class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "indexOfImpl", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        elif (_hx_str == ""):
            length = len(s)
            if (startIndex < 0):
                startIndex = (length + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            if (startIndex > length):
                return length
            else:
                return startIndex
        else:
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            check = s.find(_hx_str, startLeft, len(s))
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return HxString.indexOfImpl(s,_hx_str,startIndex)

    @staticmethod
    def indexOfImpl(s,_hx_str,startIndex):
        if (_hx_str == ""):
            length = len(s)
            if (startIndex < 0):
                startIndex = (length + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            if (startIndex > length):
                return length
            else:
                return startIndex
        return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        if (startIndex < 0):
            startIndex = 0
        if (endIndex is None):
            return s[startIndex:]
        else:
            if (endIndex < 0):
                endIndex = 0
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            if (startIndex < 0):
                startIndex = (len(s) + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            return s[startIndex:(startIndex + _hx_len)]
HxString._hx_class = HxString


class python_io_NativeInput(haxe_io_Input):
    _hx_class_name = "python.io.NativeInput"
    __slots__ = ("stream", "wasEof")
    _hx_fields = ["stream", "wasEof"]
    _hx_methods = ["throwEof"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_io_Input


    def __init__(self,s):
        self.wasEof = None
        self.stream = s
        self.set_bigEndian(False)
        self.wasEof = False
        if (not self.stream.readable()):
            raise haxe_Exception.thrown("Write-only stream")

    def throwEof(self):
        self.wasEof = True
        raise haxe_Exception.thrown(haxe_io_Eof())

python_io_NativeInput._hx_class = python_io_NativeInput


class python_io_IInput:
    _hx_class_name = "python.io.IInput"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["set_bigEndian", "readByte", "readLine"]
python_io_IInput._hx_class = python_io_IInput


class python_io_IFileInput:
    _hx_class_name = "python.io.IFileInput"
    __slots__ = ()
    _hx_interfaces = [python_io_IInput]
python_io_IFileInput._hx_class = python_io_IFileInput


class python_io_NativeOutput(haxe_io_Output):
    _hx_class_name = "python.io.NativeOutput"
    __slots__ = ("stream",)
    _hx_fields = ["stream"]
    _hx_methods = ["flush"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_io_Output


    def __init__(self,stream):
        self.stream = None
        self.set_bigEndian(False)
        self.stream = stream
        if (not stream.writable()):
            raise haxe_Exception.thrown("Read only stream")

    def flush(self):
        self.stream.flush()

python_io_NativeOutput._hx_class = python_io_NativeOutput


class python_io_IOutput:
    _hx_class_name = "python.io.IOutput"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["set_bigEndian", "writeByte", "writeBytes", "flush", "write"]
python_io_IOutput._hx_class = python_io_IOutput


class python_io_IFileOutput:
    _hx_class_name = "python.io.IFileOutput"
    __slots__ = ()
    _hx_interfaces = [python_io_IOutput]
python_io_IFileOutput._hx_class = python_io_IFileOutput


class python_io_NativeTextInput(python_io_NativeInput):
    _hx_class_name = "python.io.NativeTextInput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["readByte"]
    _hx_statics = []
    _hx_interfaces = [python_io_IInput]
    _hx_super = python_io_NativeInput


    def __init__(self,stream):
        super().__init__(stream)

    def readByte(self):
        ret = self.stream.buffer.read(1)
        if (len(ret) == 0):
            self.throwEof()
        return ret[0]

python_io_NativeTextInput._hx_class = python_io_NativeTextInput


class python_io_FileTextInput(python_io_NativeTextInput):
    _hx_class_name = "python.io.FileTextInput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = [python_io_IFileInput]
    _hx_super = python_io_NativeTextInput


    def __init__(self,stream):
        super().__init__(stream)
python_io_FileTextInput._hx_class = python_io_FileTextInput


class python_io_NativeTextOutput(python_io_NativeOutput):
    _hx_class_name = "python.io.NativeTextOutput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["writeBytes", "writeByte"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = python_io_NativeOutput


    def __init__(self,stream):
        super().__init__(stream)
        if (not stream.writable()):
            raise haxe_Exception.thrown("Read only stream")

    def writeBytes(self,s,pos,_hx_len):
        return self.stream.buffer.write(s.b[pos:(pos + _hx_len)])

    def writeByte(self,c):
        self.stream.write("".join(map(chr,[c])))

python_io_NativeTextOutput._hx_class = python_io_NativeTextOutput


class python_io_FileTextOutput(python_io_NativeTextOutput):
    _hx_class_name = "python.io.FileTextOutput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = [python_io_IFileOutput]
    _hx_super = python_io_NativeTextOutput


    def __init__(self,stream):
        super().__init__(stream)
python_io_FileTextOutput._hx_class = python_io_FileTextOutput


class python_io_IoTools:
    _hx_class_name = "python.io.IoTools"
    __slots__ = ()
    _hx_statics = ["createFileInputFromText", "createFileOutputFromText"]

    @staticmethod
    def createFileInputFromText(t):
        return sys_io_FileInput(python_io_FileTextInput(t))

    @staticmethod
    def createFileOutputFromText(t):
        return sys_io_FileOutput(python_io_FileTextOutput(t))
python_io_IoTools._hx_class = python_io_IoTools


class src_ASTWalker:
    _hx_class_name = "src.ASTWalker"
    __slots__ = ()
    _hx_methods = ["visitPrintStmt", "visitInputStmt", "visitLetStmt", "visitIfStmt", "visitStmt", "visitBlockStmt", "visitExprStmt", "visitBinaryExpr", "visitNumberExpr", "visitVariableExpr", "visitUnaryExpr", "visitStringExpr"]

src_ASTWalker._hx_class = src_ASTWalker


class src_InterpBknd(src_ASTWalker):
    _hx_class_name = "src.InterpBknd"
    __slots__ = ("environment",)
    _hx_fields = ["environment"]
    _hx_methods = ["visit", "visitPrintStmt", "visitInputStmt", "visitLetStmt", "visitIfStmt", "visitWhileStmt", "visitBlockStmt", "visitExprStmt", "visitStmt", "visitExpr", "visitUnaryExpr", "visitBinaryExpr", "visitNumberExpr", "visitVariableExpr", "visitStringExpr"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ASTWalker


    def __init__(self):
        self.environment = haxe_ds_StringMap()
        self.environment.h["pi"] = Math.PI
        this1 = self.environment
        value = (0.0 if ((1 == Math.NEGATIVE_INFINITY)) else (Math.POSITIVE_INFINITY if ((1 == Math.POSITIVE_INFINITY)) else Reflect.field(Math,"exp")(1)))
        this1.h["e"] = value
        self.environment.h["inf"] = Math.POSITIVE_INFINITY
        self.environment.h["nan"] = Math.NaN

    def visit(self,ast):
        _g = 0
        while (_g < len(ast)):
            stmt = (ast[_g] if _g >= 0 and _g < len(ast) else None)
            _g = (_g + 1)
            if (stmt is not None):
                self.visitStmt(stmt)

    def visitPrintStmt(self,stmt):
        value = self.visitExpr(stmt.expr)
        src_Utils.print(value)

    def visitInputStmt(self,stmt):
        input = Sys.stdin().readLine()
        num = Std.parseFloat(input)
        final_val = (input if ((num is None)) else num)
        self.environment.h[stmt.target.name] = final_val

    def visitLetStmt(self,stmt):
        value = None
        if (stmt.value is not None):
            value = self.visitExpr(stmt.value)
        _g = 0
        _g1 = stmt.bindings
        while (_g < len(_g1)):
            v = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            self.environment.h[v.name] = value

    def visitIfStmt(self,stmt):
        condition = self.visitExpr(stmt.condition)
        if condition:
            self.visitBlockStmt(stmt.thenBranch)
        elif (stmt.elseBranch is not None):
            self.visitBlockStmt(stmt.elseBranch)

    def visitWhileStmt(self,stmt):
        condition = self.visitExpr(stmt.condition)
        while condition:
            self.visitBlockStmt(stmt.body)
            condition = self.visitExpr(stmt.condition)

    def visitBlockStmt(self,stmt):
        _g = 0
        _g1 = stmt.statements
        while (_g < len(_g1)):
            s = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            self.visitStmt(s)

    def visitExprStmt(self,stmt):
        self.visitExpr(stmt.expr)

    def visitStmt(self,stmt):
        if Std.isOfType(stmt,src_ast_PrintStmt):
            self.visitPrintStmt(stmt)
        elif Std.isOfType(stmt,src_ast_InputStmt):
            self.visitInputStmt(stmt)
        elif Std.isOfType(stmt,src_ast_LetStmt):
            self.visitLetStmt(stmt)
        elif Std.isOfType(stmt,src_ast_IfStmt):
            self.visitIfStmt(stmt)
        elif Std.isOfType(stmt,src_ast_BlockStmt):
            self.visitBlockStmt(stmt)
        elif Std.isOfType(stmt,src_ast_ExprStmt):
            self.visitExprStmt(stmt)
        elif Std.isOfType(stmt,src_ast_WhileStmt):
            self.visitWhileStmt(stmt)
        else:
            raise haxe_Exception.thrown(("Unknown statement type: " + Std.string(stmt)))

    def visitExpr(self,expr):
        if Std.isOfType(expr,src_ast_BinaryExpr):
            return self.visitBinaryExpr(expr)
        elif Std.isOfType(expr,src_ast_NumberExpr):
            return self.visitNumberExpr(expr)
        elif Std.isOfType(expr,src_ast_VariableExpr):
            return self.visitVariableExpr(expr)
        elif Std.isOfType(expr,src_ast_UnaryExpr):
            return self.visitUnaryExpr(expr)
        elif Std.isOfType(expr,src_ast_StringExpr):
            return self.visitStringExpr(expr)
        else:
            raise haxe_Exception.thrown(("Unknown expression type: " + Std.string(expr)))

    def visitUnaryExpr(self,expr):
        right = self.visitExpr(expr.right)
        tmp = expr.oper.type.index
        if (tmp == 5):
            return -right
        elif (tmp == 19):
            return (not right)
        else:
            raise haxe_Exception.thrown(((((("Unknown unary operator " + HxOverrides.stringOrNull((("null" if ((expr.oper.value is None)) else Std.string(expr.oper.value))))) + " at line ") + Std.string(expr.oper.line)) + ", column ") + Std.string(expr.oper.column)))

    def visitBinaryExpr(self,expr):
        left = self.visitExpr(expr.left)
        right = self.visitExpr(expr.right)
        tmp = expr.oper.type.index
        if (tmp == 4):
            return python_Boot._add_dynamic(left,right)
        elif (tmp == 5):
            return (left - right)
        elif (tmp == 6):
            return (left * right)
        elif (tmp == 7):
            return (left / right)
        elif (tmp == 13):
            return HxOverrides.eq(left,right)
        elif (tmp == 14):
            return not HxOverrides.eq(left,right)
        elif (tmp == 15):
            return (left > right)
        elif (tmp == 16):
            return (left >= right)
        elif (tmp == 17):
            return (left < right)
        elif (tmp == 18):
            return (left <= right)
        elif (tmp == 19):
            return (not left)
        else:
            raise haxe_Exception.thrown(((((("Unknown operator " + HxOverrides.stringOrNull((("null" if ((expr.oper.value is None)) else Std.string(expr.oper.value))))) + " at line ") + Std.string(expr.oper.line)) + ", column ") + Std.string(expr.oper.column)))

    def visitNumberExpr(self,expr):
        return expr.value

    def visitVariableExpr(self,expr):
        if (expr.name in self.environment.h):
            return self.environment.h.get(expr.name,None)
        raise haxe_Exception.thrown(((((("Undefined variable '" + HxOverrides.stringOrNull(expr.name)) + "' at line ") + Std.string(expr.line)) + ", column ") + Std.string(expr.column)))

    def visitStringExpr(self,expr):
        return expr.value

src_InterpBknd._hx_class = src_InterpBknd


class src_Lexer:
    _hx_class_name = "src.Lexer"
    __slots__ = ("source", "position", "current", "line", "column")
    _hx_fields = ["source", "position", "current", "line", "column"]
    _hx_methods = ["advance", "peek", "isEof", "skipWhitespace", "tokenize", "isKeyword"]

    def __init__(self,source):
        self.position = 0
        self.source = source
        self.position = -1
        self.current = ""
        self.line = 1
        self.column = 0
        self.advance()

    def advance(self):
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.position
        _hx_local_0.position = (_hx_local_1 + 1)
        _hx_local_1
        _hx_local_2 = self
        _hx_local_3 = _hx_local_2.column
        _hx_local_2.column = (_hx_local_3 + 1)
        _hx_local_3
        if (self.position < len(self.source)):
            _this = self.source
            index = self.position
            self.current = ("" if (((index < 0) or ((index >= len(_this))))) else _this[index])
            if (self.current == "\n"):
                _hx_local_4 = self
                _hx_local_5 = _hx_local_4.line
                _hx_local_4.line = (_hx_local_5 + 1)
                _hx_local_5
                self.column = 0
        else:
            self.current = ""

    def peek(self):
        if (self.position < len(self.source)):
            _this = self.source
            index = self.position
            if ((index < 0) or ((index >= len(_this)))):
                return ""
            else:
                return _this[index]
        else:
            return ""

    def isEof(self):
        return (self.position >= len(self.source))

    def skipWhitespace(self):
        while ((not self.isEof()) and (((((self.current == " ") or ((self.current == "\t"))) or ((self.current == "\n"))) or ((self.current == "\r"))))):
            self.advance()

    def tokenize(self):
        tokens = []
        while (not self.isEof()):
            self.skipWhitespace()
            if self.isEof():
                break
            _g = self.current
            if (_g == "!"):
                if (self.peek() == "="):
                    x = src_Token(src_TokenType.NOTEQ,"!=",self.line,self.column)
                    tokens.append(x)
                    self.advance()
                    self.advance()
                else:
                    x1 = src_Token(src_TokenType.BANG,self.current,self.line,self.column)
                    tokens.append(x1)
                    self.advance()
            elif (_g == "\""):
                start = (self.position + 1)
                self.advance()
                while ((not self.isEof()) and ((self.current != "\""))):
                    self.advance()
                if self.isEof():
                    raise haxe_Exception.thrown(((("Unterminated string literal at line " + Std.string(self.line)) + ", column ") + Std.string(self.column)))
                strValue = HxString.substring(self.source,start,self.position)
                x2 = src_Token(src_TokenType.STRING,strValue,self.line,(self.column - (((self.position - start) + 1))))
                tokens.append(x2)
                self.advance()
            elif (_g == "("):
                x3 = src_Token(src_TokenType.LPAREN,self.current,self.line,self.column)
                tokens.append(x3)
                self.advance()
            elif (_g == ")"):
                x4 = src_Token(src_TokenType.RPAREN,self.current,self.line,self.column)
                tokens.append(x4)
                self.advance()
            elif (_g == "*"):
                x5 = src_Token(src_TokenType.STAR,self.current,self.line,self.column)
                tokens.append(x5)
                self.advance()
            elif (_g == "+"):
                x6 = src_Token(src_TokenType.PLUS,self.current,self.line,self.column)
                tokens.append(x6)
                self.advance()
            elif (_g == ","):
                x7 = src_Token(src_TokenType.COMMA,self.current,self.line,self.column)
                tokens.append(x7)
                self.advance()
            elif (_g == "-"):
                x8 = src_Token(src_TokenType.MINUS,self.current,self.line,self.column)
                tokens.append(x8)
                self.advance()
            elif (_g == "/"):
                x9 = src_Token(src_TokenType.SLASH,self.current,self.line,self.column)
                tokens.append(x9)
                self.advance()
            elif (_g == ";"):
                x10 = src_Token(src_TokenType.SEMICOLON,self.current,self.line,self.column)
                tokens.append(x10)
                self.advance()
            elif (_g == "<"):
                if (self.peek() == "="):
                    x11 = src_Token(src_TokenType.LTEQ,"<=",self.line,self.column)
                    tokens.append(x11)
                    self.advance()
                    self.advance()
                else:
                    x12 = src_Token(src_TokenType.LT,self.current,self.line,self.column)
                    tokens.append(x12)
                    self.advance()
            elif (_g == "="):
                self.advance()
                if (self.peek() == "="):
                    x13 = src_Token(src_TokenType.EQEQ,"==",self.line,self.column)
                    tokens.append(x13)
                    self.advance()
                else:
                    x14 = src_Token(src_TokenType.EQUALS,self.current,self.line,self.column)
                    tokens.append(x14)
            elif (_g == ">"):
                if (self.peek() == "="):
                    x15 = src_Token(src_TokenType.GTEQ,">=",self.line,self.column)
                    tokens.append(x15)
                    self.advance()
                    self.advance()
                else:
                    x16 = src_Token(src_TokenType.GT,self.current,self.line,self.column)
                    tokens.append(x16)
                    self.advance()
            else:
                _this = EReg("[a-zA-Z_$$]","")
                _this.matchObj = python_lib_Re.search(_this.pattern,self.current)
                if (_this.matchObj is not None):
                    start1 = self.position
                    while True:
                        tmp = None
                        if (not self.isEof()):
                            _this1 = EReg("[a-zA-Z0-9_$$]","")
                            _this1.matchObj = python_lib_Re.search(_this1.pattern,self.current)
                            tmp = (_this1.matchObj is not None)
                        else:
                            tmp = False
                        if (not tmp):
                            break
                        self.advance()
                    identifier = HxString.substring(self.source,start1,self.position)
                    _hx_type = (src_TokenType.KEYWORD if (self.isKeyword(identifier)) else src_TokenType.IDENTIFIER)
                    x17 = src_Token(_hx_type,identifier,self.line,self.column)
                    tokens.append(x17)
                else:
                    _this2 = EReg("[0-9]","")
                    _this2.matchObj = python_lib_Re.search(_this2.pattern,self.current)
                    if (_this2.matchObj is not None):
                        start2 = self.position
                        while True:
                            tmp1 = None
                            if (not self.isEof()):
                                _this3 = EReg("[0-9]","")
                                _this3.matchObj = python_lib_Re.search(_this3.pattern,self.current)
                                tmp1 = (_this3.matchObj is not None)
                            else:
                                tmp1 = False
                            if (not tmp1):
                                break
                            self.advance()
                        numberStr = HxString.substring(self.source,start2,self.position)
                        x18 = src_Token(src_TokenType.NUMBER,numberStr,self.line,(self.column - ((self.position - start2))))
                        tokens.append(x18)
                    else:
                        raise haxe_Exception.thrown(((((("Unknown character: " + HxOverrides.stringOrNull(self.current)) + " at line ") + Std.string(self.line)) + ", column ") + Std.string(self.column)))
        return tokens

    def isKeyword(self,identifier):
        keywords = ["print", "input", "let", "if", "then", "else", "while", "do", "end", "true", "false", "inc", "dec"]
        return (python_internal_ArrayImpl.indexOf(keywords,identifier.lower(),None) != -1)

src_Lexer._hx_class = src_Lexer


class src_Main:
    _hx_class_name = "src.Main"
    __slots__ = ()
    _hx_statics = ["main"]

    @staticmethod
    def main():
        if (len(Sys.args()) > 1):
            src_Utils.print("Usage: haxic [<file>]")
            return
        if (len(Sys.args()) == 1):
            filename = python_internal_ArrayImpl._get(Sys.args(), 0)
            content = sys_io_File.getContent(filename)
            lexer = src_Lexer(content)
            tokens = lexer.tokenize()
            parser = src_Parser(tokens)
            ast = parser.parse()
            interpreter = src_InterpBknd()
            interpreter.visit(ast)
            return
        interpreter = src_InterpBknd()
        while True:
            src_Utils.print("haxic> ",False)
            Sys.stdout().flush()
            line = Sys.stdin().readLine()
            if (line is None):
                continue
            lexer = src_Lexer(line)
            tokens = lexer.tokenize()
            parser = src_Parser(tokens)
            ast = parser.parse()
            interpreter.visit(ast)
src_Main._hx_class = src_Main


class src_Parser:
    _hx_class_name = "src.Parser"
    __slots__ = ("tokens", "position")
    _hx_fields = ["tokens", "position"]
    _hx_methods = ["parse", "parsePrintStatement", "parseInputStatement", "parseLetStatement", "parseWhileStatement", "parseIfStatement", "parseIncStatement", "parseDecStatement", "parseBlockWithTerminators", "parseStatement", "comparison", "expr", "term", "unary", "factor", "match", "consume", "check", "advance", "isAtEnd", "peek", "previous"]

    def __init__(self,tokens):
        self.position = 0
        self.tokens = tokens

    def parse(self):
        statements = []
        while (not self.isAtEnd()):
            x = self.parseStatement()
            statements.append(x)
        return statements

    def parsePrintStatement(self):
        self.advance()
        expr = self.comparison()
        self.consume(src_TokenType.SEMICOLON,"Expected ';' after value.")
        return src_ast_PrintStmt(expr,self.previous().line,self.previous().column)

    def parseInputStatement(self):
        self.advance()
        name = self.consume(src_TokenType.IDENTIFIER,"Expected variable after 'input'.")
        self.consume(src_TokenType.SEMICOLON,"Expected ';' after value.")
        return src_ast_InputStmt(src_ast_VariableExpr(name.value,name.line,name.column),name.line,name.column)

    def parseLetStatement(self):
        self.advance()
        bindings = []
        while True:
            name = self.consume(src_TokenType.IDENTIFIER,"Expected variable name in let statement.")
            x = src_ast_VariableExpr(name.value,name.line,name.column)
            bindings.append(x)
            if (not (self.match(src_TokenType.COMMA))):
                break
        if self.check(src_TokenType.EQUALS):
            self.consume(src_TokenType.EQUALS,"Expected '=' after variable names in let statement.")
            value = self.comparison()
            self.consume(src_TokenType.SEMICOLON,"Expected ';' after value.")
            return src_ast_LetStmt(bindings,value,self.previous().line,self.previous().column)
        else:
            self.consume(src_TokenType.SEMICOLON,"Expected ';' after variable names.")
            return src_ast_LetStmt(bindings,None,self.previous().line,self.previous().column)

    def parseWhileStatement(self):
        self.advance()
        condition = self.comparison()
        self.consume(src_TokenType.KEYWORD,"Expected 'do' after condition.")
        if (self.previous().value != "do"):
            raise haxe_Exception.thrown("Expected 'do' after condition.")
        body = self.parseBlockWithTerminators(["end"],self.previous().line,self.previous().column)
        kwEnd = self.consume(src_TokenType.KEYWORD,"Expected 'end' after while statement.")
        if (kwEnd.value != "end"):
            raise haxe_Exception.thrown("Expected 'end' after while statement.")
        return src_ast_WhileStmt(condition,body,condition.line,condition.column)

    def parseIfStatement(self):
        self.advance()
        condition = self.comparison()
        self.consume(src_TokenType.KEYWORD,"Expected 'then' after condition.")
        if (self.previous().value != "then"):
            raise haxe_Exception.thrown("Expected 'then' after condition.")
        thenBranch = self.parseBlockWithTerminators(["else", "end"],self.previous().line,self.previous().column)
        elseBranch = None
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "else"))):
            self.advance()
            elseBranch = self.parseBlockWithTerminators(["end"],self.previous().line,self.previous().column)
        kwEnd = self.consume(src_TokenType.KEYWORD,"Expected 'end' after if statement.")
        if (kwEnd.value != "end"):
            raise haxe_Exception.thrown("Expected 'end' after if statement.")
        return src_ast_IfStmt(condition,thenBranch,elseBranch,condition.line,condition.column)

    def parseIncStatement(self):
        self.advance()
        name = self.consume(src_TokenType.IDENTIFIER,"Expected variable after 'inc'.")
        self.consume(src_TokenType.SEMICOLON,"Expected ';' after variable.")
        varExpr = src_ast_VariableExpr(name.value,name.line,name.column)
        one = src_ast_NumberExpr(1,name.line,name.column)
        binary = src_ast_BinaryExpr(varExpr,src_Token(src_TokenType.PLUS,"+",name.line,name.column),one,name.line,name.column)
        return src_ast_LetStmt([src_ast_VariableExpr(("null" if ((name.value is None)) else Std.string(name.value)),name.line,name.column)],binary,name.line,name.column)

    def parseDecStatement(self):
        self.advance()
        name = self.consume(src_TokenType.IDENTIFIER,"Expected variable after 'dec'.")
        self.consume(src_TokenType.SEMICOLON,"Expected ';' after variable.")
        varExpr = src_ast_VariableExpr(name.value,name.line,name.column)
        one = src_ast_NumberExpr(1,name.line,name.column)
        binary = src_ast_BinaryExpr(varExpr,src_Token(src_TokenType.MINUS,"-",name.line,name.column),one,name.line,name.column)
        return src_ast_LetStmt([src_ast_VariableExpr(("null" if ((name.value is None)) else Std.string(name.value)),name.line,name.column)],binary,name.line,name.column)

    def parseBlockWithTerminators(self,terminators,line,column):
        statements = []
        while ((not self.isAtEnd()) and (not ((self.check(src_TokenType.KEYWORD) and ((python_internal_ArrayImpl.indexOf(terminators,self.peek().value,None) != -1)))))):
            x = self.parseStatement()
            statements.append(x)
        return src_ast_BlockStmt(statements,line,column)

    def parseStatement(self):
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "print"))):
            return self.parsePrintStatement()
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "input"))):
            return self.parseInputStatement()
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "let"))):
            return self.parseLetStatement()
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "if"))):
            return self.parseIfStatement()
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "while"))):
            return self.parseWhileStatement()
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "inc"))):
            return self.parseIncStatement()
        if (self.check(src_TokenType.KEYWORD) and ((self.peek().value == "dec"))):
            return self.parseDecStatement()
        return src_ast_ExprStmt(self.comparison(),self.peek().line,self.peek().column)

    def comparison(self):
        left = self.expr()
        while (((((self.match(src_TokenType.GT) or self.match(src_TokenType.GTEQ)) or self.match(src_TokenType.LT)) or self.match(src_TokenType.LTEQ)) or self.match(src_TokenType.EQEQ)) or self.match(src_TokenType.NOTEQ)):
            oper = self.previous()
            right = self.term()
            left = src_ast_BinaryExpr(left,oper,right,oper.line,oper.column)
        return left

    def expr(self):
        left = self.term()
        while (self.match(src_TokenType.PLUS) or self.match(src_TokenType.MINUS)):
            oper = self.previous()
            right = self.term()
            left = src_ast_BinaryExpr(left,oper,right,oper.line,oper.column)
        return left

    def term(self):
        left = self.unary()
        while (self.match(src_TokenType.STAR) or self.match(src_TokenType.SLASH)):
            oper = self.previous()
            right = self.unary()
            left = src_ast_BinaryExpr(left,oper,right,oper.line,oper.column)
        return left

    def unary(self):
        if (self.check(src_TokenType.BANG) or self.check(src_TokenType.MINUS)):
            oper = self.advance()
            right = self.unary()
            return src_ast_UnaryExpr(oper,right,oper.line,oper.column)
        return self.factor()

    def factor(self):
        if self.match(src_TokenType.NUMBER):
            return src_ast_NumberExpr(Std.parseFloat(self.previous().value),self.previous().line,self.previous().column)
        if self.match(src_TokenType.LPAREN):
            expr = self.expr()
            self.consume(src_TokenType.RPAREN,"Expected ')' after expression.")
            return expr
        if self.match(src_TokenType.IDENTIFIER):
            return src_ast_VariableExpr(self.previous().value,self.previous().line,self.previous().column)
        if self.match(src_TokenType.STRING):
            return src_ast_StringExpr(self.previous().value,self.previous().line,self.previous().column)
        if (self.check(src_TokenType.KEYWORD) and (((self.peek().value == "true") or ((self.peek().value == "false"))))):
            kw = self.advance()
            return src_ast_BooleanExpr((kw.value == "true"),kw.line,kw.column)
        raise haxe_Exception.thrown(("Unexpected token in factor: " + Std.string(self.peek())))

    def match(self,_hx_type):
        if self.check(_hx_type):
            self.advance()
            return True
        return False

    def consume(self,_hx_type,message):
        if self.check(_hx_type):
            return self.advance()
        raise haxe_Exception.thrown(((("null" if message is None else message) + " -- Found: ") + Std.string(self.peek())))

    def check(self,_hx_type):
        if self.isAtEnd():
            return False
        return (self.peek().type == _hx_type)

    def advance(self):
        if (not self.isAtEnd()):
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.position
            _hx_local_0.position = (_hx_local_1 + 1)
            _hx_local_1
        return self.previous()

    def isAtEnd(self):
        return (self.position >= len(self.tokens))

    def peek(self):
        if self.isAtEnd():
            return None
        else:
            return python_internal_ArrayImpl._get(self.tokens, self.position)

    def previous(self):
        if (self.position > 0):
            return python_internal_ArrayImpl._get(self.tokens, (self.position - 1))
        else:
            return None

src_Parser._hx_class = src_Parser


class src_Token:
    _hx_class_name = "src.Token"
    __slots__ = ("type", "value", "line", "column")
    _hx_fields = ["type", "value", "line", "column"]
    _hx_methods = ["toString"]

    def __init__(self,_hx_type,value,line,column):
        self.type = _hx_type
        self.value = value
        self.line = line
        self.column = column

    def toString(self):
        return (((((((((("Token(type:" + Std.string(self.type)) + ", value:'") + HxOverrides.stringOrNull((("null" if ((self.value is None)) else Std.string(self.value))))) + "'(") + HxOverrides.stringOrNull(Type.getClassName(Type.getClass(self.value)))) + "), line:") + Std.string(self.line)) + ", column:") + Std.string(self.column)) + ")")

src_Token._hx_class = src_Token

class src_TokenType(Enum):
    __slots__ = ()
    _hx_class_name = "src.TokenType"
    _hx_constructs = ["IDENTIFIER", "KEYWORD", "NUMBER", "STRING", "PLUS", "MINUS", "STAR", "SLASH", "LPAREN", "RPAREN", "SEMICOLON", "EQUALS", "COMMA", "EQEQ", "NOTEQ", "GT", "GTEQ", "LT", "LTEQ", "BANG"]
src_TokenType.IDENTIFIER = src_TokenType("IDENTIFIER", 0, ())
src_TokenType.KEYWORD = src_TokenType("KEYWORD", 1, ())
src_TokenType.NUMBER = src_TokenType("NUMBER", 2, ())
src_TokenType.STRING = src_TokenType("STRING", 3, ())
src_TokenType.PLUS = src_TokenType("PLUS", 4, ())
src_TokenType.MINUS = src_TokenType("MINUS", 5, ())
src_TokenType.STAR = src_TokenType("STAR", 6, ())
src_TokenType.SLASH = src_TokenType("SLASH", 7, ())
src_TokenType.LPAREN = src_TokenType("LPAREN", 8, ())
src_TokenType.RPAREN = src_TokenType("RPAREN", 9, ())
src_TokenType.SEMICOLON = src_TokenType("SEMICOLON", 10, ())
src_TokenType.EQUALS = src_TokenType("EQUALS", 11, ())
src_TokenType.COMMA = src_TokenType("COMMA", 12, ())
src_TokenType.EQEQ = src_TokenType("EQEQ", 13, ())
src_TokenType.NOTEQ = src_TokenType("NOTEQ", 14, ())
src_TokenType.GT = src_TokenType("GT", 15, ())
src_TokenType.GTEQ = src_TokenType("GTEQ", 16, ())
src_TokenType.LT = src_TokenType("LT", 17, ())
src_TokenType.LTEQ = src_TokenType("LTEQ", 18, ())
src_TokenType.BANG = src_TokenType("BANG", 19, ())
src_TokenType._hx_class = src_TokenType


class src_Utils:
    _hx_class_name = "src.Utils"
    __slots__ = ()
    _hx_statics = ["print"]

    @staticmethod
    def print(value,writeNewLine = None):
        if (writeNewLine is None):
            writeNewLine = True
        Sys.stdout().write(haxe_io_Bytes.ofString((Std.string(value) + HxOverrides.stringOrNull((("\n" if writeNewLine else ""))))))
src_Utils._hx_class = src_Utils


class src_ast_Node:
    _hx_class_name = "src.ast.Node"
    __slots__ = ("line", "column")
    _hx_fields = ["line", "column"]
    _hx_methods = ["toString"]

    def __init__(self,line,column):
        self.line = line
        self.column = column

    def toString(self):
        return "Node"

src_ast_Node._hx_class = src_ast_Node


class src_ast_Expr(src_ast_Node):
    _hx_class_name = "src.ast.Expr"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Node


    def __init__(self,line,column):
        super().__init__(line,column)

    def toString(self):
        return "Expr"

src_ast_Expr._hx_class = src_ast_Expr


class src_ast_BinaryExpr(src_ast_Expr):
    _hx_class_name = "src.ast.BinaryExpr"
    __slots__ = ("left", "oper", "right")
    _hx_fields = ["left", "oper", "right"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Expr


    def __init__(self,left,oper,right,line,column):
        self.right = None
        self.oper = None
        self.left = None
        super().__init__(line,column)
        self.left = left
        self.oper = oper
        self.right = right

    def toString(self):
        return (((((("(" + HxOverrides.stringOrNull(self.left.toString())) + " ") + HxOverrides.stringOrNull((("null" if ((self.oper.value is None)) else Std.string(self.oper.value))))) + " ") + HxOverrides.stringOrNull(self.right.toString())) + ")")

src_ast_BinaryExpr._hx_class = src_ast_BinaryExpr


class src_ast_Stmt(src_ast_Node):
    _hx_class_name = "src.ast.Stmt"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Node


    def __init__(self,line,column):
        super().__init__(line,column)

    def toString(self):
        return "Stmt"

src_ast_Stmt._hx_class = src_ast_Stmt


class src_ast_BlockStmt(src_ast_Stmt):
    _hx_class_name = "src.ast.BlockStmt"
    __slots__ = ("statements",)
    _hx_fields = ["statements"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Stmt


    def __init__(self,statements,line,column):
        self.statements = None
        super().__init__(line,column)
        self.statements = statements

    def toString(self):
        _this = self.statements
        return (("Block(" + HxOverrides.stringOrNull(", ".join([python_Boot.toString1(x1,'') for x1 in _this]))) + ")")

src_ast_BlockStmt._hx_class = src_ast_BlockStmt


class src_ast_BooleanExpr(src_ast_Expr):
    _hx_class_name = "src.ast.BooleanExpr"
    __slots__ = ("value",)
    _hx_fields = ["value"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Expr


    def __init__(self,value,line,column):
        self.value = None
        super().__init__(line,column)
        self.value = value

    def toString(self):
        return (("Boolean(" + Std.string(self.value)) + ")")

src_ast_BooleanExpr._hx_class = src_ast_BooleanExpr


class src_ast_ExprStmt(src_ast_Stmt):
    _hx_class_name = "src.ast.ExprStmt"
    __slots__ = ("expr",)
    _hx_fields = ["expr"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Stmt


    def __init__(self,expr,line,column):
        self.expr = None
        super().__init__(line,column)
        self.expr = expr

    def toString(self):
        return (("Expr(" + HxOverrides.stringOrNull(self.expr.toString())) + ")")

src_ast_ExprStmt._hx_class = src_ast_ExprStmt


class src_ast_IfStmt(src_ast_Stmt):
    _hx_class_name = "src.ast.IfStmt"
    __slots__ = ("condition", "thenBranch", "elseBranch")
    _hx_fields = ["condition", "thenBranch", "elseBranch"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Stmt


    def __init__(self,condition,thenBranch,elseBranch = None,line = None,column = None):
        self.elseBranch = None
        self.thenBranch = None
        self.condition = None
        super().__init__(line,column)
        self.condition = condition
        self.thenBranch = thenBranch
        self.elseBranch = elseBranch

    def toString(self):
        return ((((("If(cond=" + HxOverrides.stringOrNull(self.condition.toString())) + ", then=") + HxOverrides.stringOrNull(self.thenBranch.toString())) + HxOverrides.stringOrNull((((", else=" + HxOverrides.stringOrNull(self.elseBranch.toString())) if ((self.elseBranch is not None)) else "")))) + ")")

src_ast_IfStmt._hx_class = src_ast_IfStmt


class src_ast_InputStmt(src_ast_Stmt):
    _hx_class_name = "src.ast.InputStmt"
    __slots__ = ("target",)
    _hx_fields = ["target"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Stmt


    def __init__(self,target,line,column):
        self.target = None
        super().__init__(line,column)
        self.target = target

    def toString(self):
        return (("Input(" + HxOverrides.stringOrNull(self.target.toString())) + ")")

src_ast_InputStmt._hx_class = src_ast_InputStmt


class src_ast_LetStmt(src_ast_Stmt):
    _hx_class_name = "src.ast.LetStmt"
    __slots__ = ("bindings", "value")
    _hx_fields = ["bindings", "value"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Stmt


    def __init__(self,bindings,value,line,column):
        self.value = None
        self.bindings = None
        super().__init__(line,column)
        self.bindings = bindings
        self.value = value

    def toString(self):
        return (((("LetStmt(" + Std.string(self.bindings)) + ", ") + Std.string(self.value)) + ")")

src_ast_LetStmt._hx_class = src_ast_LetStmt


class src_ast_NumberExpr(src_ast_Expr):
    _hx_class_name = "src.ast.NumberExpr"
    __slots__ = ("value",)
    _hx_fields = ["value"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Expr


    def __init__(self,value,line,column):
        self.value = None
        super().__init__(line,column)
        self.value = value

    def toString(self):
        return (("Num(" + Std.string(self.value)) + ")")

src_ast_NumberExpr._hx_class = src_ast_NumberExpr


class src_ast_PrintStmt(src_ast_Stmt):
    _hx_class_name = "src.ast.PrintStmt"
    __slots__ = ("expr",)
    _hx_fields = ["expr"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Stmt


    def __init__(self,expr,line,column):
        self.expr = None
        super().__init__(line,column)
        self.expr = expr

    def toString(self):
        return (("Print(" + HxOverrides.stringOrNull(self.expr.toString())) + ")")

src_ast_PrintStmt._hx_class = src_ast_PrintStmt


class src_ast_StringExpr(src_ast_Expr):
    _hx_class_name = "src.ast.StringExpr"
    __slots__ = ("value",)
    _hx_fields = ["value"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Expr


    def __init__(self,value,line,column):
        self.value = None
        super().__init__(line,column)
        self.value = value

    def toString(self):
        return (("\"" + HxOverrides.stringOrNull(self.value)) + "\"")

src_ast_StringExpr._hx_class = src_ast_StringExpr


class src_ast_UnaryExpr(src_ast_Expr):
    _hx_class_name = "src.ast.UnaryExpr"
    __slots__ = ("oper", "right")
    _hx_fields = ["oper", "right"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Expr


    def __init__(self,oper,right,line,column):
        self.right = None
        self.oper = None
        super().__init__(line,column)
        self.oper = oper
        self.right = right

    def toString(self):
        return (((("Unary(" + HxOverrides.stringOrNull((("null" if ((self.oper.value is None)) else Std.string(self.oper.value))))) + ", ") + HxOverrides.stringOrNull(self.right.toString())) + ")")

src_ast_UnaryExpr._hx_class = src_ast_UnaryExpr


class src_ast_VariableExpr(src_ast_Expr):
    _hx_class_name = "src.ast.VariableExpr"
    __slots__ = ("name",)
    _hx_fields = ["name"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Expr


    def __init__(self,name,line,column):
        self.name = None
        super().__init__(line,column)
        self.name = name

    def toString(self):
        return (("Var(" + HxOverrides.stringOrNull(self.name)) + ")")

src_ast_VariableExpr._hx_class = src_ast_VariableExpr


class src_ast_WhileStmt(src_ast_Stmt):
    _hx_class_name = "src.ast.WhileStmt"
    __slots__ = ("condition", "body")
    _hx_fields = ["condition", "body"]
    _hx_methods = ["toString"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = src_ast_Stmt


    def __init__(self,condition,body,line,column):
        self.body = None
        self.condition = None
        super().__init__(line,column)
        self.condition = condition
        self.body = body

    def toString(self):
        return (((("While(condition=" + HxOverrides.stringOrNull(self.condition.toString())) + ", body=") + HxOverrides.stringOrNull(self.body.toString())) + ")")

src_ast_WhileStmt._hx_class = src_ast_WhileStmt


class sys_io_File:
    _hx_class_name = "sys.io.File"
    __slots__ = ()
    _hx_statics = ["getContent"]

    @staticmethod
    def getContent(path):
        f = python_lib_Builtins.open(path,"r",-1,"utf-8",None,"")
        content = f.read(-1)
        f.close()
        return content
sys_io_File._hx_class = sys_io_File


class sys_io_FileInput(haxe_io_Input):
    _hx_class_name = "sys.io.FileInput"
    __slots__ = ("impl",)
    _hx_fields = ["impl"]
    _hx_methods = ["set_bigEndian", "readByte", "readLine"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_io_Input


    def __init__(self,impl):
        self.impl = impl

    def set_bigEndian(self,b):
        return self.impl.set_bigEndian(b)

    def readByte(self):
        return self.impl.readByte()

    def readLine(self):
        return self.impl.readLine()

sys_io_FileInput._hx_class = sys_io_FileInput


class sys_io_FileOutput(haxe_io_Output):
    _hx_class_name = "sys.io.FileOutput"
    __slots__ = ("impl",)
    _hx_fields = ["impl"]
    _hx_methods = ["set_bigEndian", "writeByte", "writeBytes", "flush", "write"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_io_Output


    def __init__(self,impl):
        self.impl = impl

    def set_bigEndian(self,b):
        return self.impl.set_bigEndian(b)

    def writeByte(self,c):
        self.impl.writeByte(c)

    def writeBytes(self,s,pos,_hx_len):
        return self.impl.writeBytes(s,pos,_hx_len)

    def flush(self):
        self.impl.flush()

    def write(self,s):
        self.impl.write(s)

sys_io_FileOutput._hx_class = sys_io_FileOutput

Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi

python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")

src_Main.main()
